<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="27:OscilloscopeAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7eed2188"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7ed628c8"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.x/tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7ed628c8"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7ea83300"/></to>
    </wire>
    <wire loc="28:OscilloscopeAppC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7edf3a48"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ea35a40"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x7ea35a40"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7ea222c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="29:OscilloscopeAppC.nc">
      <from><interface-ref name="Read_Humidity" scoped="" ref="0x7ede13b0"/></from>
      <to><interface-ref name="Humidity" scoped="" ref="0x7e5f9bc0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Humidity" scoped="" ref="0x7e5f9bc0"/></from>
      <to><interface-ref name="Humidity" scoped="" ref="0x7e022bc0"/></to>
    </wire>
    <wire loc="30:OscilloscopeAppC.nc">
      <from><interface-ref name="Read_Temp" scoped="" ref="0x7edf0010"/></from>
      <to><interface-ref name="Temperature" scoped="" ref="0x7e5f9010"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Temperature" scoped="" ref="0x7e5f9010"/></from>
      <to><interface-ref name="Temperature" scoped="" ref="0x7e022010"/></to>
    </wire>
    <wire loc="31:OscilloscopeAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7edc2e78"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7ea741d8"/></to>
    </wire>
    <wire loc="40:/opt/tinyos-2.x/tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7ea741d8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7ea73e68"/></to>
    </wire>
    <wire loc="33:OscilloscopeAppC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7eec39d0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7e5f4bc8"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7e5f4bc8"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7e58c7b0"/></to>
    </wire>
    <wire loc="34:OscilloscopeAppC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7ee234a0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7e5f34c8"/>
      <arguments>
        <value cst="I:147">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="35:OscilloscopeAppC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7ee129d0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7e5f3df8"/>
      <arguments>
        <value cst="I:147">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ed60080"/></from>
      <to><interface-ref name="Uart0Init" scoped="" ref="0x7e443960"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ed60080"/></from>
      <to><interface-ref name="Uart1Init" scoped="" ref="0x7e4411a8"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ed60080"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7e482c70"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ed60080"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7e58c488"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ed60080"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7df94a30"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.x/tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ed60080"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ea12498"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7ea83648"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f230970"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.x/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f230970"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f070960"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7ea83b78"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ed50d60"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.x/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7ed50d60"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ed30d10"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.x/tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ea83ee8"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7ed60080"/></to>
    </wire>
    <wire loc="26:/opt/tinyos-2.x/tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7ed41010"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7e390de0"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7ed41010"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7e9d2128"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7ed338f0"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7eaa6160"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x7ed24400"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7eab1d58"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.x/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7ed24090"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ea406b8"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7ed24090"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7ed31a38"/></to>
    </wire>
    <wire loc="23:/opt/tinyos-2.x/tos/platforms/zigbex/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7ed31a38"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7ed04010"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.x/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7ed31da0"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7ed41010"/></to>
    </wire>
    <wire loc="25:/opt/tinyos-2.x/tos/platforms/zigbex/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x7ecf48e0"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x7ece2188"/></to>
    </wire>
    <wire loc="132:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x7ece2188"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7ec02ac8"/></to>
    </wire>
    <wire loc="26:/opt/tinyos-2.x/tos/platforms/zigbex/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7ed02280"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7ed31da0"/></to>
    </wire>
    <wire loc="182:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x7ec84e78"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7eb302d8"/></to>
    </wire>
    <wire loc="156:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x7ecb4e98"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7ebc3330"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x7ebc3330"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e200228"/></to>
    </wire>
    <wire loc="167:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x7eca2068"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7ebb0d68"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x7ebb0d68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e191ac8"/></to>
    </wire>
    <wire loc="176:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x7ec93e78"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7eb93410"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x7eb93410"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e1420f8"/></to>
    </wire>
    <wire loc="134:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x7ece1508"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7ec01e48"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x7ec01e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e30a570"/></to>
    </wire>
    <wire loc="174:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x7ec94af8"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7eb94090"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x7eb94090"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e146c78"/></to>
    </wire>
    <wire loc="137:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x7ecd4808"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7ebf3bc0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x7ebf3bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e2c4d08"/></to>
    </wire>
    <wire loc="148:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x7ecc3980"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7ebd55d0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x7ebd55d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e24f718"/></to>
    </wire>
    <wire loc="159:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x7ecb2bd8"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7ebc1030"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x7ebc1030"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e1ed0b0"/></to>
    </wire>
    <wire loc="170:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x7eca1d98"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7eba4ac8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x7eba4ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e18c9e8"/></to>
    </wire>
    <wire loc="129:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x7ece4428"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7ec04e70"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x7ec04e70"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e3312d0"/></to>
    </wire>
    <wire loc="140:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x7ecd2508"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7ebf0890"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x7ebf0890"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e2aeac8"/></to>
    </wire>
    <wire loc="151:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x7ecc16c8"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7ebd2250"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x7ebd2250"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e24a570"/></to>
    </wire>
    <wire loc="162:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x7ecb0980"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7ebc0c88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x7ebc0c88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e1e8010"/></to>
    </wire>
    <wire loc="179:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x7ec90b00"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7eb91170"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x7eb91170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e12f010"/></to>
    </wire>
    <wire loc="185:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x7ec82d98"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7eb14bc0"/></to>
    </wire>
    <wire loc="165:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x7eca4cb8"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7ebb1a18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x7ebb1a18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e1a2718"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x7ec02ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e30d0f8"/></to>
    </wire>
    <wire loc="143:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x7ecd0268"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7ebe45d0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x7ebe45d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e2a99e8"/></to>
    </wire>
    <wire loc="183:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x7ec83aa0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7eb23590"/></to>
    </wire>
    <wire loc="146:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x7ecc45e8"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7ebe02a0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x7ebe02a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e2612b0"/></to>
    </wire>
    <wire loc="157:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x7ecb3858"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7ebc3c88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x7ebc3c88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e1f1c08"/></to>
    </wire>
    <wire loc="168:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x7eca29d8"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7eba5790"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x7eba5790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e18f570"/></to>
    </wire>
    <wire loc="177:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x7ec91808"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7eb93d68"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x7eb93d68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e141ac8"/></to>
    </wire>
    <wire loc="135:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x7ece1e78"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7ec007d0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x7ec007d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e308010"/></to>
    </wire>
    <wire loc="138:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x7ecd3190"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7ebf25d0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x7ebf25d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e2c0718"/></to>
    </wire>
    <wire loc="149:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x7ecc2348"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7ebd5f28"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x7ebd5f28"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e24d0f8"/></to>
    </wire>
    <wire loc="160:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x7ecb15e8"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7ebc1988"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x7ebc1988"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e1eca88"/></to>
    </wire>
    <wire loc="171:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x7eca07a8"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7eba34f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x7eba34f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e18a538"/></to>
    </wire>
    <wire loc="130:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x7ece4d98"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7ec037f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x7ec037f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e330c90"/></to>
    </wire>
    <wire loc="141:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x7ecd2e78"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7ebe5250"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x7ebe5250"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e2ac570"/></to>
    </wire>
    <wire loc="152:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x7ecc0068"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7ebd2ba8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x7ebd2ba8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e247010"/></to>
    </wire>
    <wire loc="180:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x7ec84508"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7eb91ac8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x7eb91ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e12e9e8"/></to>
    </wire>
    <wire loc="155:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x7ecb4428"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7ebc49c0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x7ebc49c0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e2027f8"/></to>
    </wire>
    <wire loc="166:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x7eca36c8"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7ebb0410"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x7ebb0410"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e1a00f8"/></to>
    </wire>
    <wire loc="175:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x7ec93508"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7eb949e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x7eb949e8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e144718"/></to>
    </wire>
    <wire loc="186:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x7ec817a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7eb12f20"/></to>
    </wire>
    <wire loc="133:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x7ece2af8"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7ec014f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x7ec014f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e30cac8"/></to>
    </wire>
    <wire loc="144:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x7ecd0bd8"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7ebe4f28"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x7ebe4f28"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e2a7538"/></to>
    </wire>
    <wire loc="173:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x7ec94188"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7eb956f8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x7eb956f8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e1472b0"/></to>
    </wire>
    <wire loc="147:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x7ecc3010"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7ebe0bf8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x7ebe0bf8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e260c78"/></to>
    </wire>
    <wire loc="158:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x7ecb2268"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7ebc26b0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x7ebc26b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e1ef6c0"/></to>
    </wire>
    <wire loc="169:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x7eca1428"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7eba4170"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x7eba4170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e18d010"/></to>
    </wire>
    <wire loc="178:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x7ec90190"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7eb92790"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x7eb92790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e132570"/></to>
    </wire>
    <wire loc="128:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x7ecf0a80"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7ec04518"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x7ec04518"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e3338f0"/></to>
    </wire>
    <wire loc="139:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x7ecd3b00"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7ebf2f28"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x7ebf2f28"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e2af0f8"/></to>
    </wire>
    <wire loc="150:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x7ecc2cb8"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7ebd4890"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x7ebd4890"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e24cac8"/></to>
    </wire>
    <wire loc="161:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x7ecb0010"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7ebc0330"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x7ebc0330"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e1ea538"/></to>
    </wire>
    <wire loc="184:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x7ec82428"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7eb21880"/></to>
    </wire>
    <wire loc="164:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x7eca4348"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7ebb10c0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x7ebb10c0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e1a6d08"/></to>
    </wire>
    <wire loc="153:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x7ecc09d8"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7ebd15d0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x7ebd15d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e2469e8"/></to>
    </wire>
    <wire loc="131:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x7ece37a8"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7ec02170"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x7ec02170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e30f718"/></to>
    </wire>
    <wire loc="142:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x7ecd1878"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7ebe5ba8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x7ebe5ba8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7e2aa010"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.x/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f2109b8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f062120"/></to>
    </wire>
    <wire loc="44:/opt/tinyos-2.x/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f051540"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f202c20"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.x/tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7ea406b8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ea73b48"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.x/tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7ea66ac8"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7ea42908"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.x/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7ea42908"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0x7ece4d98"/></to>
    </wire>
    <wire loc="44:/opt/tinyos-2.x/tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7ea65508"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7ea41368"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.x/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7ea41368"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0x7ece4428"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.x/tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7ea65e78"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7ea41cf8"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.x/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7ea41cf8"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0x7ecf0a80"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.x/tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7ea222c0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7ea12b30"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7ea12b30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7e860da8"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.x/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7ea12498"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7e9f5268"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.x/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7ea01338"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7e8134c8"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7e9f5268"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7e954090"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7e820dc0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7e891b60"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7e866b60"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x7e9e5e68"/></to>
    </wire>
    <wire loc="38:/opt/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x7e9e5e68"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7e8a3010"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.x/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7e813de8"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x7e9d6c58"/></to>
    </wire>
    <wire loc="39:/opt/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x7e9d6c58"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7e8a2848"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7e954478"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7e9c6010"/></to>
    </wire>
    <wire loc="44:/opt/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="HplAtm128Timer" scoped="" ref="0x7e914340"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7e9c6010"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="HplAtm128Compare" scoped="" ref="0x7e912140"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7e9a4ca8"/></to>
    </wire>
    <wire loc="46:/opt/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7e8f3790"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7e9c6010"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7e898960"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7e941ad8"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7e8a0908"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7e9057b0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="fired" scoped="" ref="0x7e8632d0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f2109b8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7e816c90"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f2109b8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="TempResource" scoped="" ref="0x7e020710"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7e7a9b88"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Sht11Temp" scoped="" ref="0x7e01f510"/></from>
      <to><interface-ref name="SensirionSht11" scoped="" ref="0x7e7a84f8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="HumResource" scoped="" ref="0x7e020de8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7e7a9b88"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Sht11Hum" scoped="" ref="0x7e01e080"/></from>
      <to><interface-ref name="SensirionSht11" scoped="" ref="0x7e7a84f8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="49:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="SensirionSht11" scoped="" ref="0x7e7a84f8"/></from>
      <to><interface-ref name="SensirionSht11" scoped="" ref="0x7e740068"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7e7a9b88"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7e728100"/></to>
    </wire>
    <wire loc="74:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7e728100"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7e6999e8"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="DATA" scoped="" ref="0x7e740bb0"/></from>
      <to><interface-ref name="DATA" scoped="" ref="0x7e7287f0"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="DATA" scoped="" ref="0x7e7287f0"/></from>
      <to><interface-ref name="PortD1" scoped="" ref="0x7ecb4e98"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="CLOCK" scoped="" ref="0x7e7395f0"/></from>
      <to><interface-ref name="SCK" scoped="" ref="0x7e7261a8"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="SCK" scoped="" ref="0x7e7261a8"/></from>
      <to><interface-ref name="PortD0" scoped="" ref="0x7ecb4428"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="InterruptDATA" scoped="" ref="0x7e738010"/></from>
      <to><interface-ref name="InterruptDATA" scoped="" ref="0x7e726b40"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="InterruptDATA" scoped="" ref="0x7e726b40"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7e6a91f0"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7e738678"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7e6030f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x7e6030f0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7ea222c0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7e735588"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7ea741d8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="readSensor" scoped="" ref="0x7e7346a8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f2109b8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="signalStatusDone" scoped="" ref="0x7e734270"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f2109b8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x7e6999e8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7df90010"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="DATA" scoped="" ref="0x7e718200"/></from>
      <to><interface-ref name="PortD1" scoped="" ref="0x7ecb4e98"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="SCK" scoped="" ref="0x7e718b90"/></from>
      <to><interface-ref name="PortD0" scoped="" ref="0x7ecb4428"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7e7202f8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7e722638"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x7e722638"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7ea222c0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="Atm128Interrupt" scoped="" ref="0x7e6a97e8"/></from>
      <to><interface-ref name="Int1" scoped="" ref="0x7e6f99c0"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int1" scoped="" ref="0x7e6f99c0"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0x7e6c7ce8"/></to>
    </wire>
    <wire loc="77:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7e630538"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7e721c70"/></to>
    </wire>
    <wire loc="79:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7e62b4d0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7e634c88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7e634c88"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7df84230"/></to>
    </wire>
    <wire loc="80:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="ResourceController" scoped="" ref="0x7e630e08"/></from>
      <to><interface-ref name="ResourceController" scoped="" ref="0x7e6345f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceController" scoped="" ref="0x7e6345f0"/></from>
      <to><interface-ref name="ResourceController" scoped="" ref="0x7df90b58"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11P.nc">
      <from><interface-ref name="stopTask" scoped="" ref="0x7e717908"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f2109b8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int6" scoped="" ref="0x7e6f8190"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0x7e6b5010"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int4" scoped="" ref="0x7e702190"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0x7e6c0e00"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int7" scoped="" ref="0x7e6f8948"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0x7e6b30b0"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int2" scoped="" ref="0x7e703190"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0x7e6c4ce8"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int5" scoped="" ref="0x7e702948"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0x7e6b9ec0"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int0" scoped="" ref="0x7e6f9208"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0x7e6d7d10"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int3" scoped="" ref="0x7e703948"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0x7e6c2ce8"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0x7e6d6510"/></from>
      <to><interface-ref name="IntSig0" scoped="" ref="0x7e6ea1c0"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0x7e6c5510"/></from>
      <to><interface-ref name="IntSig1" scoped="" ref="0x7e6ea538"/></to>
    </wire>
    <wire loc="73:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0x7e6c3510"/></from>
      <to><interface-ref name="IntSig2" scoped="" ref="0x7e6ea8b0"/></to>
    </wire>
    <wire loc="74:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0x7e6c1510"/></from>
      <to><interface-ref name="IntSig3" scoped="" ref="0x7e6eac28"/></to>
    </wire>
    <wire loc="75:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0x7e6ba5f0"/></from>
      <to><interface-ref name="IntSig4" scoped="" ref="0x7e6f1010"/></to>
    </wire>
    <wire loc="76:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0x7e6b76a0"/></from>
      <to><interface-ref name="IntSig5" scoped="" ref="0x7e6f1388"/></to>
    </wire>
    <wire loc="77:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0x7e6b57c8"/></from>
      <to><interface-ref name="IntSig6" scoped="" ref="0x7e6f1700"/></to>
    </wire>
    <wire loc="78:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0x7e6b3868"/></from>
      <to><interface-ref name="IntSig7" scoped="" ref="0x7e6f1a78"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7e6341e8"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7df90750"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7df846f0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7e633208"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Queue" scoped="" ref="0x7df84b18"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7df94d68"/></to>
    </wire>
    <wire>
      <from><interface-ref name="grantedTask" scoped="" ref="0x7df83d68"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f2109b8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="SplitControl" scoped="" ref="0x7df61ef8"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7e630538"/></to>
    </wire>
    <wire>
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x7df5f4c0"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x7e630af0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceController" scoped="" ref="0x7df5f7d8"/></from>
      <to><interface-ref name="ResourceController" scoped="" ref="0x7e630e08"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7df5fe70"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7e62b4d0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="stopTask" scoped="" ref="0x7df5e2d0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f2109b8"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="startTask" scoped="" ref="0x7df5e708"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f2109b8"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7e58c7b0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7e56a240"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7e5f34c8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7e5d6e18"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7e5e75d0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7e5953f0"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7e5f3df8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7e5d55a8"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7e5d74a8"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7e595a88"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7e5db9c8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7e5d5a90"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7e58c488"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7e56bf00"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7e5886b8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7e5d79b8"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7e594010"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7e58b760"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="59:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7e5946c8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7e58b010"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7e5881d8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7e362738"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7e58b760"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7e4b3010"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7e58b010"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7e4eda48"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7e4b37a0"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7e5881d8"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7e562040"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7e5886b8"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7e4b27e8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7e5886b8"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7e4a74d8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7e5886b8"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7e4b3c88"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7e560418"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7e4b2230"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7e565d50"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7e5587c8"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7e4aa898"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7e562c58"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7e4acda8"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.x/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7e4acda8"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7e48ca10"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7e4a2c38"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7e491260"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.x/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7e491260"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7e4862a0"/></to>
    </wire>
    <wire loc="324:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7e526a98"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f2109b8"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7e5494d8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f2109b8"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="319:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7e528af0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f2109b8"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="receiveTask" scoped="" ref="0x7e4b1430"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f2109b8"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7e4b1868"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f2109b8"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7e48a400"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7e48ce38"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7e48ce38"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7e481428"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7e4862a0"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7e481840"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7e48ca10"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7e481010"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7e486c58"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7e4070b0"/></to>
    </wire>
    <wire loc="33:/opt/tinyos-2.x/tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7e4070b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7e3764b0"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7e45a6f0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7e486c58"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartTxControl" scoped="" ref="0x7e45c190"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x7e44bdf0"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0TxControl" scoped="" ref="0x7e44bdf0"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x7e443cd8"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartRxControl" scoped="" ref="0x7e45c5c8"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x7e449270"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0RxControl" scoped="" ref="0x7e449270"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x7e4421b0"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUart" scoped="" ref="0x7e45ca00"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x7e4496a8"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart0" scoped="" ref="0x7e4496a8"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x7e442608"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart1" scoped="" ref="0x7e448ae0"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0x7e441dd0"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1TxControl" scoped="" ref="0x7e448270"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0x7e441520"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1RxControl" scoped="" ref="0x7e4486a8"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0x7e441978"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7e440960"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7ed338f0"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x7e43e040"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7eff0078"/></to>
    </wire>
    <wire loc="34:/opt/tinyos-2.x/tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7e375508"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7e401498"/></to>
    </wire>
    <wire loc="31:/opt/tinyos-2.x/tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7e401498"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7e392db8"/></to>
    </wire>
    <wire loc="32:/opt/tinyos-2.x/tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7e391d80"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7e3fb368"/></to>
    </wire>
    <wire loc="46:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7e3fb368"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7e3e3460"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7e3f1b98"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7e3e02b8"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7e3ebb48"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7e3e0e90"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7e3ee9b8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x7e3dd968"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7e3ee9b8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x7e3da148"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7e3ee9b8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x7e3d88c8"/></to>
    </wire>
    <wire loc="27:/opt/tinyos-2.x/tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7e37f220"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7e3fb368"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="OscilloscopeC" loc="25:OscilloscopeC.nc">
      <module/>
    </component>
    <component qname="MainC" loc="45:/opt/tinyos-2.x/tos/system/MainC.nc">
      <documentation loc="45:/opt/tinyos-2.x/tos/system/MainC.nc">
        <short>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING. </short>
        <long>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.1.2.11 2006/09/22 19:23:59 idgay Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="35:/opt/tinyos-2.x/tos/platforms/mica/PlatformC.nc">
      <documentation loc="35:/opt/tinyos-2.x/tos/platforms/mica/PlatformC.nc">
        <short>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING. </short>
        <long>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.1.2.11 2006/09/22 19:23:59 idgay Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="33:/opt/tinyos-2.x/tos/platforms/mica/PlatformP.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/platforms/mica/PlatformP.nc">
        <short>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING. </short>
        <long>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.1.2.11 2006/09/22 19:23:59 idgay Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="15:/opt/tinyos-2.x/tos/platforms/zigbex/MotePlatformC.nc">
      <documentation loc="15:/opt/tinyos-2.x/tos/platforms/zigbex/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10;</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="18:/opt/tinyos-2.x/tos/platforms/zigbex/MotePlatformP.nc">
      <documentation loc="18:/opt/tinyos-2.x/tos/platforms/zigbex/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10;</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="33:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10;</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="31(HplAtm128GeneralIOC.PortA):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="31(HplAtm128GeneralIOC.PortA):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10;</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:59">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:58">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:57">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="32(HplAtm128GeneralIOC.PortA.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortA.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="32(HplAtm128GeneralIOC.PortA.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortA.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="32(HplAtm128GeneralIOC.PortA.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortA.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="32(HplAtm128GeneralIOC.PortA.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortA.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="32(HplAtm128GeneralIOC.PortA.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortA.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="32(HplAtm128GeneralIOC.PortA.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortA.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="32(HplAtm128GeneralIOC.PortA.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortA.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="32(HplAtm128GeneralIOC.PortA.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortA.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="31(HplAtm128GeneralIOC.PortB):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="31(HplAtm128GeneralIOC.PortB):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10;</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:56">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="32(HplAtm128GeneralIOC.PortB.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortB.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="32(HplAtm128GeneralIOC.PortB.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortB.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="32(HplAtm128GeneralIOC.PortB.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortB.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="32(HplAtm128GeneralIOC.PortB.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortB.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="32(HplAtm128GeneralIOC.PortB.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortB.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="32(HplAtm128GeneralIOC.PortB.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortB.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="32(HplAtm128GeneralIOC.PortB.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortB.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="32(HplAtm128GeneralIOC.PortB.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortB.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="31(HplAtm128GeneralIOC.PortC):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="31(HplAtm128GeneralIOC.PortC):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10;</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:53">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="32(HplAtm128GeneralIOC.PortC.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortC.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="32(HplAtm128GeneralIOC.PortC.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortC.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="32(HplAtm128GeneralIOC.PortC.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortC.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="32(HplAtm128GeneralIOC.PortC.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortC.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="32(HplAtm128GeneralIOC.PortC.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortC.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="32(HplAtm128GeneralIOC.PortC.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortC.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="32(HplAtm128GeneralIOC.PortC.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortC.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="32(HplAtm128GeneralIOC.PortC.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortC.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="31(HplAtm128GeneralIOC.PortD):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="31(HplAtm128GeneralIOC.PortD):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10;</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="32(HplAtm128GeneralIOC.PortD.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortD.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="32(HplAtm128GeneralIOC.PortD.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortD.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="32(HplAtm128GeneralIOC.PortD.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortD.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="32(HplAtm128GeneralIOC.PortD.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortD.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="32(HplAtm128GeneralIOC.PortD.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortD.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="32(HplAtm128GeneralIOC.PortD.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortD.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="32(HplAtm128GeneralIOC.PortD.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortD.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="32(HplAtm128GeneralIOC.PortD.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortD.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="31(HplAtm128GeneralIOC.PortE):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="31(HplAtm128GeneralIOC.PortE):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10;</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="32(HplAtm128GeneralIOC.PortE.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortE.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="32(HplAtm128GeneralIOC.PortE.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortE.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="32(HplAtm128GeneralIOC.PortE.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortE.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="32(HplAtm128GeneralIOC.PortE.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortE.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="32(HplAtm128GeneralIOC.PortE.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortE.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="32(HplAtm128GeneralIOC.PortE.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortE.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="32(HplAtm128GeneralIOC.PortE.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortE.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="32(HplAtm128GeneralIOC.PortE.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortE.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="31(HplAtm128GeneralIOC.PortF):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="31(HplAtm128GeneralIOC.PortF):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10;</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="32(HplAtm128GeneralIOC.PortF.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortF.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="32(HplAtm128GeneralIOC.PortF.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortF.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="32(HplAtm128GeneralIOC.PortF.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortF.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="32(HplAtm128GeneralIOC.PortF.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortF.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="32(HplAtm128GeneralIOC.PortF.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortF.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="32(HplAtm128GeneralIOC.PortF.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortF.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="32(HplAtm128GeneralIOC.PortF.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortF.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="32(HplAtm128GeneralIOC.PortF.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortF.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="33(HplAtm128GeneralIOC.F0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.F0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="33(HplAtm128GeneralIOC.F1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.F1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="33(HplAtm128GeneralIOC.F2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.F2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="33(HplAtm128GeneralIOC.F3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.F3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="33(HplAtm128GeneralIOC.F4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.F4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="33(HplAtm128GeneralIOC.F5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.F5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="33(HplAtm128GeneralIOC.F6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.F6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="33(HplAtm128GeneralIOC.F7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.F7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="33(HplAtm128GeneralIOC.G0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.G0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="33(HplAtm128GeneralIOC.G1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.G1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="33(HplAtm128GeneralIOC.G2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.G2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="33(HplAtm128GeneralIOC.G3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.G3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="33(HplAtm128GeneralIOC.G4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.G4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="22:/opt/tinyos-2.x/tos/platforms/mica/MeasureClockC.nc">
      <documentation loc="22:/opt/tinyos-2.x/tos/platforms/mica/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="45:/opt/tinyos-2.x/tos/system/RealMainP.nc">
      <documentation loc="45:/opt/tinyos-2.x/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10;</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="35:/opt/tinyos-2.x/tos/system/TinySchedulerC.nc">
      <documentation loc="35:/opt/tinyos-2.x/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="43:/opt/tinyos-2.x/tos/system/SchedulerBasicP.nc">
      <module/>
    </component>
    <component qname="McuSleepC" loc="40:/opt/tinyos-2.x/tos/chips/atm128/McuSleepC.nc">
      <documentation loc="40:/opt/tinyos-2.x/tos/chips/atm128/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.1.2.6 2006/09/22 19:12:14 idgay Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @date   October 26, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LedsC" loc="34:/opt/tinyos-2.x/tos/system/LedsC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10;</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="33:/opt/tinyos-2.x/tos/system/LedsP.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10;</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="33:/opt/tinyos-2.x/tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/platforms/mica/PlatformLedsC.nc">
        <short>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING. </short>
        <long>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.1.2.11 2006/09/22 19:23:59 idgay Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="OscilloscopeAppC.TimerMilliC" loc="36(OscilloscopeAppC.TimerMilliC):/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
      <documentation loc="36(OscilloscopeAppC.TimerMilliC):/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="37:/opt/tinyos-2.x/tos/system/TimerMilliP.nc">
      <documentation loc="37:/opt/tinyos-2.x/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="33:/opt/tinyos-2.x/tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="22:/opt/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="22:/opt/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer. </short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer0AsyncC" loc="37:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <documentation loc="37:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
        <short>&#10; HPL interface to Atmega128 timer 0 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega128 timer 0 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 0 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="AlarmCounterMilliP.MilliInit" loc="35(AlarmCounterMilliP.MilliInit):/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="35(AlarmCounterMilliP.MilliInit):/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AlarmCounterMilliP.MilliAlarm" loc="42(AlarmCounterMilliP.MilliAlarm):/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmC.nc">
      <documentation loc="42(AlarmCounterMilliP.MilliAlarm):/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10;</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmC"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AlarmCounterMilliP.MilliCounter" loc="33(AlarmCounterMilliP.MilliCounter):/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="33(AlarmCounterMilliP.MilliCounter):/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10;</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AlarmCounterMilliP.Transform32" loc="53(AlarmCounterMilliP.Transform32):/opt/tinyos-2.x/tos/lib/timer/TransformAlarmCounterC.nc">
      <documentation loc="53(AlarmCounterMilliP.Transform32):/opt/tinyos-2.x/tos/lib/timer/TransformAlarmCounterC.nc">
        <short>&#10; TransformAlarmCounterC decreases precision and/or widens an Alarm/Counter&#10; pair.</short>
        <long>&#10; TransformAlarmCounterC decreases precision and/or widens an Alarm/Counter&#10; pair. This component has a reduced interrupt overhead compared to using&#10; TransformAlarmC and TransformCounterC separately. However, it is not as &#10; useful for hardware timers with multiple compare registers.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   interfaces.&#10; @param to_size_type The type for the width of the transformed interfaces.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   interfaces.&#10; @param from_size_type The type for the width of the original interfaces.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmCounterC"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="35(HilTimerMilliC.AlarmToTimerC):/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="35(HilTimerMilliC.AlarmToTimerC):/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10;</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="35(HilTimerMilliC.VirtualizeTimerC):/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="35(HilTimerMilliC.VirtualizeTimerC):/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10;</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="35(HilTimerMilliC.CounterToLocalTimeC):/opt/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="35(HilTimerMilliC.CounterToLocalTimeC):/opt/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10;</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="OscilloscopeAppC.Sensor" loc="45(OscilloscopeAppC.Sensor):/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11C.nc">
      <documentation loc="45(OscilloscopeAppC.Sensor):/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11C.nc">
        <short>&#10; SensirionSht11C is a top-level access component for the Sensirion&#10; SHT11 model humidity and temperature sensor, available on the&#10; telosb platform.</short>
        <long>&#10; SensirionSht11C is a top-level access component for the Sensirion&#10; SHT11 model humidity and temperature sensor, available on the&#10; telosb platform. Because this component represents one physical&#10; device, simultaneous calls to read temperature and humidity will be&#10; arbitrated and executed in sequential order. Feel free to read both&#10; at the same time, just be aware that they'll come back&#10; sequentially.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1.2.2 $ $Date: 2006/06/20 18:56:07 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SensirionSht11C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="OscilloscopeAppC.Sensor.SensirionSht11ReaderP" loc="43(OscilloscopeAppC.Sensor.SensirionSht11ReaderP):/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11ReaderP.nc">
      <documentation loc="43(OscilloscopeAppC.Sensor.SensirionSht11ReaderP):/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11ReaderP.nc">
        <short>&#10; SensirionSht11ReaderP transforms the HAL-level SensirionSht11&#10; interface into a pair of SID Read interfaces, one for the&#10; temperature sensor and one for the humidity sensor.</short>
        <long>&#10; SensirionSht11ReaderP transforms the HAL-level SensirionSht11&#10; interface into a pair of SID Read interfaces, one for the&#10; temperature sensor and one for the humidity sensor. It acquires the&#10; underlying resource before executing each read, enabling&#10; arbitrated access.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1.2.2 $ $Date: 2006/06/20 18:56:05 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SensirionSht11ReaderP"/>
      </instance>
      <module/>
    </component>
    <component qname="HalSensirionSht11C" loc="43:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HalSensirionSht11C.nc">
      <documentation loc="43:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HalSensirionSht11C.nc">
        <short>&#10; HalSensirionSht11C is an advanced access component for the&#10; Sensirion SHT11 model humidity and temperature sensor, available on&#10; the telosb platform.</short>
        <long>&#10; HalSensirionSht11C is an advanced access component for the&#10; Sensirion SHT11 model humidity and temperature sensor, available on&#10; the telosb platform. This component provides the SensirionSht11&#10; interface, which offers full control over the device. Please&#10; acquire the Resource before using it.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1.2.3 $ $Date: 2006/08/15 11:59:09 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HalSensirionSht11C.SensirionSht11LogicP" loc="53(HalSensirionSht11C.SensirionSht11LogicP):/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11LogicP.nc">
      <documentation loc="53(HalSensirionSht11C.SensirionSht11LogicP):/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11LogicP.nc">
        <short>&#10; SensirionSht11LogicP contains the actual driver logic needed to&#10; read from the Sensirion SHT11 temperature/humidity sensor.</short>
        <long>&#10; SensirionSht11LogicP contains the actual driver logic needed to&#10; read from the Sensirion SHT11 temperature/humidity sensor. It&#10; depends on 2 underlying GeneralIO interfaces, one for the data pin&#10; and one for the clock pin, and one underlying GpioInterrupt.  It&#10; provides the HAL-level SensirionSht11 interface. It's generic, so&#10; you can instantiate it multiple times if you have more than one&#10; Sensirion SHT11 attached to a node. &#10; &#10; &#60;p>&#10; This code assumes that the MCU clock is less than 10 MHz.  If you&#10; ever run this on a faster MCU, you'll need to insert a lot of&#10; waits to keep the Sensirion happy.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1.2.3 $ $Date: 2006/06/20 18:56:05 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SensirionSht11LogicP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11C" loc="43:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11C.nc">
      <documentation loc="43:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11C.nc">
        <short>&#10; HplSensirionSht11C is a low-level component, intended to provide&#10; the physical resources used by the Sensirion SHT11 sensor on the&#10; telosb platform so that the chip driver can make use of them.</short>
        <long>&#10; HplSensirionSht11C is a low-level component, intended to provide&#10; the physical resources used by the Sensirion SHT11 sensor on the&#10; telosb platform so that the chip driver can make use of them. You&#10; really shouldn't be wiring to this, unless you're writing a new&#10; Sensirion SHT11 driver.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1.2.3 $ $Date: 2006/08/15 11:59:09 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplSensirionSht11P" loc="42:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11P.nc">
      <documentation loc="42:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11P.nc">
        <short>&#10; HplSensirionSht11P is a low-level component that controls power for&#10; the Sensirion SHT11 sensor on the telosb platform.&#10;&#10;</short>
        <long>&#10; HplSensirionSht11P is a low-level component that controls power for&#10; the Sensirion SHT11 sensor on the telosb platform.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1.2.3 $ $Date: 2006/06/20 18:56:07 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.TimerMilliC" loc="36(HplSensirionSht11C.TimerMilliC):/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
      <documentation loc="36(HplSensirionSht11C.TimerMilliC):/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128InterruptC" loc="32:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
        <short>&#10; Component providing access to all external interrupt pins on ATmega128.&#10;</short>
        <long>&#10; Component providing access to all external interrupt pins on ATmega128.&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128InterruptSigP" loc="32:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10; Exposes just the interrupt vector routine for &#10; easy linking to generic components.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin0" loc="30(HplAtm128InterruptC.IntPin0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="30(HplAtm128InterruptC.IntPin0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10;</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:106">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin1" loc="30(HplAtm128InterruptC.IntPin1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="30(HplAtm128InterruptC.IntPin1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10;</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:106">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin2" loc="30(HplAtm128InterruptC.IntPin2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="30(HplAtm128InterruptC.IntPin2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10;</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:106">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin3" loc="30(HplAtm128InterruptC.IntPin3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="30(HplAtm128InterruptC.IntPin3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10;</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:106">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin4" loc="30(HplAtm128InterruptC.IntPin4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="30(HplAtm128InterruptC.IntPin4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10;</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:90">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin5" loc="30(HplAtm128InterruptC.IntPin5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="30(HplAtm128InterruptC.IntPin5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10;</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:90">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin6" loc="30(HplAtm128InterruptC.IntPin6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="30(HplAtm128InterruptC.IntPin6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10;</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:90">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin7" loc="30(HplAtm128InterruptC.IntPin7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="30(HplAtm128InterruptC.IntPin7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10;</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:90">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.InterruptDATAC" loc="6(HplSensirionSht11C.InterruptDATAC):/opt/tinyos-2.x/tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <documentation loc="6(HplSensirionSht11C.InterruptDATAC):/opt/tinyos-2.x/tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128GpioInterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.Arbiter" loc="79(HplSensirionSht11C.Arbiter):/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <documentation loc="79(HplSensirionSht11C.Arbiter):/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108. </short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Sht11.Resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplSensirionSht11C.Arbiter.Queue" loc="32(HplSensirionSht11C.Arbiter.Queue):/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.Arbiter.Arbiter" loc="51(HplSensirionSht11C.Arbiter.Arbiter):/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <documentation loc="51(HplSensirionSht11C.Arbiter.Arbiter):/opt/tinyos-2.x/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceController interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108. </short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceController interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceController&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.SplitControlPowerManagerC" loc="57(HplSensirionSht11C.SplitControlPowerManagerC):/opt/tinyos-2.x/tos/lib/power/SplitControlPowerManagerC.nc">
      <documentation loc="57(HplSensirionSht11C.SplitControlPowerManagerC):/opt/tinyos-2.x/tos/lib/power/SplitControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices. </short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.  Non-virtualized devices are shared&#10; using a parameterized Resource interface, and are powered down according&#10; to some policy whenever there are no more pending requests to that Resource.&#10; The policy implemented by this component is to delay the power down of a&#10; device by some contant factor.  Such a policy is useful whenever a device&#10; has a long wake-up latency.  The cost of waiting for the device to power&#10; up can be avoided if the device is requested again before some predetermined&#10; amount of time.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>SplitControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>AsyncStdControl&#60;/code> or&#10; &#60;code>StdControl&#60;/code> interfaces, please use either the&#10; &#60;code>AsyncStdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SplitControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager" loc="48(HplSensirionSht11C.SplitControlPowerManagerC.PowerManager):/opt/tinyos-2.x/tos/lib/power/PowerManagerP.nc">
      <documentation loc="48(HplSensirionSht11C.SplitControlPowerManagerC.PowerManager):/opt/tinyos-2.x/tos/lib/power/PowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10;</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="HalSensirionSht11C.TimerMilliC" loc="36(HalSensirionSht11C.TimerMilliC):/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
      <documentation loc="36(HalSensirionSht11C.TimerMilliC):/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC" loc="33:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="34(SerialActiveMessageC.AM):/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="34(SerialActiveMessageC.AM):/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="36:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="36:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="60:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="37(SerialDispatcherC.SerialDispatcherP):/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="37(SerialDispatcherC.SerialDispatcherP):/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="35:/opt/tinyos-2.x/tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="35:/opt/tinyos-2.x/tos/lib/serial/HdlcTranslateC.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="38:/opt/tinyos-2.x/tos/platforms/mica/PlatformSerialC.nc">
      <documentation loc="38:/opt/tinyos-2.x/tos/platforms/mica/PlatformSerialC.nc">
        <short>&#10;</short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1.2.8 $ $Date: 2006/10/30 18:40:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C" loc="38:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart0C.nc">
      <documentation loc="38:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart0C.nc">
        <short>&#10;</short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1.2.3 $ $Date: 2006/10/30 18:40:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C.UartP" loc="40(Atm128Uart0C.UartP):/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <documentation loc="40(Atm128Uart0C.UartP):/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10;</short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1.2.3 $ $Date: 2006/10/30 18:40:45 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128UartC" loc="35:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
      <documentation loc="35:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
        <short>&#10; HPL for the Atmega 128 serial ports.&#10;&#10;</short>
        <long>&#10; HPL for the Atmega 128 serial ports.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128UartP" loc="69:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartP.nc">
      <documentation loc="69:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartP.nc">
        <short> &#10; Private component of the Atmega128 serial port HPL.&#10;&#10;</short>
        <long> &#10; Private component of the Atmega128 serial port HPL.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CounterMicro32C" loc="22:/opt/tinyos-2.x/tos/platforms/mica/CounterMicro32C.nc">
      <documentation loc="22:/opt/tinyos-2.x/tos/platforms/mica/CounterMicro32C.nc">
        <short>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterThree16C" loc="22:/opt/tinyos-2.x/tos/platforms/mica/CounterThree16C.nc">
      <documentation loc="22:/opt/tinyos-2.x/tos/platforms/mica/CounterThree16C.nc">
        <short>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3C" loc="32:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
        <short>&#10; HPL interface to Atmega128 timer 2.&#10;&#10;</short>
        <long>&#10; HPL interface to Atmega128 timer 2.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3P" loc="33:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
        <short>&#10; Internal componentr of the HPL interface to Atmega128 timer 3.&#10;&#10;</short>
        <long>&#10; Internal componentr of the HPL interface to Atmega128 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitThreeP.InitThree" loc="35(InitThreeP.InitThree):/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="35(InitThreeP.InitThree):/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterThree16C.NCounter" loc="33(CounterThree16C.NCounter):/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="33(CounterThree16C.NCounter):/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10;</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120e48"/>
            <typename><typedef-ref name="TThree" ref="0x7f081ca0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMicro32C.Transform32" loc="43(CounterMicro32C.Transform32):/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <documentation loc="43(CounterMicro32C.Transform32):/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10;</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120e48"/>
            <typename><typedef-ref name="TMicro" ref="0x7f112010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120e48"/>
            <typename><typedef-ref name="TThree" ref="0x7f081ca0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="counter_three_overflow_t" ref="0x7f072078"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="35:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="35:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="31:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="31:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10;</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7ec74c20" loc="31:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7ec74db0" loc="31:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7ec70010" loc="31:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="32:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="">
      <documentation loc="32:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7ec51218" loc="32:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7ec513b8" loc="33:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7ec51558" loc="34:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7ec516f0" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="33:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="">
      <documentation loc="33:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7eb80218" loc="33:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7eb803b8" loc="34:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7eb80558" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7eb806f0" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="36:/opt/tinyos-2.x/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="36:/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128TimerInitC" loc="35:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128TimerInitC.nc" abstract="">
      <documentation loc="35:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7e952410" loc="35:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7e952410"/></type-var>
        </typedef>
        <constant name="prescaler" ref="0x7e9525a0" loc="35:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmC" loc="42:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmC.nc" abstract="">
      <documentation loc="42:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10;</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7e937980" loc="42:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7e937980"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x7e937c40" loc="43:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7e937c40"/></type-var>
        </typedef>
        <constant name="mindt" ref="0x7e937dd0" loc="44:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128CounterC" loc="33:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128CounterC.nc" abstract="">
      <documentation loc="33:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10;</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7e903010" loc="33:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7e903010"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x7e9032d0" loc="34:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7e9032d0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmCounterC" loc="53:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmCounterC.nc" abstract="">
      <documentation loc="53:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmCounterC.nc">
        <short>&#10; TransformAlarmCounterC decreases precision and/or widens an Alarm/Counter&#10; pair.</short>
        <long>&#10; TransformAlarmCounterC decreases precision and/or widens an Alarm/Counter&#10; pair. This component has a reduced interrupt overhead compared to using&#10; TransformAlarmC and TransformCounterC separately. However, it is not as &#10; useful for hardware timers with multiple compare registers.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   interfaces.&#10; @param to_size_type The type for the width of the transformed interfaces.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   interfaces.&#10; @param from_size_type The type for the width of the original interfaces.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7e8e3520" loc="54:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmCounterC.nc">
          <component-ref qname="TransformAlarmCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7e8e3520"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7e8e37e0" loc="55:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmCounterC.nc">
          <component-ref qname="TransformAlarmCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7e8e37e0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7e8e39a8" loc="56:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmCounterC.nc">
          <component-ref qname="TransformAlarmCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7e8e39a8"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7e8e3c68" loc="57:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmCounterC.nc">
          <component-ref qname="TransformAlarmCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7e8e3c68"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7e8e3e08" loc="58:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmCounterC.nc">
          <component-ref qname="TransformAlarmCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7e8e2100" loc="59:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmCounterC.nc">
          <component-ref qname="TransformAlarmCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7e8e2100"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="35:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc" abstract="">
      <documentation loc="35:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10;</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7e8884f0" loc="35:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7e8884f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="35:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc" abstract="">
      <documentation loc="35:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10;</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7e862d20" loc="35:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7e862d20"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7e862ea8" loc="35:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="35:/opt/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc" abstract="">
      <documentation loc="35:/opt/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10;</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7e811c68" loc="35:/opt/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7e811c68"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="SensirionSht11C" loc="45:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11C.nc" abstract="">
      <documentation loc="45:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11C.nc">
        <short>&#10; SensirionSht11C is a top-level access component for the Sensirion&#10; SHT11 model humidity and temperature sensor, available on the&#10; telosb platform.</short>
        <long>&#10; SensirionSht11C is a top-level access component for the Sensirion&#10; SHT11 model humidity and temperature sensor, available on the&#10; telosb platform. Because this component represents one physical&#10; device, simultaneous calls to read temperature and humidity will be&#10; arbitrated and executed in sequential order. Feel free to read both&#10; at the same time, just be aware that they'll come back&#10; sequentially.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1.2.2 $ $Date: 2006/06/20 18:56:07 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="SensirionSht11ReaderP" loc="43:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11ReaderP.nc" abstract="">
      <documentation loc="43:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11ReaderP.nc">
        <short>&#10; SensirionSht11ReaderP transforms the HAL-level SensirionSht11&#10; interface into a pair of SID Read interfaces, one for the&#10; temperature sensor and one for the humidity sensor.</short>
        <long>&#10; SensirionSht11ReaderP transforms the HAL-level SensirionSht11&#10; interface into a pair of SID Read interfaces, one for the&#10; temperature sensor and one for the humidity sensor. It acquires the&#10; underlying resource before executing each read, enabling&#10; arbitrated access.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1.2.2 $ $Date: 2006/06/20 18:56:05 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SensirionSht11LogicP" loc="53:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11LogicP.nc" abstract="">
      <documentation loc="53:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11LogicP.nc">
        <short>&#10; SensirionSht11LogicP contains the actual driver logic needed to&#10; read from the Sensirion SHT11 temperature/humidity sensor.</short>
        <long>&#10; SensirionSht11LogicP contains the actual driver logic needed to&#10; read from the Sensirion SHT11 temperature/humidity sensor. It&#10; depends on 2 underlying GeneralIO interfaces, one for the data pin&#10; and one for the clock pin, and one underlying GpioInterrupt.  It&#10; provides the HAL-level SensirionSht11 interface. It's generic, so&#10; you can instantiate it multiple times if you have more than one&#10; Sensirion SHT11 attached to a node. &#10; &#10; &#60;p>&#10; This code assumes that the MCU clock is less than 10 MHz.  If you&#10; ever run this on a faster MCU, you'll need to insert a lot of&#10; waits to keep the Sensirion happy.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1.2.3 $ $Date: 2006/06/20 18:56:05 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128InterruptPinP" loc="30:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc" abstract="">
      <documentation loc="30:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10;</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="ctrl_addr" ref="0x7e6d5010" loc="30:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
          <component-ref qname="HplAtm128InterruptPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
        <constant name="edge0bit" ref="0x7e6d51b0" loc="31:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
          <component-ref qname="HplAtm128InterruptPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
        <constant name="edge1bit" ref="0x7e6d5350" loc="32:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
          <component-ref qname="HplAtm128InterruptPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7e6d54e8" loc="33:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
          <component-ref qname="HplAtm128InterruptPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128GpioInterruptC" loc="6:/opt/tinyos-2.x/tos/chips/atm128/pins/Atm128GpioInterruptC.nc" abstract="">
      <documentation loc="6:/opt/tinyos-2.x/tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="79:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="79:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108. </short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7e698ba8" loc="79:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="32:/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc" abstract="">
      <parameters>
        <constant name="size" ref="0x7e681f10" loc="32:/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="51:/opt/tinyos-2.x/tos/system/ArbiterP.nc" abstract="">
      <documentation loc="51:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceController interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108. </short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceController interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceController&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="controller_id" ref="0x7e668db8" loc="51:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SplitControlPowerManagerC" loc="57:/opt/tinyos-2.x/tos/lib/power/SplitControlPowerManagerC.nc" abstract="">
      <documentation loc="57:/opt/tinyos-2.x/tos/lib/power/SplitControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices. </short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.  Non-virtualized devices are shared&#10; using a parameterized Resource interface, and are powered down according&#10; to some policy whenever there are no more pending requests to that Resource.&#10; The policy implemented by this component is to delay the power down of a&#10; device by some contant factor.  Such a policy is useful whenever a device&#10; has a long wake-up latency.  The cost of waiting for the device to power&#10; up can be avoided if the device is requested again before some predetermined&#10; amount of time.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>SplitControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>AsyncStdControl&#60;/code> or&#10; &#60;code>StdControl&#60;/code> interfaces, please use either the&#10; &#60;code>AsyncStdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="PowerManagerP" loc="48:/opt/tinyos-2.x/tos/lib/power/PowerManagerP.nc" abstract="">
      <documentation loc="48:/opt/tinyos-2.x/tos/lib/power/PowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10;</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="34:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="37:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="37:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128UartP" loc="40:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc" abstract="">
      <documentation loc="40:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10;</short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1.2.3 $ $Date: 2006/10/30 18:40:45 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="43:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc" abstract="">
      <documentation loc="43:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10;</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7e374440" loc="44:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7e374440"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7e374700" loc="45:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7e374700"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7e3748c8" loc="46:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7e3748c8"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7e374b88" loc="47:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7e374b88"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7e374d28" loc="48:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7e373010" loc="49:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7e373010"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="Boot" ref="0x7eed2188" loc="28:OscilloscopeC.nc">
      <component-ref qname="OscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7eed2188"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7eed2360"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7eec39d0" loc="29:OscilloscopeC.nc">
      <component-ref qname="OscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x7eec39d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7eec3ba8"/>
        <function-ref name="stopDone" scoped="" ref="0x7eec3c88"/>
        <function-ref name="start" scoped="" ref="0x7eec3d68"/>
        <function-ref name="stop" scoped="" ref="0x7eec3e48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7ee234a0" loc="30:OscilloscopeC.nc">
      <component-ref qname="OscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7ee234a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ee23678"/>
        <function-ref name="getPayload" scoped="" ref="0x7ee23758"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ee23838"/>
        <function-ref name="cancel" scoped="" ref="0x7ee23918"/>
        <function-ref name="sendDone" scoped="" ref="0x7ee239f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x7ee129d0" loc="31:OscilloscopeC.nc">
      <component-ref qname="OscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7ee129d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x7ee12ba8"/>
        <function-ref name="receive" scoped="" ref="0x7ee12c88"/>
        <function-ref name="getPayload" scoped="" ref="0x7ee12d68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7edc2e78" loc="35:OscilloscopeC.nc">
      <component-ref qname="OscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7edc2e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7edd3070"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7edd3150"/>
        <function-ref name="led1On" scoped="" ref="0x7edd3230"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7edd3310"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7edd33f0"/>
        <function-ref name="get" scoped="" ref="0x7edd34d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7edd35b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7edd3930"/>
        <function-ref name="set" scoped="" ref="0x7edd3690"/>
        <function-ref name="led0On" scoped="" ref="0x7edd3770"/>
        <function-ref name="led2On" scoped="" ref="0x7edd3850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read_Temp" ref="0x7edf0010" loc="34:OscilloscopeC.nc">
      <component-ref qname="OscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read_Temp" scoped="" ref="0x7edf0010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7edf0638"/>
        <function-ref name="readDone" scoped="" ref="0x7edf0818"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read_Humidity" ref="0x7ede13b0" loc="33:OscilloscopeC.nc">
      <component-ref qname="OscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read_Humidity" scoped="" ref="0x7ede13b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ede19d8"/>
        <function-ref name="readDone" scoped="" ref="0x7ede1bb8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7edf3a48" loc="32:OscilloscopeC.nc">
      <component-ref qname="OscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7edf3a48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7edf2368"/>
        <function-ref name="fired" scoped="" ref="0x7ee11768"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ee11d08"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ee11b28"/>
        <function-ref name="getdt" scoped="" ref="0x7edf2728"/>
        <function-ref name="gett0" scoped="" ref="0x7edf2548"/>
        <function-ref name="isRunning" scoped="" ref="0x7ee11948"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ee11088"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7edf2048"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ee11308"/>
        <function-ref name="stop" scoped="" ref="0x7ee11588"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7ed60080" loc="47:/opt/tinyos-2.x/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7ed60080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ed60258"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7ed628c8" loc="46:/opt/tinyos-2.x/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7ed628c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7ed62aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7ed41010" loc="43:/opt/tinyos-2.x/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7ed41010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ed411e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ed50d60" loc="37:/opt/tinyos-2.x/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7ed50d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ed44010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7ed338f0" loc="41:/opt/tinyos-2.x/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7ed338f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7ed33ac8"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7ed33ba8"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7ed33c88"/>
        <function-ref name="actualMicro" scoped="" ref="0x7ed33d68"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7ed33e48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7ed24090" loc="36:/opt/tinyos-2.x/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x7ed24090"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ed24268"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ed30d10" loc="35:/opt/tinyos-2.x/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7ed30d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ed30ee8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x7ed24400" loc="37:/opt/tinyos-2.x/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x7ed24400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ed245d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7ed31da0" loc="18:/opt/tinyos-2.x/tos/platforms/zigbex/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7ed31da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ed13010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7ed31a38" loc="17:/opt/tinyos-2.x/tos/platforms/zigbex/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7ed31a38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ed31c10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7ed02280" loc="22:/opt/tinyos-2.x/tos/platforms/zigbex/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7ed02280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ed02458"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x7ecf48e0" loc="21:/opt/tinyos-2.x/tos/platforms/zigbex/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x7ecf48e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecf4ab8"/>
        <function-ref name="isInput" scoped="" ref="0x7ecf4b98"/>
        <function-ref name="toggle" scoped="" ref="0x7ecf4c78"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecf4d58"/>
        <function-ref name="get" scoped="" ref="0x7ecf4e38"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecf4f18"/>
        <function-ref name="set" scoped="" ref="0x7ed02010"/>
        <function-ref name="clr" scoped="" ref="0x7ed020f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7ed04010" loc="20:/opt/tinyos-2.x/tos/platforms/zigbex/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7ed04010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ed041e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x7ec84e78" loc="91:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x7ec84e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec83308"/>
        <function-ref name="isInput" scoped="" ref="0x7ec833e8"/>
        <function-ref name="toggle" scoped="" ref="0x7ec834c8"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec835a8"/>
        <function-ref name="get" scoped="" ref="0x7ec83688"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec83768"/>
        <function-ref name="set" scoped="" ref="0x7ec83848"/>
        <function-ref name="clr" scoped="" ref="0x7ec83928"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x7ecb4e98" loc="65:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x7ecb4e98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecb30c0"/>
        <function-ref name="isInput" scoped="" ref="0x7ecb31a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ecb3280"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecb3360"/>
        <function-ref name="get" scoped="" ref="0x7ecb3440"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecb3520"/>
        <function-ref name="set" scoped="" ref="0x7ecb3600"/>
        <function-ref name="clr" scoped="" ref="0x7ecb36e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x7eca2068" loc="76:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x7eca2068"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eca2240"/>
        <function-ref name="isInput" scoped="" ref="0x7eca2320"/>
        <function-ref name="toggle" scoped="" ref="0x7eca2400"/>
        <function-ref name="isOutput" scoped="" ref="0x7eca24e0"/>
        <function-ref name="get" scoped="" ref="0x7eca25c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eca26a0"/>
        <function-ref name="set" scoped="" ref="0x7eca2780"/>
        <function-ref name="clr" scoped="" ref="0x7eca2860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x7ec93e78" loc="85:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x7ec93e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec91070"/>
        <function-ref name="isInput" scoped="" ref="0x7ec91150"/>
        <function-ref name="toggle" scoped="" ref="0x7ec91230"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec91310"/>
        <function-ref name="get" scoped="" ref="0x7ec913f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec914d0"/>
        <function-ref name="set" scoped="" ref="0x7ec915b0"/>
        <function-ref name="clr" scoped="" ref="0x7ec91690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x7ece1508" loc="43:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x7ece1508"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ece16e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ece17c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ece18a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ece1980"/>
        <function-ref name="get" scoped="" ref="0x7ece1a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ece1b40"/>
        <function-ref name="set" scoped="" ref="0x7ece1c20"/>
        <function-ref name="clr" scoped="" ref="0x7ece1d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x7ec94af8" loc="83:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x7ec94af8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec94cd0"/>
        <function-ref name="isInput" scoped="" ref="0x7ec94db0"/>
        <function-ref name="toggle" scoped="" ref="0x7ec94e90"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec93010"/>
        <function-ref name="get" scoped="" ref="0x7ec930f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec931d0"/>
        <function-ref name="set" scoped="" ref="0x7ec932b0"/>
        <function-ref name="clr" scoped="" ref="0x7ec93390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x7ecd4808" loc="46:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x7ecd4808"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecd49e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ecd4ac0"/>
        <function-ref name="toggle" scoped="" ref="0x7ecd4ba0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecd4c80"/>
        <function-ref name="get" scoped="" ref="0x7ecd4d60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecd4e40"/>
        <function-ref name="set" scoped="" ref="0x7ecd4f20"/>
        <function-ref name="clr" scoped="" ref="0x7ecd3018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x7ecc3980" loc="57:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x7ecc3980"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecc3b58"/>
        <function-ref name="isInput" scoped="" ref="0x7ecc3c38"/>
        <function-ref name="toggle" scoped="" ref="0x7ecc3d18"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecc3df8"/>
        <function-ref name="get" scoped="" ref="0x7ecc3ed8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecc2010"/>
        <function-ref name="set" scoped="" ref="0x7ecc20f0"/>
        <function-ref name="clr" scoped="" ref="0x7ecc21d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x7ecb2bd8" loc="68:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x7ecb2bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecb2db0"/>
        <function-ref name="isInput" scoped="" ref="0x7ecb2e90"/>
        <function-ref name="toggle" scoped="" ref="0x7ecb1010"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecb10f0"/>
        <function-ref name="get" scoped="" ref="0x7ecb11d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecb12b0"/>
        <function-ref name="set" scoped="" ref="0x7ecb1390"/>
        <function-ref name="clr" scoped="" ref="0x7ecb1470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x7eca1d98" loc="79:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x7eca1d98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eca0010"/>
        <function-ref name="isInput" scoped="" ref="0x7eca00f0"/>
        <function-ref name="toggle" scoped="" ref="0x7eca01d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7eca02b0"/>
        <function-ref name="get" scoped="" ref="0x7eca0390"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eca0470"/>
        <function-ref name="set" scoped="" ref="0x7eca0550"/>
        <function-ref name="clr" scoped="" ref="0x7eca0630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x7ece4428" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x7ece4428"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ece4600"/>
        <function-ref name="isInput" scoped="" ref="0x7ece46e0"/>
        <function-ref name="toggle" scoped="" ref="0x7ece47c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ece48a0"/>
        <function-ref name="get" scoped="" ref="0x7ece4980"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ece4a60"/>
        <function-ref name="set" scoped="" ref="0x7ece4b40"/>
        <function-ref name="clr" scoped="" ref="0x7ece4c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x7ecd2508" loc="49:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x7ecd2508"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecd26e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ecd27c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ecd28a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecd2980"/>
        <function-ref name="get" scoped="" ref="0x7ecd2a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecd2b40"/>
        <function-ref name="set" scoped="" ref="0x7ecd2c20"/>
        <function-ref name="clr" scoped="" ref="0x7ecd2d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x7ecc16c8" loc="60:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x7ecc16c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecc18a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ecc1980"/>
        <function-ref name="toggle" scoped="" ref="0x7ecc1a60"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecc1b40"/>
        <function-ref name="get" scoped="" ref="0x7ecc1c20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecc1d00"/>
        <function-ref name="set" scoped="" ref="0x7ecc1de0"/>
        <function-ref name="clr" scoped="" ref="0x7ecc1ec0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x7ecb0980" loc="71:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x7ecb0980"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecb0b58"/>
        <function-ref name="isInput" scoped="" ref="0x7ecb0c38"/>
        <function-ref name="toggle" scoped="" ref="0x7ecb0d18"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecb0df8"/>
        <function-ref name="get" scoped="" ref="0x7ecb0ed8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eca4010"/>
        <function-ref name="set" scoped="" ref="0x7eca40f0"/>
        <function-ref name="clr" scoped="" ref="0x7eca41d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x7ec90b00" loc="88:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x7ec90b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec90cd8"/>
        <function-ref name="isInput" scoped="" ref="0x7ec90db8"/>
        <function-ref name="toggle" scoped="" ref="0x7ec90e98"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec84010"/>
        <function-ref name="get" scoped="" ref="0x7ec840f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec841d0"/>
        <function-ref name="set" scoped="" ref="0x7ec842b0"/>
        <function-ref name="clr" scoped="" ref="0x7ec84390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x7ec82d98" loc="94:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x7ec82d98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec81010"/>
        <function-ref name="isInput" scoped="" ref="0x7ec810f0"/>
        <function-ref name="toggle" scoped="" ref="0x7ec811d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec812b0"/>
        <function-ref name="get" scoped="" ref="0x7ec81390"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec81470"/>
        <function-ref name="set" scoped="" ref="0x7ec81550"/>
        <function-ref name="clr" scoped="" ref="0x7ec81630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x7eca4cb8" loc="74:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x7eca4cb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eca4e90"/>
        <function-ref name="isInput" scoped="" ref="0x7eca3010"/>
        <function-ref name="toggle" scoped="" ref="0x7eca30f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7eca31d0"/>
        <function-ref name="get" scoped="" ref="0x7eca32b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eca3390"/>
        <function-ref name="set" scoped="" ref="0x7eca3470"/>
        <function-ref name="clr" scoped="" ref="0x7eca3550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x7ece2188" loc="41:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x7ece2188"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ece2360"/>
        <function-ref name="isInput" scoped="" ref="0x7ece2440"/>
        <function-ref name="toggle" scoped="" ref="0x7ece2520"/>
        <function-ref name="isOutput" scoped="" ref="0x7ece2600"/>
        <function-ref name="get" scoped="" ref="0x7ece26e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ece27c0"/>
        <function-ref name="set" scoped="" ref="0x7ece28a0"/>
        <function-ref name="clr" scoped="" ref="0x7ece2980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x7ecd0268" loc="52:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x7ecd0268"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecd0440"/>
        <function-ref name="isInput" scoped="" ref="0x7ecd0520"/>
        <function-ref name="toggle" scoped="" ref="0x7ecd0600"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecd06e0"/>
        <function-ref name="get" scoped="" ref="0x7ecd07c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecd08a0"/>
        <function-ref name="set" scoped="" ref="0x7ecd0980"/>
        <function-ref name="clr" scoped="" ref="0x7ecd0a60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x7ec83aa0" loc="92:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x7ec83aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec83c78"/>
        <function-ref name="isInput" scoped="" ref="0x7ec83d58"/>
        <function-ref name="toggle" scoped="" ref="0x7ec83e38"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec83f18"/>
        <function-ref name="get" scoped="" ref="0x7ec82010"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec820f0"/>
        <function-ref name="set" scoped="" ref="0x7ec821d0"/>
        <function-ref name="clr" scoped="" ref="0x7ec822b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x7ecc45e8" loc="55:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x7ecc45e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecc47c0"/>
        <function-ref name="isInput" scoped="" ref="0x7ecc48a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ecc4980"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecc4a60"/>
        <function-ref name="get" scoped="" ref="0x7ecc4b40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecc4c20"/>
        <function-ref name="set" scoped="" ref="0x7ecc4d00"/>
        <function-ref name="clr" scoped="" ref="0x7ecc4de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x7ecb3858" loc="66:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x7ecb3858"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecb3a30"/>
        <function-ref name="isInput" scoped="" ref="0x7ecb3b10"/>
        <function-ref name="toggle" scoped="" ref="0x7ecb3bf0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecb3cd0"/>
        <function-ref name="get" scoped="" ref="0x7ecb3db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecb3e90"/>
        <function-ref name="set" scoped="" ref="0x7ecb2010"/>
        <function-ref name="clr" scoped="" ref="0x7ecb20f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x7eca29d8" loc="77:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x7eca29d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eca2bb0"/>
        <function-ref name="isInput" scoped="" ref="0x7eca2c90"/>
        <function-ref name="toggle" scoped="" ref="0x7eca2d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7eca2e50"/>
        <function-ref name="get" scoped="" ref="0x7eca1010"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eca10f0"/>
        <function-ref name="set" scoped="" ref="0x7eca11d0"/>
        <function-ref name="clr" scoped="" ref="0x7eca12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x7ec91808" loc="86:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x7ec91808"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec919e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ec91ac0"/>
        <function-ref name="toggle" scoped="" ref="0x7ec91ba0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec91c80"/>
        <function-ref name="get" scoped="" ref="0x7ec91d60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec91e40"/>
        <function-ref name="set" scoped="" ref="0x7ec91f20"/>
        <function-ref name="clr" scoped="" ref="0x7ec90018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x7ece1e78" loc="44:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x7ece1e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecd4070"/>
        <function-ref name="isInput" scoped="" ref="0x7ecd4150"/>
        <function-ref name="toggle" scoped="" ref="0x7ecd4230"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecd4310"/>
        <function-ref name="get" scoped="" ref="0x7ecd43f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecd44d0"/>
        <function-ref name="set" scoped="" ref="0x7ecd45b0"/>
        <function-ref name="clr" scoped="" ref="0x7ecd4690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x7ecd3190" loc="47:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x7ecd3190"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecd3368"/>
        <function-ref name="isInput" scoped="" ref="0x7ecd3448"/>
        <function-ref name="toggle" scoped="" ref="0x7ecd3528"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecd3608"/>
        <function-ref name="get" scoped="" ref="0x7ecd36e8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecd37c8"/>
        <function-ref name="set" scoped="" ref="0x7ecd38a8"/>
        <function-ref name="clr" scoped="" ref="0x7ecd3988"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x7ecc2348" loc="58:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x7ecc2348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecc2520"/>
        <function-ref name="isInput" scoped="" ref="0x7ecc2600"/>
        <function-ref name="toggle" scoped="" ref="0x7ecc26e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecc27c0"/>
        <function-ref name="get" scoped="" ref="0x7ecc28a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecc2980"/>
        <function-ref name="set" scoped="" ref="0x7ecc2a60"/>
        <function-ref name="clr" scoped="" ref="0x7ecc2b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x7ecb15e8" loc="69:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x7ecb15e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecb17c0"/>
        <function-ref name="isInput" scoped="" ref="0x7ecb18a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ecb1980"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecb1a60"/>
        <function-ref name="get" scoped="" ref="0x7ecb1b40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecb1c20"/>
        <function-ref name="set" scoped="" ref="0x7ecb1d00"/>
        <function-ref name="clr" scoped="" ref="0x7ecb1de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x7eca07a8" loc="80:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x7eca07a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eca0980"/>
        <function-ref name="isInput" scoped="" ref="0x7eca0a60"/>
        <function-ref name="toggle" scoped="" ref="0x7eca0b40"/>
        <function-ref name="isOutput" scoped="" ref="0x7eca0c20"/>
        <function-ref name="get" scoped="" ref="0x7eca0d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eca0de0"/>
        <function-ref name="set" scoped="" ref="0x7eca0ec0"/>
        <function-ref name="clr" scoped="" ref="0x7ec94010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x7ece4d98" loc="39:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x7ece4d98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ece3010"/>
        <function-ref name="isInput" scoped="" ref="0x7ece30f0"/>
        <function-ref name="toggle" scoped="" ref="0x7ece31d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ece32b0"/>
        <function-ref name="get" scoped="" ref="0x7ece3390"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ece3470"/>
        <function-ref name="set" scoped="" ref="0x7ece3550"/>
        <function-ref name="clr" scoped="" ref="0x7ece3630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x7ecd2e78" loc="50:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x7ecd2e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecd10e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ecd11c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ecd12a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecd1380"/>
        <function-ref name="get" scoped="" ref="0x7ecd1460"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecd1540"/>
        <function-ref name="set" scoped="" ref="0x7ecd1620"/>
        <function-ref name="clr" scoped="" ref="0x7ecd1700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x7ecc0068" loc="61:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x7ecc0068"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecc0240"/>
        <function-ref name="isInput" scoped="" ref="0x7ecc0320"/>
        <function-ref name="toggle" scoped="" ref="0x7ecc0400"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecc04e0"/>
        <function-ref name="get" scoped="" ref="0x7ecc05c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecc06a0"/>
        <function-ref name="set" scoped="" ref="0x7ecc0780"/>
        <function-ref name="clr" scoped="" ref="0x7ecc0860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x7ec84508" loc="89:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x7ec84508"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec846e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ec847c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ec848a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec84980"/>
        <function-ref name="get" scoped="" ref="0x7ec84a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec84b40"/>
        <function-ref name="set" scoped="" ref="0x7ec84c20"/>
        <function-ref name="clr" scoped="" ref="0x7ec84d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x7ecb4428" loc="64:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x7ecb4428"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecb4700"/>
        <function-ref name="isInput" scoped="" ref="0x7ecb47e0"/>
        <function-ref name="toggle" scoped="" ref="0x7ecb48c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecb49a0"/>
        <function-ref name="get" scoped="" ref="0x7ecb4a80"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecb4b60"/>
        <function-ref name="set" scoped="" ref="0x7ecb4c40"/>
        <function-ref name="clr" scoped="" ref="0x7ecb4d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x7eca36c8" loc="75:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x7eca36c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eca38a0"/>
        <function-ref name="isInput" scoped="" ref="0x7eca3980"/>
        <function-ref name="toggle" scoped="" ref="0x7eca3a60"/>
        <function-ref name="isOutput" scoped="" ref="0x7eca3b40"/>
        <function-ref name="get" scoped="" ref="0x7eca3c20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eca3d00"/>
        <function-ref name="set" scoped="" ref="0x7eca3de0"/>
        <function-ref name="clr" scoped="" ref="0x7eca3ec0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x7ec93508" loc="84:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x7ec93508"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec936e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ec937c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ec938a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec93980"/>
        <function-ref name="get" scoped="" ref="0x7ec93a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec93b40"/>
        <function-ref name="set" scoped="" ref="0x7ec93c20"/>
        <function-ref name="clr" scoped="" ref="0x7ec93d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x7ec817a8" loc="95:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x7ec817a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec81980"/>
        <function-ref name="isInput" scoped="" ref="0x7ec81a60"/>
        <function-ref name="toggle" scoped="" ref="0x7ec81b40"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec81c20"/>
        <function-ref name="get" scoped="" ref="0x7ec81d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec81de0"/>
        <function-ref name="set" scoped="" ref="0x7ec81ec0"/>
        <function-ref name="clr" scoped="" ref="0x7ec80010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x7ece2af8" loc="42:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x7ece2af8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ece2cd0"/>
        <function-ref name="isInput" scoped="" ref="0x7ece2db0"/>
        <function-ref name="toggle" scoped="" ref="0x7ece2e90"/>
        <function-ref name="isOutput" scoped="" ref="0x7ece1010"/>
        <function-ref name="get" scoped="" ref="0x7ece10f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ece11d0"/>
        <function-ref name="set" scoped="" ref="0x7ece12b0"/>
        <function-ref name="clr" scoped="" ref="0x7ece1390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x7ecd0bd8" loc="53:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x7ecd0bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecd0db0"/>
        <function-ref name="isInput" scoped="" ref="0x7ecd0e90"/>
        <function-ref name="toggle" scoped="" ref="0x7ecc4010"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecc40f0"/>
        <function-ref name="get" scoped="" ref="0x7ecc41d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecc42b0"/>
        <function-ref name="set" scoped="" ref="0x7ecc4390"/>
        <function-ref name="clr" scoped="" ref="0x7ecc4470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x7ec94188" loc="82:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x7ec94188"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec94360"/>
        <function-ref name="isInput" scoped="" ref="0x7ec94440"/>
        <function-ref name="toggle" scoped="" ref="0x7ec94520"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec94600"/>
        <function-ref name="get" scoped="" ref="0x7ec946e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec947c0"/>
        <function-ref name="set" scoped="" ref="0x7ec948a0"/>
        <function-ref name="clr" scoped="" ref="0x7ec94980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x7ecc3010" loc="56:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x7ecc3010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecc31e8"/>
        <function-ref name="isInput" scoped="" ref="0x7ecc32c8"/>
        <function-ref name="toggle" scoped="" ref="0x7ecc33a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecc3488"/>
        <function-ref name="get" scoped="" ref="0x7ecc3568"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecc3648"/>
        <function-ref name="set" scoped="" ref="0x7ecc3728"/>
        <function-ref name="clr" scoped="" ref="0x7ecc3808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x7ecb2268" loc="67:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x7ecb2268"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecb2440"/>
        <function-ref name="isInput" scoped="" ref="0x7ecb2520"/>
        <function-ref name="toggle" scoped="" ref="0x7ecb2600"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecb26e0"/>
        <function-ref name="get" scoped="" ref="0x7ecb27c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecb28a0"/>
        <function-ref name="set" scoped="" ref="0x7ecb2980"/>
        <function-ref name="clr" scoped="" ref="0x7ecb2a60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x7eca1428" loc="78:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x7eca1428"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eca1600"/>
        <function-ref name="isInput" scoped="" ref="0x7eca16e0"/>
        <function-ref name="toggle" scoped="" ref="0x7eca17c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7eca18a0"/>
        <function-ref name="get" scoped="" ref="0x7eca1980"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eca1a60"/>
        <function-ref name="set" scoped="" ref="0x7eca1b40"/>
        <function-ref name="clr" scoped="" ref="0x7eca1c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x7ec90190" loc="87:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x7ec90190"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec90368"/>
        <function-ref name="isInput" scoped="" ref="0x7ec90448"/>
        <function-ref name="toggle" scoped="" ref="0x7ec90528"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec90608"/>
        <function-ref name="get" scoped="" ref="0x7ec906e8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec907c8"/>
        <function-ref name="set" scoped="" ref="0x7ec908a8"/>
        <function-ref name="clr" scoped="" ref="0x7ec90988"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x7ecf0a80" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x7ecf0a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecf0c58"/>
        <function-ref name="isInput" scoped="" ref="0x7ecf0d38"/>
        <function-ref name="toggle" scoped="" ref="0x7ecf0e18"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecf0ef8"/>
        <function-ref name="get" scoped="" ref="0x7ece4010"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ece40f0"/>
        <function-ref name="set" scoped="" ref="0x7ece41d0"/>
        <function-ref name="clr" scoped="" ref="0x7ece42b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x7ecd3b00" loc="48:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x7ecd3b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecd3cd8"/>
        <function-ref name="isInput" scoped="" ref="0x7ecd3db8"/>
        <function-ref name="toggle" scoped="" ref="0x7ecd3e98"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecd2010"/>
        <function-ref name="get" scoped="" ref="0x7ecd20f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecd21d0"/>
        <function-ref name="set" scoped="" ref="0x7ecd22b0"/>
        <function-ref name="clr" scoped="" ref="0x7ecd2390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x7ecc2cb8" loc="59:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x7ecc2cb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecc2e90"/>
        <function-ref name="isInput" scoped="" ref="0x7ecc1010"/>
        <function-ref name="toggle" scoped="" ref="0x7ecc10f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecc11d0"/>
        <function-ref name="get" scoped="" ref="0x7ecc12b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecc1390"/>
        <function-ref name="set" scoped="" ref="0x7ecc1470"/>
        <function-ref name="clr" scoped="" ref="0x7ecc1550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x7ecb0010" loc="70:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x7ecb0010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecb01e8"/>
        <function-ref name="isInput" scoped="" ref="0x7ecb02c8"/>
        <function-ref name="toggle" scoped="" ref="0x7ecb03a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecb0488"/>
        <function-ref name="get" scoped="" ref="0x7ecb0568"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecb0648"/>
        <function-ref name="set" scoped="" ref="0x7ecb0728"/>
        <function-ref name="clr" scoped="" ref="0x7ecb0808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x7ec82428" loc="93:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x7ec82428"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec82600"/>
        <function-ref name="isInput" scoped="" ref="0x7ec826e0"/>
        <function-ref name="toggle" scoped="" ref="0x7ec827c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec828a0"/>
        <function-ref name="get" scoped="" ref="0x7ec82980"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec82a60"/>
        <function-ref name="set" scoped="" ref="0x7ec82b40"/>
        <function-ref name="clr" scoped="" ref="0x7ec82c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x7eca4348" loc="73:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x7eca4348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eca4520"/>
        <function-ref name="isInput" scoped="" ref="0x7eca4600"/>
        <function-ref name="toggle" scoped="" ref="0x7eca46e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7eca47c0"/>
        <function-ref name="get" scoped="" ref="0x7eca48a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eca4980"/>
        <function-ref name="set" scoped="" ref="0x7eca4a60"/>
        <function-ref name="clr" scoped="" ref="0x7eca4b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x7ecc09d8" loc="62:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x7ecc09d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecc0bb0"/>
        <function-ref name="isInput" scoped="" ref="0x7ecc0c90"/>
        <function-ref name="toggle" scoped="" ref="0x7ecc0d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecc0e50"/>
        <function-ref name="get" scoped="" ref="0x7ecb4010"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecb40f0"/>
        <function-ref name="set" scoped="" ref="0x7ecb41d0"/>
        <function-ref name="clr" scoped="" ref="0x7ecb42b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x7ece37a8" loc="40:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x7ece37a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ece3980"/>
        <function-ref name="isInput" scoped="" ref="0x7ece3a60"/>
        <function-ref name="toggle" scoped="" ref="0x7ece3b40"/>
        <function-ref name="isOutput" scoped="" ref="0x7ece3c20"/>
        <function-ref name="get" scoped="" ref="0x7ece3d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ece3de0"/>
        <function-ref name="set" scoped="" ref="0x7ece3ec0"/>
        <function-ref name="clr" scoped="" ref="0x7ece2010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x7ecd1878" loc="51:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x7ecd1878"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ecd1a50"/>
        <function-ref name="isInput" scoped="" ref="0x7ecd1b30"/>
        <function-ref name="toggle" scoped="" ref="0x7ecd1c10"/>
        <function-ref name="isOutput" scoped="" ref="0x7ecd1cf0"/>
        <function-ref name="get" scoped="" ref="0x7ecd1dd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ecd1eb0"/>
        <function-ref name="set" scoped="" ref="0x7ecd0010"/>
        <function-ref name="clr" scoped="" ref="0x7ecd00f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7ec037f0" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7ec037f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec039c8"/>
        <function-ref name="isInput" scoped="" ref="0x7ec03aa8"/>
        <function-ref name="toggle" scoped="" ref="0x7ec03b88"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec03c68"/>
        <function-ref name="get" scoped="" ref="0x7ec03d48"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec03e28"/>
        <function-ref name="set" scoped="" ref="0x7ec03f08"/>
        <function-ref name="clr" scoped="" ref="0x7ec02010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7ec014f0" loc="40:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7ec014f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec016c8"/>
        <function-ref name="isInput" scoped="" ref="0x7ec017a8"/>
        <function-ref name="toggle" scoped="" ref="0x7ec01888"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec01968"/>
        <function-ref name="get" scoped="" ref="0x7ec01a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec01b28"/>
        <function-ref name="set" scoped="" ref="0x7ec01c08"/>
        <function-ref name="clr" scoped="" ref="0x7ec01ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7ec04518" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7ec04518"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec046f0"/>
        <function-ref name="isInput" scoped="" ref="0x7ec047d0"/>
        <function-ref name="toggle" scoped="" ref="0x7ec048b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec04990"/>
        <function-ref name="get" scoped="" ref="0x7ec04a70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec04b50"/>
        <function-ref name="set" scoped="" ref="0x7ec04c30"/>
        <function-ref name="clr" scoped="" ref="0x7ec04d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7ec02170" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7ec02170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec02348"/>
        <function-ref name="isInput" scoped="" ref="0x7ec02428"/>
        <function-ref name="toggle" scoped="" ref="0x7ec02508"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec025e8"/>
        <function-ref name="get" scoped="" ref="0x7ec026c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec027a8"/>
        <function-ref name="set" scoped="" ref="0x7ec02888"/>
        <function-ref name="clr" scoped="" ref="0x7ec02968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7ec01e48" loc="41:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7ec01e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec00050"/>
        <function-ref name="isInput" scoped="" ref="0x7ec00130"/>
        <function-ref name="toggle" scoped="" ref="0x7ec00210"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec002f0"/>
        <function-ref name="get" scoped="" ref="0x7ec003d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec004b0"/>
        <function-ref name="set" scoped="" ref="0x7ec00590"/>
        <function-ref name="clr" scoped="" ref="0x7ec00670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7ec04e70" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7ec04e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec03070"/>
        <function-ref name="isInput" scoped="" ref="0x7ec03150"/>
        <function-ref name="toggle" scoped="" ref="0x7ec03230"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec03310"/>
        <function-ref name="get" scoped="" ref="0x7ec033f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec034d0"/>
        <function-ref name="set" scoped="" ref="0x7ec035b0"/>
        <function-ref name="clr" scoped="" ref="0x7ec03690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7ec02ac8" loc="39:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7ec02ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec02ca0"/>
        <function-ref name="isInput" scoped="" ref="0x7ec02d80"/>
        <function-ref name="toggle" scoped="" ref="0x7ec02e60"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec01010"/>
        <function-ref name="get" scoped="" ref="0x7ec010f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec011d0"/>
        <function-ref name="set" scoped="" ref="0x7ec012b0"/>
        <function-ref name="clr" scoped="" ref="0x7ec01390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7ec007d0" loc="42:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7ec007d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ec009a8"/>
        <function-ref name="isInput" scoped="" ref="0x7ec00a88"/>
        <function-ref name="toggle" scoped="" ref="0x7ec00b68"/>
        <function-ref name="isOutput" scoped="" ref="0x7ec00c48"/>
        <function-ref name="get" scoped="" ref="0x7ec00d28"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ec00e08"/>
        <function-ref name="set" scoped="" ref="0x7ec00ee8"/>
        <function-ref name="clr" scoped="" ref="0x7ebf5010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e3338f0" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e3338f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e333ac8"/>
        <function-ref name="isInput" scoped="" ref="0x7e333ba8"/>
        <function-ref name="toggle" scoped="" ref="0x7e333c88"/>
        <function-ref name="isOutput" scoped="" ref="0x7e333d68"/>
        <function-ref name="get" scoped="" ref="0x7e333e48"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e333f28"/>
        <function-ref name="set" scoped="" ref="0x7e332018"/>
        <function-ref name="clr" scoped="" ref="0x7e3320f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e3312d0" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e3312d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e3314a8"/>
        <function-ref name="isInput" scoped="" ref="0x7e331588"/>
        <function-ref name="toggle" scoped="" ref="0x7e331668"/>
        <function-ref name="isOutput" scoped="" ref="0x7e331748"/>
        <function-ref name="get" scoped="" ref="0x7e331828"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e331908"/>
        <function-ref name="set" scoped="" ref="0x7e3319e8"/>
        <function-ref name="clr" scoped="" ref="0x7e331ac8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e330c90" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e330c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e330e68"/>
        <function-ref name="isInput" scoped="" ref="0x7e310010"/>
        <function-ref name="toggle" scoped="" ref="0x7e3100f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7e3101d0"/>
        <function-ref name="get" scoped="" ref="0x7e3102b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e310390"/>
        <function-ref name="set" scoped="" ref="0x7e310470"/>
        <function-ref name="clr" scoped="" ref="0x7e310550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e30f718" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e30f718"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e30f8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7e30f9d0"/>
        <function-ref name="toggle" scoped="" ref="0x7e30fab0"/>
        <function-ref name="isOutput" scoped="" ref="0x7e30fb90"/>
        <function-ref name="get" scoped="" ref="0x7e30fc70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e30fd50"/>
        <function-ref name="set" scoped="" ref="0x7e30fe30"/>
        <function-ref name="clr" scoped="" ref="0x7e30ff10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e30d0f8" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e30d0f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e30d2d0"/>
        <function-ref name="isInput" scoped="" ref="0x7e30d3b0"/>
        <function-ref name="toggle" scoped="" ref="0x7e30d490"/>
        <function-ref name="isOutput" scoped="" ref="0x7e30d570"/>
        <function-ref name="get" scoped="" ref="0x7e30d650"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e30d730"/>
        <function-ref name="set" scoped="" ref="0x7e30d810"/>
        <function-ref name="clr" scoped="" ref="0x7e30d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e30cac8" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e30cac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e30cca0"/>
        <function-ref name="isInput" scoped="" ref="0x7e30cd80"/>
        <function-ref name="toggle" scoped="" ref="0x7e30ce60"/>
        <function-ref name="isOutput" scoped="" ref="0x7e30b010"/>
        <function-ref name="get" scoped="" ref="0x7e30b0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e30b1d0"/>
        <function-ref name="set" scoped="" ref="0x7e30b2b0"/>
        <function-ref name="clr" scoped="" ref="0x7e30b390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e30a570" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e30a570"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e30a748"/>
        <function-ref name="isInput" scoped="" ref="0x7e30a828"/>
        <function-ref name="toggle" scoped="" ref="0x7e30a908"/>
        <function-ref name="isOutput" scoped="" ref="0x7e30a9e8"/>
        <function-ref name="get" scoped="" ref="0x7e30aac8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e30aba8"/>
        <function-ref name="set" scoped="" ref="0x7e30ac88"/>
        <function-ref name="clr" scoped="" ref="0x7e30ad68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e308010" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e308010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e3081e8"/>
        <function-ref name="isInput" scoped="" ref="0x7e3082c8"/>
        <function-ref name="toggle" scoped="" ref="0x7e3083a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7e308488"/>
        <function-ref name="get" scoped="" ref="0x7e308568"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e308648"/>
        <function-ref name="set" scoped="" ref="0x7e308728"/>
        <function-ref name="clr" scoped="" ref="0x7e308808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7ebf2f28" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7ebf2f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebf0110"/>
        <function-ref name="isInput" scoped="" ref="0x7ebf01f0"/>
        <function-ref name="toggle" scoped="" ref="0x7ebf02d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebf03b0"/>
        <function-ref name="get" scoped="" ref="0x7ebf0490"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebf0570"/>
        <function-ref name="set" scoped="" ref="0x7ebf0650"/>
        <function-ref name="clr" scoped="" ref="0x7ebf0730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7ebe5ba8" loc="40:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7ebe5ba8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebe5d80"/>
        <function-ref name="isInput" scoped="" ref="0x7ebe5e60"/>
        <function-ref name="toggle" scoped="" ref="0x7ebe4010"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebe40f0"/>
        <function-ref name="get" scoped="" ref="0x7ebe41d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebe42b0"/>
        <function-ref name="set" scoped="" ref="0x7ebe4390"/>
        <function-ref name="clr" scoped="" ref="0x7ebe4470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7ebf3bc0" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7ebf3bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebf3d98"/>
        <function-ref name="isInput" scoped="" ref="0x7ebf3e78"/>
        <function-ref name="toggle" scoped="" ref="0x7ebf2010"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebf20f0"/>
        <function-ref name="get" scoped="" ref="0x7ebf21d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebf22b0"/>
        <function-ref name="set" scoped="" ref="0x7ebf2390"/>
        <function-ref name="clr" scoped="" ref="0x7ebf2470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7ebf0890" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7ebf0890"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebf0a68"/>
        <function-ref name="isInput" scoped="" ref="0x7ebf0b48"/>
        <function-ref name="toggle" scoped="" ref="0x7ebf0c28"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebf0d08"/>
        <function-ref name="get" scoped="" ref="0x7ebf0de8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebf0ec8"/>
        <function-ref name="set" scoped="" ref="0x7ebe5010"/>
        <function-ref name="clr" scoped="" ref="0x7ebe50f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7ebe45d0" loc="41:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7ebe45d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebe47a8"/>
        <function-ref name="isInput" scoped="" ref="0x7ebe4888"/>
        <function-ref name="toggle" scoped="" ref="0x7ebe4968"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebe4a48"/>
        <function-ref name="get" scoped="" ref="0x7ebe4b28"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebe4c08"/>
        <function-ref name="set" scoped="" ref="0x7ebe4ce8"/>
        <function-ref name="clr" scoped="" ref="0x7ebe4dc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7ebf25d0" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7ebf25d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebf27a8"/>
        <function-ref name="isInput" scoped="" ref="0x7ebf2888"/>
        <function-ref name="toggle" scoped="" ref="0x7ebf2968"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebf2a48"/>
        <function-ref name="get" scoped="" ref="0x7ebf2b28"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebf2c08"/>
        <function-ref name="set" scoped="" ref="0x7ebf2ce8"/>
        <function-ref name="clr" scoped="" ref="0x7ebf2dc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7ebe5250" loc="39:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7ebe5250"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebe5428"/>
        <function-ref name="isInput" scoped="" ref="0x7ebe5508"/>
        <function-ref name="toggle" scoped="" ref="0x7ebe55e8"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebe56c8"/>
        <function-ref name="get" scoped="" ref="0x7ebe57a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebe5888"/>
        <function-ref name="set" scoped="" ref="0x7ebe5968"/>
        <function-ref name="clr" scoped="" ref="0x7ebe5a48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7ebe4f28" loc="42:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7ebe4f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebe3110"/>
        <function-ref name="isInput" scoped="" ref="0x7ebe31f0"/>
        <function-ref name="toggle" scoped="" ref="0x7ebe32d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebe33b0"/>
        <function-ref name="get" scoped="" ref="0x7ebe3490"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebe3570"/>
        <function-ref name="set" scoped="" ref="0x7ebe3650"/>
        <function-ref name="clr" scoped="" ref="0x7ebe3730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e2c4d08" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e2c4d08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e2c4ee0"/>
        <function-ref name="isInput" scoped="" ref="0x7e2c1010"/>
        <function-ref name="toggle" scoped="" ref="0x7e2c10f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7e2c11d0"/>
        <function-ref name="get" scoped="" ref="0x7e2c12b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e2c1390"/>
        <function-ref name="set" scoped="" ref="0x7e2c1470"/>
        <function-ref name="clr" scoped="" ref="0x7e2c1550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e2c0718" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e2c0718"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e2c08f0"/>
        <function-ref name="isInput" scoped="" ref="0x7e2c09d0"/>
        <function-ref name="toggle" scoped="" ref="0x7e2c0ab0"/>
        <function-ref name="isOutput" scoped="" ref="0x7e2c0b90"/>
        <function-ref name="get" scoped="" ref="0x7e2c0c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e2c0d50"/>
        <function-ref name="set" scoped="" ref="0x7e2c0e30"/>
        <function-ref name="clr" scoped="" ref="0x7e2c0f10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e2af0f8" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e2af0f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e2af2d0"/>
        <function-ref name="isInput" scoped="" ref="0x7e2af3b0"/>
        <function-ref name="toggle" scoped="" ref="0x7e2af490"/>
        <function-ref name="isOutput" scoped="" ref="0x7e2af570"/>
        <function-ref name="get" scoped="" ref="0x7e2af650"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e2af730"/>
        <function-ref name="set" scoped="" ref="0x7e2af810"/>
        <function-ref name="clr" scoped="" ref="0x7e2af8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e2aeac8" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e2aeac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e2aeca0"/>
        <function-ref name="isInput" scoped="" ref="0x7e2aed80"/>
        <function-ref name="toggle" scoped="" ref="0x7e2aee60"/>
        <function-ref name="isOutput" scoped="" ref="0x7e2ad010"/>
        <function-ref name="get" scoped="" ref="0x7e2ad0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e2ad1d0"/>
        <function-ref name="set" scoped="" ref="0x7e2ad2b0"/>
        <function-ref name="clr" scoped="" ref="0x7e2ad390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e2ac570" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e2ac570"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e2ac748"/>
        <function-ref name="isInput" scoped="" ref="0x7e2ac828"/>
        <function-ref name="toggle" scoped="" ref="0x7e2ac908"/>
        <function-ref name="isOutput" scoped="" ref="0x7e2ac9e8"/>
        <function-ref name="get" scoped="" ref="0x7e2acac8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e2acba8"/>
        <function-ref name="set" scoped="" ref="0x7e2acc88"/>
        <function-ref name="clr" scoped="" ref="0x7e2acd68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e2aa010" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e2aa010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e2aa1e8"/>
        <function-ref name="isInput" scoped="" ref="0x7e2aa2c8"/>
        <function-ref name="toggle" scoped="" ref="0x7e2aa3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7e2aa488"/>
        <function-ref name="get" scoped="" ref="0x7e2aa568"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e2aa648"/>
        <function-ref name="set" scoped="" ref="0x7e2aa728"/>
        <function-ref name="clr" scoped="" ref="0x7e2aa808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e2a99e8" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e2a99e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e2a9bc0"/>
        <function-ref name="isInput" scoped="" ref="0x7e2a9ca0"/>
        <function-ref name="toggle" scoped="" ref="0x7e2a9d80"/>
        <function-ref name="isOutput" scoped="" ref="0x7e2a9e60"/>
        <function-ref name="get" scoped="" ref="0x7e2a8010"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e2a80f0"/>
        <function-ref name="set" scoped="" ref="0x7e2a81d0"/>
        <function-ref name="clr" scoped="" ref="0x7e2a82b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e2a7538" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e2a7538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e2a7710"/>
        <function-ref name="isInput" scoped="" ref="0x7e2a77f0"/>
        <function-ref name="toggle" scoped="" ref="0x7e2a78d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7e2a79b0"/>
        <function-ref name="get" scoped="" ref="0x7e2a7a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e2a7b70"/>
        <function-ref name="set" scoped="" ref="0x7e2a7c50"/>
        <function-ref name="clr" scoped="" ref="0x7e2a7d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7ebd55d0" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7ebd55d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebd57a8"/>
        <function-ref name="isInput" scoped="" ref="0x7ebd5888"/>
        <function-ref name="toggle" scoped="" ref="0x7ebd5968"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebd5a48"/>
        <function-ref name="get" scoped="" ref="0x7ebd5b28"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebd5c08"/>
        <function-ref name="set" scoped="" ref="0x7ebd5ce8"/>
        <function-ref name="clr" scoped="" ref="0x7ebd5dc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7ebd2250" loc="40:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7ebd2250"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebd2428"/>
        <function-ref name="isInput" scoped="" ref="0x7ebd2508"/>
        <function-ref name="toggle" scoped="" ref="0x7ebd25e8"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebd26c8"/>
        <function-ref name="get" scoped="" ref="0x7ebd27a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebd2888"/>
        <function-ref name="set" scoped="" ref="0x7ebd2968"/>
        <function-ref name="clr" scoped="" ref="0x7ebd2a48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7ebe02a0" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7ebe02a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebe0478"/>
        <function-ref name="isInput" scoped="" ref="0x7ebe0558"/>
        <function-ref name="toggle" scoped="" ref="0x7ebe0638"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebe0718"/>
        <function-ref name="get" scoped="" ref="0x7ebe07f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebe08d8"/>
        <function-ref name="set" scoped="" ref="0x7ebe09b8"/>
        <function-ref name="clr" scoped="" ref="0x7ebe0a98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7ebd5f28" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7ebd5f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebd4110"/>
        <function-ref name="isInput" scoped="" ref="0x7ebd41f0"/>
        <function-ref name="toggle" scoped="" ref="0x7ebd42d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebd43b0"/>
        <function-ref name="get" scoped="" ref="0x7ebd4490"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebd4570"/>
        <function-ref name="set" scoped="" ref="0x7ebd4650"/>
        <function-ref name="clr" scoped="" ref="0x7ebd4730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7ebd2ba8" loc="41:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7ebd2ba8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebd2d80"/>
        <function-ref name="isInput" scoped="" ref="0x7ebd2e60"/>
        <function-ref name="toggle" scoped="" ref="0x7ebd1010"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebd10f0"/>
        <function-ref name="get" scoped="" ref="0x7ebd11d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebd12b0"/>
        <function-ref name="set" scoped="" ref="0x7ebd1390"/>
        <function-ref name="clr" scoped="" ref="0x7ebd1470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7ebe0bf8" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7ebe0bf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebe0dd0"/>
        <function-ref name="isInput" scoped="" ref="0x7ebe0eb0"/>
        <function-ref name="toggle" scoped="" ref="0x7ebd5010"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebd50f0"/>
        <function-ref name="get" scoped="" ref="0x7ebd51d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebd52b0"/>
        <function-ref name="set" scoped="" ref="0x7ebd5390"/>
        <function-ref name="clr" scoped="" ref="0x7ebd5470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7ebd4890" loc="39:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7ebd4890"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebd4a68"/>
        <function-ref name="isInput" scoped="" ref="0x7ebd4b48"/>
        <function-ref name="toggle" scoped="" ref="0x7ebd4c28"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebd4d08"/>
        <function-ref name="get" scoped="" ref="0x7ebd4de8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebd4ec8"/>
        <function-ref name="set" scoped="" ref="0x7ebd2010"/>
        <function-ref name="clr" scoped="" ref="0x7ebd20f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7ebd15d0" loc="42:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7ebd15d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebd17a8"/>
        <function-ref name="isInput" scoped="" ref="0x7ebd1888"/>
        <function-ref name="toggle" scoped="" ref="0x7ebd1968"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebd1a48"/>
        <function-ref name="get" scoped="" ref="0x7ebd1b28"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebd1c08"/>
        <function-ref name="set" scoped="" ref="0x7ebd1ce8"/>
        <function-ref name="clr" scoped="" ref="0x7ebd1dc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e2612b0" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e2612b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e261488"/>
        <function-ref name="isInput" scoped="" ref="0x7e261568"/>
        <function-ref name="toggle" scoped="" ref="0x7e261648"/>
        <function-ref name="isOutput" scoped="" ref="0x7e261728"/>
        <function-ref name="get" scoped="" ref="0x7e261808"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e2618e8"/>
        <function-ref name="set" scoped="" ref="0x7e2619c8"/>
        <function-ref name="clr" scoped="" ref="0x7e261aa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e260c78" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e260c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e260e50"/>
        <function-ref name="isInput" scoped="" ref="0x7e250010"/>
        <function-ref name="toggle" scoped="" ref="0x7e2500f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7e2501d0"/>
        <function-ref name="get" scoped="" ref="0x7e2502b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e250390"/>
        <function-ref name="set" scoped="" ref="0x7e250470"/>
        <function-ref name="clr" scoped="" ref="0x7e250550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e24f718" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e24f718"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e24f8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7e24f9d0"/>
        <function-ref name="toggle" scoped="" ref="0x7e24fab0"/>
        <function-ref name="isOutput" scoped="" ref="0x7e24fb90"/>
        <function-ref name="get" scoped="" ref="0x7e24fc70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e24fd50"/>
        <function-ref name="set" scoped="" ref="0x7e24fe30"/>
        <function-ref name="clr" scoped="" ref="0x7e24ff10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e24d0f8" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e24d0f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e24d2d0"/>
        <function-ref name="isInput" scoped="" ref="0x7e24d3b0"/>
        <function-ref name="toggle" scoped="" ref="0x7e24d490"/>
        <function-ref name="isOutput" scoped="" ref="0x7e24d570"/>
        <function-ref name="get" scoped="" ref="0x7e24d650"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e24d730"/>
        <function-ref name="set" scoped="" ref="0x7e24d810"/>
        <function-ref name="clr" scoped="" ref="0x7e24d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e24cac8" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e24cac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e24cca0"/>
        <function-ref name="isInput" scoped="" ref="0x7e24cd80"/>
        <function-ref name="toggle" scoped="" ref="0x7e24ce60"/>
        <function-ref name="isOutput" scoped="" ref="0x7e24b010"/>
        <function-ref name="get" scoped="" ref="0x7e24b0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e24b1d0"/>
        <function-ref name="set" scoped="" ref="0x7e24b2b0"/>
        <function-ref name="clr" scoped="" ref="0x7e24b390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e24a570" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e24a570"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e24a748"/>
        <function-ref name="isInput" scoped="" ref="0x7e24a828"/>
        <function-ref name="toggle" scoped="" ref="0x7e24a908"/>
        <function-ref name="isOutput" scoped="" ref="0x7e24a9e8"/>
        <function-ref name="get" scoped="" ref="0x7e24aac8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e24aba8"/>
        <function-ref name="set" scoped="" ref="0x7e24ac88"/>
        <function-ref name="clr" scoped="" ref="0x7e24ad68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e247010" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e247010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e2471e8"/>
        <function-ref name="isInput" scoped="" ref="0x7e2472c8"/>
        <function-ref name="toggle" scoped="" ref="0x7e2473a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7e247488"/>
        <function-ref name="get" scoped="" ref="0x7e247568"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e247648"/>
        <function-ref name="set" scoped="" ref="0x7e247728"/>
        <function-ref name="clr" scoped="" ref="0x7e247808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e2469e8" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e2469e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e246bc0"/>
        <function-ref name="isInput" scoped="" ref="0x7e246ca0"/>
        <function-ref name="toggle" scoped="" ref="0x7e246d80"/>
        <function-ref name="isOutput" scoped="" ref="0x7e246e60"/>
        <function-ref name="get" scoped="" ref="0x7e245010"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e2450f0"/>
        <function-ref name="set" scoped="" ref="0x7e2451d0"/>
        <function-ref name="clr" scoped="" ref="0x7e2452b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7ebc3c88" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7ebc3c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebc3e60"/>
        <function-ref name="isInput" scoped="" ref="0x7ebc2010"/>
        <function-ref name="toggle" scoped="" ref="0x7ebc20f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebc21d0"/>
        <function-ref name="get" scoped="" ref="0x7ebc22b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebc2390"/>
        <function-ref name="set" scoped="" ref="0x7ebc2470"/>
        <function-ref name="clr" scoped="" ref="0x7ebc2550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7ebc1988" loc="40:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7ebc1988"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebc1b60"/>
        <function-ref name="isInput" scoped="" ref="0x7ebc1c40"/>
        <function-ref name="toggle" scoped="" ref="0x7ebc1d20"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebc1e00"/>
        <function-ref name="get" scoped="" ref="0x7ebc1ee0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebc0010"/>
        <function-ref name="set" scoped="" ref="0x7ebc00f0"/>
        <function-ref name="clr" scoped="" ref="0x7ebc01d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7ebc49c0" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7ebc49c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebc4b98"/>
        <function-ref name="isInput" scoped="" ref="0x7ebc4c78"/>
        <function-ref name="toggle" scoped="" ref="0x7ebc4d58"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebc4e38"/>
        <function-ref name="get" scoped="" ref="0x7ebc4f18"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebc3010"/>
        <function-ref name="set" scoped="" ref="0x7ebc30f0"/>
        <function-ref name="clr" scoped="" ref="0x7ebc31d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7ebc26b0" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7ebc26b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebc2888"/>
        <function-ref name="isInput" scoped="" ref="0x7ebc2968"/>
        <function-ref name="toggle" scoped="" ref="0x7ebc2a48"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebc2b28"/>
        <function-ref name="get" scoped="" ref="0x7ebc2c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebc2ce8"/>
        <function-ref name="set" scoped="" ref="0x7ebc2dc8"/>
        <function-ref name="clr" scoped="" ref="0x7ebc2ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7ebc0330" loc="41:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7ebc0330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebc0508"/>
        <function-ref name="isInput" scoped="" ref="0x7ebc05e8"/>
        <function-ref name="toggle" scoped="" ref="0x7ebc06c8"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebc07a8"/>
        <function-ref name="get" scoped="" ref="0x7ebc0888"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebc0968"/>
        <function-ref name="set" scoped="" ref="0x7ebc0a48"/>
        <function-ref name="clr" scoped="" ref="0x7ebc0b28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7ebc3330" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7ebc3330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebc3508"/>
        <function-ref name="isInput" scoped="" ref="0x7ebc35e8"/>
        <function-ref name="toggle" scoped="" ref="0x7ebc36c8"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebc37a8"/>
        <function-ref name="get" scoped="" ref="0x7ebc3888"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebc3968"/>
        <function-ref name="set" scoped="" ref="0x7ebc3a48"/>
        <function-ref name="clr" scoped="" ref="0x7ebc3b28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7ebc1030" loc="39:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7ebc1030"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebc1208"/>
        <function-ref name="isInput" scoped="" ref="0x7ebc12e8"/>
        <function-ref name="toggle" scoped="" ref="0x7ebc13c8"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebc14a8"/>
        <function-ref name="get" scoped="" ref="0x7ebc1588"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebc1668"/>
        <function-ref name="set" scoped="" ref="0x7ebc1748"/>
        <function-ref name="clr" scoped="" ref="0x7ebc1828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7ebc0c88" loc="42:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7ebc0c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebc0e60"/>
        <function-ref name="isInput" scoped="" ref="0x7ebb5010"/>
        <function-ref name="toggle" scoped="" ref="0x7ebb50f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebb51d0"/>
        <function-ref name="get" scoped="" ref="0x7ebb52b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebb5390"/>
        <function-ref name="set" scoped="" ref="0x7ebb5470"/>
        <function-ref name="clr" scoped="" ref="0x7ebb5550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e2027f8" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e2027f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e2029d0"/>
        <function-ref name="isInput" scoped="" ref="0x7e202ab0"/>
        <function-ref name="toggle" scoped="" ref="0x7e202b90"/>
        <function-ref name="isOutput" scoped="" ref="0x7e202c70"/>
        <function-ref name="get" scoped="" ref="0x7e202d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e202e30"/>
        <function-ref name="set" scoped="" ref="0x7e202f10"/>
        <function-ref name="clr" scoped="" ref="0x7e201010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e200228" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e200228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e200400"/>
        <function-ref name="isInput" scoped="" ref="0x7e2004e0"/>
        <function-ref name="toggle" scoped="" ref="0x7e2005c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7e2006a0"/>
        <function-ref name="get" scoped="" ref="0x7e200780"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e200860"/>
        <function-ref name="set" scoped="" ref="0x7e200940"/>
        <function-ref name="clr" scoped="" ref="0x7e200a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e1f1c08" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e1f1c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e1f1de0"/>
        <function-ref name="isInput" scoped="" ref="0x7e1f1ec0"/>
        <function-ref name="toggle" scoped="" ref="0x7e1f0010"/>
        <function-ref name="isOutput" scoped="" ref="0x7e1f00f0"/>
        <function-ref name="get" scoped="" ref="0x7e1f01d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e1f02b0"/>
        <function-ref name="set" scoped="" ref="0x7e1f0390"/>
        <function-ref name="clr" scoped="" ref="0x7e1f0470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e1ef6c0" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e1ef6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e1ef898"/>
        <function-ref name="isInput" scoped="" ref="0x7e1ef978"/>
        <function-ref name="toggle" scoped="" ref="0x7e1efa58"/>
        <function-ref name="isOutput" scoped="" ref="0x7e1efb38"/>
        <function-ref name="get" scoped="" ref="0x7e1efc18"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e1efcf8"/>
        <function-ref name="set" scoped="" ref="0x7e1efdd8"/>
        <function-ref name="clr" scoped="" ref="0x7e1efeb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e1ed0b0" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e1ed0b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e1ed288"/>
        <function-ref name="isInput" scoped="" ref="0x7e1ed368"/>
        <function-ref name="toggle" scoped="" ref="0x7e1ed448"/>
        <function-ref name="isOutput" scoped="" ref="0x7e1ed528"/>
        <function-ref name="get" scoped="" ref="0x7e1ed608"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e1ed6e8"/>
        <function-ref name="set" scoped="" ref="0x7e1ed7c8"/>
        <function-ref name="clr" scoped="" ref="0x7e1ed8a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e1eca88" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e1eca88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e1ecc60"/>
        <function-ref name="isInput" scoped="" ref="0x7e1ecd40"/>
        <function-ref name="toggle" scoped="" ref="0x7e1ece20"/>
        <function-ref name="isOutput" scoped="" ref="0x7e1ecf00"/>
        <function-ref name="get" scoped="" ref="0x7e1eb010"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e1eb0f0"/>
        <function-ref name="set" scoped="" ref="0x7e1eb1d0"/>
        <function-ref name="clr" scoped="" ref="0x7e1eb2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e1ea538" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e1ea538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e1ea710"/>
        <function-ref name="isInput" scoped="" ref="0x7e1ea7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7e1ea8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7e1ea9b0"/>
        <function-ref name="get" scoped="" ref="0x7e1eaa90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e1eab70"/>
        <function-ref name="set" scoped="" ref="0x7e1eac50"/>
        <function-ref name="clr" scoped="" ref="0x7e1ead30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e1e8010" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e1e8010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e1e81e8"/>
        <function-ref name="isInput" scoped="" ref="0x7e1e82c8"/>
        <function-ref name="toggle" scoped="" ref="0x7e1e83a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7e1e8488"/>
        <function-ref name="get" scoped="" ref="0x7e1e8568"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e1e8648"/>
        <function-ref name="set" scoped="" ref="0x7e1e8728"/>
        <function-ref name="clr" scoped="" ref="0x7e1e8808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7ebb0410" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7ebb0410"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebb05e8"/>
        <function-ref name="isInput" scoped="" ref="0x7ebb06c8"/>
        <function-ref name="toggle" scoped="" ref="0x7ebb07a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebb0888"/>
        <function-ref name="get" scoped="" ref="0x7ebb0968"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebb0a48"/>
        <function-ref name="set" scoped="" ref="0x7ebb0b28"/>
        <function-ref name="clr" scoped="" ref="0x7ebb0c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7eba4170" loc="40:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7eba4170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eba4348"/>
        <function-ref name="isInput" scoped="" ref="0x7eba4428"/>
        <function-ref name="toggle" scoped="" ref="0x7eba4508"/>
        <function-ref name="isOutput" scoped="" ref="0x7eba45e8"/>
        <function-ref name="get" scoped="" ref="0x7eba46c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eba47a8"/>
        <function-ref name="set" scoped="" ref="0x7eba4888"/>
        <function-ref name="clr" scoped="" ref="0x7eba4968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7ebb10c0" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7ebb10c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebb1298"/>
        <function-ref name="isInput" scoped="" ref="0x7ebb1378"/>
        <function-ref name="toggle" scoped="" ref="0x7ebb1458"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebb1538"/>
        <function-ref name="get" scoped="" ref="0x7ebb1618"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebb16f8"/>
        <function-ref name="set" scoped="" ref="0x7ebb17d8"/>
        <function-ref name="clr" scoped="" ref="0x7ebb18b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7ebb0d68" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7ebb0d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eba5010"/>
        <function-ref name="isInput" scoped="" ref="0x7eba50f0"/>
        <function-ref name="toggle" scoped="" ref="0x7eba51d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7eba52b0"/>
        <function-ref name="get" scoped="" ref="0x7eba5390"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eba5470"/>
        <function-ref name="set" scoped="" ref="0x7eba5550"/>
        <function-ref name="clr" scoped="" ref="0x7eba5630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7eba4ac8" loc="41:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7eba4ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eba4ca0"/>
        <function-ref name="isInput" scoped="" ref="0x7eba4d80"/>
        <function-ref name="toggle" scoped="" ref="0x7eba4e60"/>
        <function-ref name="isOutput" scoped="" ref="0x7eba3010"/>
        <function-ref name="get" scoped="" ref="0x7eba30f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eba31d0"/>
        <function-ref name="set" scoped="" ref="0x7eba32b0"/>
        <function-ref name="clr" scoped="" ref="0x7eba3390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7ebb1a18" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7ebb1a18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ebb1bf0"/>
        <function-ref name="isInput" scoped="" ref="0x7ebb1cd0"/>
        <function-ref name="toggle" scoped="" ref="0x7ebb1db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ebb1e90"/>
        <function-ref name="get" scoped="" ref="0x7ebb0010"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ebb00f0"/>
        <function-ref name="set" scoped="" ref="0x7ebb01d0"/>
        <function-ref name="clr" scoped="" ref="0x7ebb02b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7eba5790" loc="39:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7eba5790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eba5968"/>
        <function-ref name="isInput" scoped="" ref="0x7eba5a48"/>
        <function-ref name="toggle" scoped="" ref="0x7eba5b28"/>
        <function-ref name="isOutput" scoped="" ref="0x7eba5c08"/>
        <function-ref name="get" scoped="" ref="0x7eba5ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eba5dc8"/>
        <function-ref name="set" scoped="" ref="0x7eba5ea8"/>
        <function-ref name="clr" scoped="" ref="0x7eba4010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7eba34f0" loc="42:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7eba34f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eba36c8"/>
        <function-ref name="isInput" scoped="" ref="0x7eba37a8"/>
        <function-ref name="toggle" scoped="" ref="0x7eba3888"/>
        <function-ref name="isOutput" scoped="" ref="0x7eba3968"/>
        <function-ref name="get" scoped="" ref="0x7eba3a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eba3b28"/>
        <function-ref name="set" scoped="" ref="0x7eba3c08"/>
        <function-ref name="clr" scoped="" ref="0x7eba3ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e1a6d08" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e1a6d08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e1a6ee0"/>
        <function-ref name="isInput" scoped="" ref="0x7e1a3010"/>
        <function-ref name="toggle" scoped="" ref="0x7e1a30f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7e1a31d0"/>
        <function-ref name="get" scoped="" ref="0x7e1a32b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e1a3390"/>
        <function-ref name="set" scoped="" ref="0x7e1a3470"/>
        <function-ref name="clr" scoped="" ref="0x7e1a3550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e1a2718" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e1a2718"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e1a28f0"/>
        <function-ref name="isInput" scoped="" ref="0x7e1a29d0"/>
        <function-ref name="toggle" scoped="" ref="0x7e1a2ab0"/>
        <function-ref name="isOutput" scoped="" ref="0x7e1a2b90"/>
        <function-ref name="get" scoped="" ref="0x7e1a2c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e1a2d50"/>
        <function-ref name="set" scoped="" ref="0x7e1a2e30"/>
        <function-ref name="clr" scoped="" ref="0x7e1a2f10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e1a00f8" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e1a00f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e1a02d0"/>
        <function-ref name="isInput" scoped="" ref="0x7e1a03b0"/>
        <function-ref name="toggle" scoped="" ref="0x7e1a0490"/>
        <function-ref name="isOutput" scoped="" ref="0x7e1a0570"/>
        <function-ref name="get" scoped="" ref="0x7e1a0650"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e1a0730"/>
        <function-ref name="set" scoped="" ref="0x7e1a0810"/>
        <function-ref name="clr" scoped="" ref="0x7e1a08f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e191ac8" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e191ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e191ca0"/>
        <function-ref name="isInput" scoped="" ref="0x7e191d80"/>
        <function-ref name="toggle" scoped="" ref="0x7e191e60"/>
        <function-ref name="isOutput" scoped="" ref="0x7e190010"/>
        <function-ref name="get" scoped="" ref="0x7e1900f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e1901d0"/>
        <function-ref name="set" scoped="" ref="0x7e1902b0"/>
        <function-ref name="clr" scoped="" ref="0x7e190390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e18f570" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e18f570"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e18f748"/>
        <function-ref name="isInput" scoped="" ref="0x7e18f828"/>
        <function-ref name="toggle" scoped="" ref="0x7e18f908"/>
        <function-ref name="isOutput" scoped="" ref="0x7e18f9e8"/>
        <function-ref name="get" scoped="" ref="0x7e18fac8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e18fba8"/>
        <function-ref name="set" scoped="" ref="0x7e18fc88"/>
        <function-ref name="clr" scoped="" ref="0x7e18fd68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e18d010" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e18d010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e18d1e8"/>
        <function-ref name="isInput" scoped="" ref="0x7e18d2c8"/>
        <function-ref name="toggle" scoped="" ref="0x7e18d3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7e18d488"/>
        <function-ref name="get" scoped="" ref="0x7e18d568"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e18d648"/>
        <function-ref name="set" scoped="" ref="0x7e18d728"/>
        <function-ref name="clr" scoped="" ref="0x7e18d808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e18c9e8" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e18c9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e18cbc0"/>
        <function-ref name="isInput" scoped="" ref="0x7e18cca0"/>
        <function-ref name="toggle" scoped="" ref="0x7e18cd80"/>
        <function-ref name="isOutput" scoped="" ref="0x7e18ce60"/>
        <function-ref name="get" scoped="" ref="0x7e18b010"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e18b0f0"/>
        <function-ref name="set" scoped="" ref="0x7e18b1d0"/>
        <function-ref name="clr" scoped="" ref="0x7e18b2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e18a538" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e18a538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e18a710"/>
        <function-ref name="isInput" scoped="" ref="0x7e18a7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7e18a8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7e18a9b0"/>
        <function-ref name="get" scoped="" ref="0x7e18aa90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e18ab70"/>
        <function-ref name="set" scoped="" ref="0x7e18ac50"/>
        <function-ref name="clr" scoped="" ref="0x7e18ad30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7eb949e8" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7eb949e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb94bc0"/>
        <function-ref name="isInput" scoped="" ref="0x7eb94ca0"/>
        <function-ref name="toggle" scoped="" ref="0x7eb94d80"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb94e60"/>
        <function-ref name="get" scoped="" ref="0x7eb93010"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb930f0"/>
        <function-ref name="set" scoped="" ref="0x7eb931d0"/>
        <function-ref name="clr" scoped="" ref="0x7eb932b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7eb92790" loc="40:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7eb92790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb92968"/>
        <function-ref name="isInput" scoped="" ref="0x7eb92a48"/>
        <function-ref name="toggle" scoped="" ref="0x7eb92b28"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb92c08"/>
        <function-ref name="get" scoped="" ref="0x7eb92ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb92dc8"/>
        <function-ref name="set" scoped="" ref="0x7eb92ea8"/>
        <function-ref name="clr" scoped="" ref="0x7eb91010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7eb956f8" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7eb956f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb958d0"/>
        <function-ref name="isInput" scoped="" ref="0x7eb959b0"/>
        <function-ref name="toggle" scoped="" ref="0x7eb95a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb95b70"/>
        <function-ref name="get" scoped="" ref="0x7eb95c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb95d30"/>
        <function-ref name="set" scoped="" ref="0x7eb95e10"/>
        <function-ref name="clr" scoped="" ref="0x7eb95ef0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7eb93410" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7eb93410"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb935e8"/>
        <function-ref name="isInput" scoped="" ref="0x7eb936c8"/>
        <function-ref name="toggle" scoped="" ref="0x7eb937a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb93888"/>
        <function-ref name="get" scoped="" ref="0x7eb93968"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb93a48"/>
        <function-ref name="set" scoped="" ref="0x7eb93b28"/>
        <function-ref name="clr" scoped="" ref="0x7eb93c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7eb91170" loc="41:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7eb91170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb91348"/>
        <function-ref name="isInput" scoped="" ref="0x7eb91428"/>
        <function-ref name="toggle" scoped="" ref="0x7eb91508"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb915e8"/>
        <function-ref name="get" scoped="" ref="0x7eb916c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb917a8"/>
        <function-ref name="set" scoped="" ref="0x7eb91888"/>
        <function-ref name="clr" scoped="" ref="0x7eb91968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7eb94090" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7eb94090"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb94268"/>
        <function-ref name="isInput" scoped="" ref="0x7eb94348"/>
        <function-ref name="toggle" scoped="" ref="0x7eb94428"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb94508"/>
        <function-ref name="get" scoped="" ref="0x7eb945e8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb946c8"/>
        <function-ref name="set" scoped="" ref="0x7eb947a8"/>
        <function-ref name="clr" scoped="" ref="0x7eb94888"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7eb93d68" loc="39:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7eb93d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb92010"/>
        <function-ref name="isInput" scoped="" ref="0x7eb920f0"/>
        <function-ref name="toggle" scoped="" ref="0x7eb921d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb922b0"/>
        <function-ref name="get" scoped="" ref="0x7eb92390"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb92470"/>
        <function-ref name="set" scoped="" ref="0x7eb92550"/>
        <function-ref name="clr" scoped="" ref="0x7eb92630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7eb91ac8" loc="42:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7eb91ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb91ca0"/>
        <function-ref name="isInput" scoped="" ref="0x7eb91d80"/>
        <function-ref name="toggle" scoped="" ref="0x7eb91e60"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb90010"/>
        <function-ref name="get" scoped="" ref="0x7eb900f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb901d0"/>
        <function-ref name="set" scoped="" ref="0x7eb902b0"/>
        <function-ref name="clr" scoped="" ref="0x7eb90390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e1472b0" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e1472b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e147488"/>
        <function-ref name="isInput" scoped="" ref="0x7e147568"/>
        <function-ref name="toggle" scoped="" ref="0x7e147648"/>
        <function-ref name="isOutput" scoped="" ref="0x7e147728"/>
        <function-ref name="get" scoped="" ref="0x7e147808"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e1478e8"/>
        <function-ref name="set" scoped="" ref="0x7e1479c8"/>
        <function-ref name="clr" scoped="" ref="0x7e147aa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e146c78" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e146c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e146e50"/>
        <function-ref name="isInput" scoped="" ref="0x7e145010"/>
        <function-ref name="toggle" scoped="" ref="0x7e1450f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7e1451d0"/>
        <function-ref name="get" scoped="" ref="0x7e1452b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e145390"/>
        <function-ref name="set" scoped="" ref="0x7e145470"/>
        <function-ref name="clr" scoped="" ref="0x7e145550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e144718" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e144718"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e1448f0"/>
        <function-ref name="isInput" scoped="" ref="0x7e1449d0"/>
        <function-ref name="toggle" scoped="" ref="0x7e144ab0"/>
        <function-ref name="isOutput" scoped="" ref="0x7e144b90"/>
        <function-ref name="get" scoped="" ref="0x7e144c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e144d50"/>
        <function-ref name="set" scoped="" ref="0x7e144e30"/>
        <function-ref name="clr" scoped="" ref="0x7e144f10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e1420f8" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e1420f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e1422d0"/>
        <function-ref name="isInput" scoped="" ref="0x7e1423b0"/>
        <function-ref name="toggle" scoped="" ref="0x7e142490"/>
        <function-ref name="isOutput" scoped="" ref="0x7e142570"/>
        <function-ref name="get" scoped="" ref="0x7e142650"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e142730"/>
        <function-ref name="set" scoped="" ref="0x7e142810"/>
        <function-ref name="clr" scoped="" ref="0x7e1428f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e141ac8" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e141ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e141ca0"/>
        <function-ref name="isInput" scoped="" ref="0x7e141d80"/>
        <function-ref name="toggle" scoped="" ref="0x7e141e60"/>
        <function-ref name="isOutput" scoped="" ref="0x7e140010"/>
        <function-ref name="get" scoped="" ref="0x7e1400f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e1401d0"/>
        <function-ref name="set" scoped="" ref="0x7e1402b0"/>
        <function-ref name="clr" scoped="" ref="0x7e140390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e132570" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e132570"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e132748"/>
        <function-ref name="isInput" scoped="" ref="0x7e132828"/>
        <function-ref name="toggle" scoped="" ref="0x7e132908"/>
        <function-ref name="isOutput" scoped="" ref="0x7e1329e8"/>
        <function-ref name="get" scoped="" ref="0x7e132ac8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e132ba8"/>
        <function-ref name="set" scoped="" ref="0x7e132c88"/>
        <function-ref name="clr" scoped="" ref="0x7e132d68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e12f010" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e12f010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e12f1e8"/>
        <function-ref name="isInput" scoped="" ref="0x7e12f2c8"/>
        <function-ref name="toggle" scoped="" ref="0x7e12f3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7e12f488"/>
        <function-ref name="get" scoped="" ref="0x7e12f568"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e12f648"/>
        <function-ref name="set" scoped="" ref="0x7e12f728"/>
        <function-ref name="clr" scoped="" ref="0x7e12f808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7e12e9e8" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7e12e9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e12ebc0"/>
        <function-ref name="isInput" scoped="" ref="0x7e12eca0"/>
        <function-ref name="toggle" scoped="" ref="0x7e12ed80"/>
        <function-ref name="isOutput" scoped="" ref="0x7e12ee60"/>
        <function-ref name="get" scoped="" ref="0x7e12d010"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e12d0f0"/>
        <function-ref name="set" scoped="" ref="0x7e12d1d0"/>
        <function-ref name="clr" scoped="" ref="0x7e12d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7eb82228" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7eb82228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb82400"/>
        <function-ref name="isInput" scoped="" ref="0x7eb824e0"/>
        <function-ref name="toggle" scoped="" ref="0x7eb825c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb826a0"/>
        <function-ref name="get" scoped="" ref="0x7eb82780"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb82860"/>
        <function-ref name="set" scoped="" ref="0x7eb82940"/>
        <function-ref name="clr" scoped="" ref="0x7eb82a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7eb615e8" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7eb615e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb617c0"/>
        <function-ref name="isInput" scoped="" ref="0x7eb618a0"/>
        <function-ref name="toggle" scoped="" ref="0x7eb61980"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb61a60"/>
        <function-ref name="get" scoped="" ref="0x7eb61b40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb61c20"/>
        <function-ref name="set" scoped="" ref="0x7eb61d00"/>
        <function-ref name="clr" scoped="" ref="0x7eb61de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7eb54a90" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7eb54a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb54c68"/>
        <function-ref name="isInput" scoped="" ref="0x7eb54d48"/>
        <function-ref name="toggle" scoped="" ref="0x7eb54e28"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb54f08"/>
        <function-ref name="get" scoped="" ref="0x7eb53010"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb530f0"/>
        <function-ref name="set" scoped="" ref="0x7eb531d0"/>
        <function-ref name="clr" scoped="" ref="0x7eb532b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7eb52e60" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7eb52e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb51050"/>
        <function-ref name="isInput" scoped="" ref="0x7eb51130"/>
        <function-ref name="toggle" scoped="" ref="0x7eb51210"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb512f0"/>
        <function-ref name="get" scoped="" ref="0x7eb513d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb514b0"/>
        <function-ref name="set" scoped="" ref="0x7eb51590"/>
        <function-ref name="clr" scoped="" ref="0x7eb51670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7eb44228" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7eb44228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb44400"/>
        <function-ref name="isInput" scoped="" ref="0x7eb444e0"/>
        <function-ref name="toggle" scoped="" ref="0x7eb445c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb446a0"/>
        <function-ref name="get" scoped="" ref="0x7eb44780"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb44860"/>
        <function-ref name="set" scoped="" ref="0x7eb44940"/>
        <function-ref name="clr" scoped="" ref="0x7eb44a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7eb425e8" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7eb425e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb427c0"/>
        <function-ref name="isInput" scoped="" ref="0x7eb428a0"/>
        <function-ref name="toggle" scoped="" ref="0x7eb42980"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb42a60"/>
        <function-ref name="get" scoped="" ref="0x7eb42b40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb42c20"/>
        <function-ref name="set" scoped="" ref="0x7eb42d00"/>
        <function-ref name="clr" scoped="" ref="0x7eb42de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7eb40b10" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7eb40b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb40ce8"/>
        <function-ref name="isInput" scoped="" ref="0x7eb40dc8"/>
        <function-ref name="toggle" scoped="" ref="0x7eb40ea8"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb34010"/>
        <function-ref name="get" scoped="" ref="0x7eb340f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb341d0"/>
        <function-ref name="set" scoped="" ref="0x7eb342b0"/>
        <function-ref name="clr" scoped="" ref="0x7eb34390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7eb32010" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7eb32010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb321e8"/>
        <function-ref name="isInput" scoped="" ref="0x7eb322c8"/>
        <function-ref name="toggle" scoped="" ref="0x7eb323a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb32488"/>
        <function-ref name="get" scoped="" ref="0x7eb32568"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb32648"/>
        <function-ref name="set" scoped="" ref="0x7eb32728"/>
        <function-ref name="clr" scoped="" ref="0x7eb32808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7eb302d8" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7eb302d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb304b0"/>
        <function-ref name="isInput" scoped="" ref="0x7eb30590"/>
        <function-ref name="toggle" scoped="" ref="0x7eb30670"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb30750"/>
        <function-ref name="get" scoped="" ref="0x7eb30830"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb30910"/>
        <function-ref name="set" scoped="" ref="0x7eb309f0"/>
        <function-ref name="clr" scoped="" ref="0x7eb30ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7eb23590" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7eb23590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb23768"/>
        <function-ref name="isInput" scoped="" ref="0x7eb23848"/>
        <function-ref name="toggle" scoped="" ref="0x7eb23928"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb23a08"/>
        <function-ref name="get" scoped="" ref="0x7eb23ae8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb23bc8"/>
        <function-ref name="set" scoped="" ref="0x7eb23ca8"/>
        <function-ref name="clr" scoped="" ref="0x7eb23d88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7eb21880" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7eb21880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb21a58"/>
        <function-ref name="isInput" scoped="" ref="0x7eb21b38"/>
        <function-ref name="toggle" scoped="" ref="0x7eb21c18"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb21cf8"/>
        <function-ref name="get" scoped="" ref="0x7eb21dd8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb21eb8"/>
        <function-ref name="set" scoped="" ref="0x7eb20010"/>
        <function-ref name="clr" scoped="" ref="0x7eb200f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7eb14bc0" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7eb14bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb14d98"/>
        <function-ref name="isInput" scoped="" ref="0x7eb14e78"/>
        <function-ref name="toggle" scoped="" ref="0x7eb13010"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb130f0"/>
        <function-ref name="get" scoped="" ref="0x7eb131d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb132b0"/>
        <function-ref name="set" scoped="" ref="0x7eb13390"/>
        <function-ref name="clr" scoped="" ref="0x7eb13470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7eb12f20" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7eb12f20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7eb11110"/>
        <function-ref name="isInput" scoped="" ref="0x7eb111f0"/>
        <function-ref name="toggle" scoped="" ref="0x7eb112d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7eb113b0"/>
        <function-ref name="get" scoped="" ref="0x7eb11490"/>
        <function-ref name="makeOutput" scoped="" ref="0x7eb11570"/>
        <function-ref name="set" scoped="" ref="0x7eb11650"/>
        <function-ref name="clr" scoped="" ref="0x7eb11730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7eab1d58" loc="27:/opt/tinyos-2.x/tos/platforms/mica/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7eab1d58"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f250308"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f250308"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7eaa6010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7eaa6160" loc="28:/opt/tinyos-2.x/tos/platforms/mica/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7eaa6160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7eaa6338"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7eaa6418"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7eaa64f8"/>
        <function-ref name="actualMicro" scoped="" ref="0x7eaa65d8"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7eaa66b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7ea83ee8" loc="49:/opt/tinyos-2.x/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7ea83ee8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ea820e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7ea83300" loc="46:/opt/tinyos-2.x/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7ea83300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7ea834d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7ea83b78" loc="48:/opt/tinyos-2.x/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7ea83b78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ea83d50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7ea83648" loc="47:/opt/tinyos-2.x/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7ea83648"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ea83820"/>
        <function-ref name="taskLoop" scoped="" ref="0x7ea83900"/>
        <function-ref name="runNextTask" scoped="" ref="0x7ea839e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f2109b8" loc="37:/opt/tinyos-2.x/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7f2109b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f210b90"/>
        <function-ref name="runTask" scoped="" ref="0x7f210c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f230970" loc="36:/opt/tinyos-2.x/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f230970"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f230b48"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f230c28"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f230d08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f062120" loc="45:/opt/tinyos-2.x/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7f062120"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f0622f8"/>
        <function-ref name="runTask" scoped="" ref="0x7f0623d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f051540" loc="46:/opt/tinyos-2.x/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7f051540"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x7f051718"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f070960" loc="44:/opt/tinyos-2.x/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f070960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f070b38"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f070c18"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f070cf8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7efe01a0" loc="46:/opt/tinyos-2.x/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x7efe01a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7efe0378"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f202c20" loc="42:/opt/tinyos-2.x/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7f202c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x7f202df8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7eff0078" loc="43:/opt/tinyos-2.x/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7eff0078"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7eff0250"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7ea741d8" loc="35:/opt/tinyos-2.x/tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7ea741d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7ea743b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7ea74490"/>
        <function-ref name="led1On" scoped="" ref="0x7ea74570"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7ea74650"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7ea74730"/>
        <function-ref name="get" scoped="" ref="0x7ea74810"/>
        <function-ref name="led1Off" scoped="" ref="0x7ea748f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7ea74c70"/>
        <function-ref name="set" scoped="" ref="0x7ea749d0"/>
        <function-ref name="led0On" scoped="" ref="0x7ea74ab0"/>
        <function-ref name="led2On" scoped="" ref="0x7ea74b90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7ea66ac8" loc="39:/opt/tinyos-2.x/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x7ea66ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ea66ca0"/>
        <function-ref name="isInput" scoped="" ref="0x7ea66d80"/>
        <function-ref name="toggle" scoped="" ref="0x7ea66e60"/>
        <function-ref name="isOutput" scoped="" ref="0x7ea65010"/>
        <function-ref name="get" scoped="" ref="0x7ea650f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ea651d0"/>
        <function-ref name="set" scoped="" ref="0x7ea652b0"/>
        <function-ref name="clr" scoped="" ref="0x7ea65390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ea73b48" loc="35:/opt/tinyos-2.x/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7ea73b48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ea73d20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7ea65508" loc="40:/opt/tinyos-2.x/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x7ea65508"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ea656e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ea657c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ea658a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ea65980"/>
        <function-ref name="get" scoped="" ref="0x7ea65a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ea65b40"/>
        <function-ref name="set" scoped="" ref="0x7ea65c20"/>
        <function-ref name="clr" scoped="" ref="0x7ea65d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7ea73e68" loc="36:/opt/tinyos-2.x/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7ea73e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7ea66050"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7ea66130"/>
        <function-ref name="led1On" scoped="" ref="0x7ea66210"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7ea662f0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7ea663d0"/>
        <function-ref name="get" scoped="" ref="0x7ea664b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7ea66590"/>
        <function-ref name="led2Off" scoped="" ref="0x7ea66910"/>
        <function-ref name="set" scoped="" ref="0x7ea66670"/>
        <function-ref name="led0On" scoped="" ref="0x7ea66750"/>
        <function-ref name="led2On" scoped="" ref="0x7ea66830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7ea65e78" loc="41:/opt/tinyos-2.x/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x7ea65e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ea64070"/>
        <function-ref name="isInput" scoped="" ref="0x7ea64150"/>
        <function-ref name="toggle" scoped="" ref="0x7ea64230"/>
        <function-ref name="isOutput" scoped="" ref="0x7ea64310"/>
        <function-ref name="get" scoped="" ref="0x7ea643f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ea644d0"/>
        <function-ref name="set" scoped="" ref="0x7ea645b0"/>
        <function-ref name="clr" scoped="" ref="0x7ea64690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7ea42908" loc="35:/opt/tinyos-2.x/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x7ea42908"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ea42ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7ea42bc0"/>
        <function-ref name="toggle" scoped="" ref="0x7ea42ca0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ea42d80"/>
        <function-ref name="get" scoped="" ref="0x7ea42e60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ea41010"/>
        <function-ref name="set" scoped="" ref="0x7ea410f0"/>
        <function-ref name="clr" scoped="" ref="0x7ea411d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7ea41368" loc="36:/opt/tinyos-2.x/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x7ea41368"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ea41540"/>
        <function-ref name="isInput" scoped="" ref="0x7ea41620"/>
        <function-ref name="toggle" scoped="" ref="0x7ea41700"/>
        <function-ref name="isOutput" scoped="" ref="0x7ea417e0"/>
        <function-ref name="get" scoped="" ref="0x7ea418c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ea419a0"/>
        <function-ref name="set" scoped="" ref="0x7ea41a80"/>
        <function-ref name="clr" scoped="" ref="0x7ea41b60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7ea406b8" loc="38:/opt/tinyos-2.x/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7ea406b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ea40890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7ea41cf8" loc="37:/opt/tinyos-2.x/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x7ea41cf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ea41ed0"/>
        <function-ref name="isInput" scoped="" ref="0x7ea40010"/>
        <function-ref name="toggle" scoped="" ref="0x7ea400f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ea401d0"/>
        <function-ref name="get" scoped="" ref="0x7ea402b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ea40390"/>
        <function-ref name="set" scoped="" ref="0x7ea40470"/>
        <function-ref name="clr" scoped="" ref="0x7ea40550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7ea35a40" loc="37:/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
      <component-ref qname="OscilloscopeAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7ea35a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7e803368"/>
        <function-ref name="fired" scoped="" ref="0x7ea34768"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ea34d08"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ea34b28"/>
        <function-ref name="getdt" scoped="" ref="0x7e803728"/>
        <function-ref name="gett0" scoped="" ref="0x7e803548"/>
        <function-ref name="isRunning" scoped="" ref="0x7ea34948"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ea34088"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7e803048"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ea34308"/>
        <function-ref name="stop" scoped="" ref="0x7ea34588"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7ea222c0" loc="38:/opt/tinyos-2.x/tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7ea222c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ea21bf0"/>
        <function-ref name="fired" scoped="" ref="0x7ea21010"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ea215b0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ea213d0"/>
        <function-ref name="getdt" scoped="" ref="0x7ea20010"/>
        <function-ref name="gett0" scoped="" ref="0x7ea21dd0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ea211f0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ea228e8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ea218d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ea22b68"/>
        <function-ref name="stop" scoped="" ref="0x7ea22de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7ea12b30" loc="35:/opt/tinyos-2.x/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7ea12b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ea104c8"/>
        <function-ref name="fired" scoped="" ref="0x7ea118c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ea11e60"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ea11c80"/>
        <function-ref name="getdt" scoped="" ref="0x7ea10888"/>
        <function-ref name="gett0" scoped="" ref="0x7ea106a8"/>
        <function-ref name="isRunning" scoped="" ref="0x7ea11aa0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ea111e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ea101a8"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ea11460"/>
        <function-ref name="stop" scoped="" ref="0x7ea116e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7ea01338" loc="36:/opt/tinyos-2.x/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7ea01338"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ea01980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ea12498" loc="34:/opt/tinyos-2.x/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7ea12498"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ea12670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x7e9d6c58" loc="26:/opt/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x7e9d6c58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7e9e23f0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7e9e27f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7e9e25f0"/>
        <function-ref name="overflow" scoped="" ref="0x7e9e29f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7e9f5268" loc="24:/opt/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7e9f5268"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7e9f5440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x7e9e5e68" loc="25:/opt/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x7e9e5e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7e9f21e8"/>
        <function-ref name="fired" scoped="" ref="0x7e9f3a80"/>
        <function-ref name="startAt" scoped="" ref="0x7e9f3e80"/>
        <function-ref name="isRunning" scoped="" ref="0x7e9f3c80"/>
        <function-ref name="getAlarm" scoped="" ref="0x7e9f23e8"/>
        <function-ref name="start" scoped="" ref="0x7e9f35e0"/>
        <function-ref name="stop" scoped="" ref="0x7e9f3880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7e9b17d8" loc="43:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7e9b17d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x7e9b19b0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7e9b1a90"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7e9b1b70"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7e9b1c50"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7e9b1d30"/>
        <function-ref name="setControl" scoped="" ref="0x7e9b1e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7e9d2128" loc="40:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7e9d2128"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f2500e0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f2500e0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7e9d2300"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7e9a4ca8" loc="44:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7e9a4ca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7e9a6010"/>
        <function-ref name="fired" scoped="" ref="0x7e9b07a8"/>
        <function-ref name="get" scoped="" ref="0x7e9b0308"/>
        <function-ref name="reset" scoped="" ref="0x7e9b09a8"/>
        <function-ref name="isOn" scoped="" ref="0x7e9a6210"/>
        <function-ref name="set" scoped="" ref="0x7e9b0508"/>
        <function-ref name="start" scoped="" ref="0x7e9b0ba8"/>
        <function-ref name="stop" scoped="" ref="0x7e9b0da8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7e9c6010" loc="42:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7e9c6010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7e9c5728"/>
        <function-ref name="test" scoped="" ref="0x7e9c5328"/>
        <function-ref name="get" scoped="" ref="0x7e9c6658"/>
        <function-ref name="setScale" scoped="" ref="0x7e9c5928"/>
        <function-ref name="getScale" scoped="" ref="0x7e9c5bc8"/>
        <function-ref name="reset" scoped="" ref="0x7e9c6cf8"/>
        <function-ref name="overflow" scoped="" ref="0x7e9c6af8"/>
        <function-ref name="isOn" scoped="" ref="0x7e9c5528"/>
        <function-ref name="set" scoped="" ref="0x7e9c6858"/>
        <function-ref name="start" scoped="" ref="0x7e9c6ef8"/>
        <function-ref name="stop" scoped="" ref="0x7e9c5128"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7e954090" loc="37:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="AlarmCounterMilliP.MilliInit"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7e954090"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f2500e0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f2500e0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7e954268"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7e954478" loc="38:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="AlarmCounterMilliP.MilliInit"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7e954478"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7e944c10"/>
        <function-ref name="test" scoped="" ref="0x7e944810"/>
        <function-ref name="get" scoped="" ref="0x7e954ac0"/>
        <function-ref name="setScale" scoped="" ref="0x7e944e10"/>
        <function-ref name="getScale" scoped="" ref="0x7e9430d8"/>
        <function-ref name="reset" scoped="" ref="0x7e944210"/>
        <function-ref name="overflow" scoped="" ref="0x7e944010"/>
        <function-ref name="isOn" scoped="" ref="0x7e944a10"/>
        <function-ref name="set" scoped="" ref="0x7e954cc0"/>
        <function-ref name="start" scoped="" ref="0x7e944410"/>
        <function-ref name="stop" scoped="" ref="0x7e944610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7e941ad8" loc="46:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="AlarmCounterMilliP.MilliAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7e941ad8"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0x7f251f28"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0x7f251f28"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7e940ee8"/>
        <function-ref name="fired" scoped="" ref="0x7e9407a8"/>
        <function-ref name="startAt" scoped="" ref="0x7e940ba8"/>
        <function-ref name="isRunning" scoped="" ref="0x7e9409a8"/>
        <function-ref name="getAlarm" scoped="" ref="0x7e9140f8"/>
        <function-ref name="start" scoped="" ref="0x7e940308"/>
        <function-ref name="stop" scoped="" ref="0x7e9405a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Compare" ref="0x7e912140" loc="49:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="AlarmCounterMilliP.MilliAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Compare" scoped="" ref="0x7e912140"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7e910448"/>
        <function-ref name="fired" scoped="" ref="0x7e912c28"/>
        <function-ref name="get" scoped="" ref="0x7e912788"/>
        <function-ref name="reset" scoped="" ref="0x7e912e28"/>
        <function-ref name="isOn" scoped="" ref="0x7e910648"/>
        <function-ref name="set" scoped="" ref="0x7e912988"/>
        <function-ref name="start" scoped="" ref="0x7e910048"/>
        <function-ref name="stop" scoped="" ref="0x7e910248"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Timer" ref="0x7e914340" loc="48:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="AlarmCounterMilliP.MilliAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Timer" scoped="" ref="0x7e914340"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7e913a48"/>
        <function-ref name="test" scoped="" ref="0x7e913648"/>
        <function-ref name="get" scoped="" ref="0x7e914988"/>
        <function-ref name="setScale" scoped="" ref="0x7e913c48"/>
        <function-ref name="getScale" scoped="" ref="0x7e913ee8"/>
        <function-ref name="reset" scoped="" ref="0x7e913048"/>
        <function-ref name="overflow" scoped="" ref="0x7e914e28"/>
        <function-ref name="isOn" scoped="" ref="0x7e913848"/>
        <function-ref name="set" scoped="" ref="0x7e914b88"/>
        <function-ref name="start" scoped="" ref="0x7e913248"/>
        <function-ref name="stop" scoped="" ref="0x7e913448"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7e9057b0" loc="36:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="AlarmCounterMilliP.MilliCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7e9057b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7e905f00"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7e8f3328"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7e8f3128"/>
        <function-ref name="overflow" scoped="" ref="0x7e8f3528"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7e8f3790" loc="37:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="AlarmCounterMilliP.MilliCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7e8f3790"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7e8f2eb0"/>
        <function-ref name="test" scoped="" ref="0x7e8f2ab0"/>
        <function-ref name="get" scoped="" ref="0x7e8f3dd8"/>
        <function-ref name="setScale" scoped="" ref="0x7e8f00d8"/>
        <function-ref name="getScale" scoped="" ref="0x7e8f0378"/>
        <function-ref name="reset" scoped="" ref="0x7e8f24b0"/>
        <function-ref name="overflow" scoped="" ref="0x7e8f22b0"/>
        <function-ref name="isOn" scoped="" ref="0x7e8f2cb0"/>
        <function-ref name="set" scoped="" ref="0x7e8f2010"/>
        <function-ref name="start" scoped="" ref="0x7e8f26b0"/>
        <function-ref name="stop" scoped="" ref="0x7e8f28b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7e8a3010" loc="61:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmCounterC.nc">
      <component-ref qname="AlarmCounterMilliP.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7e8a3010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7e8a2350"/>
        <function-ref name="fired" scoped="" ref="0x7e8a3c00"/>
        <function-ref name="startAt" scoped="" ref="0x7e8a2010"/>
        <function-ref name="isRunning" scoped="" ref="0x7e8a3e00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7e8a2550"/>
        <function-ref name="start" scoped="" ref="0x7e8a3760"/>
        <function-ref name="stop" scoped="" ref="0x7e8a3a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7e8a0908" loc="63:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmCounterC.nc">
      <component-ref qname="AlarmCounterMilliP.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7e8a0908"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7e898068"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7e898468"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7e898268"/>
        <function-ref name="overflow" scoped="" ref="0x7e898668"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7e8a2848" loc="62:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmCounterC.nc">
      <component-ref qname="AlarmCounterMilliP.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7e8a2848"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7e8a0010"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7e8a0410"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7e8a0210"/>
        <function-ref name="overflow" scoped="" ref="0x7e8a0610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7e898960" loc="64:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmCounterC.nc">
      <component-ref qname="AlarmCounterMilliP.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmFrom" scoped="" ref="0x7e898960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7e896cb8"/>
        <function-ref name="fired" scoped="" ref="0x7e896578"/>
        <function-ref name="startAt" scoped="" ref="0x7e896978"/>
        <function-ref name="isRunning" scoped="" ref="0x7e896778"/>
        <function-ref name="getAlarm" scoped="" ref="0x7e896eb8"/>
        <function-ref name="start" scoped="" ref="0x7e8960d8"/>
        <function-ref name="stop" scoped="" ref="0x7e896378"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7e8632d0" loc="63:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x7e8632d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7e8634a8"/>
        <function-ref name="runTask" scoped="" ref="0x7e863588"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7e866b60" loc="38:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7e866b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7e865ee8"/>
        <function-ref name="fired" scoped="" ref="0x7e8657a8"/>
        <function-ref name="startAt" scoped="" ref="0x7e865ba8"/>
        <function-ref name="isRunning" scoped="" ref="0x7e8659a8"/>
        <function-ref name="getAlarm" scoped="" ref="0x7e8630f8"/>
        <function-ref name="start" scoped="" ref="0x7e865308"/>
        <function-ref name="stop" scoped="" ref="0x7e8655a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7e891b60" loc="37:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7e891b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7e8664c8"/>
        <function-ref name="fired" scoped="" ref="0x7e8678c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7e867e60"/>
        <function-ref name="isOneShot" scoped="" ref="0x7e867c80"/>
        <function-ref name="getdt" scoped="" ref="0x7e866888"/>
        <function-ref name="gett0" scoped="" ref="0x7e8666a8"/>
        <function-ref name="isRunning" scoped="" ref="0x7e867aa0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7e8671e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7e8661a8"/>
        <function-ref name="startOneShot" scoped="" ref="0x7e867460"/>
        <function-ref name="stop" scoped="" ref="0x7e8676e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7e816c90" loc="60:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x7e816c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7e816e68"/>
        <function-ref name="runTask" scoped="" ref="0x7e815010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7e820dc0" loc="38:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x7e820dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7e8166f8"/>
        <function-ref name="fired" scoped="" ref="0x7e818ae8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7e8160b8"/>
        <function-ref name="isOneShot" scoped="" ref="0x7e818ea8"/>
        <function-ref name="getdt" scoped="" ref="0x7e816ab8"/>
        <function-ref name="gett0" scoped="" ref="0x7e8168d8"/>
        <function-ref name="isRunning" scoped="" ref="0x7e818cc8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7e818408"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7e8163d8"/>
        <function-ref name="startOneShot" scoped="" ref="0x7e818688"/>
        <function-ref name="stop" scoped="" ref="0x7e818908"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7e860da8" loc="37:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7e860da8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7e820768"/>
        <function-ref name="fired" scoped="" ref="0x7e858b00"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7e820108"/>
        <function-ref name="isOneShot" scoped="" ref="0x7e858ee0"/>
        <function-ref name="getdt" scoped="" ref="0x7e820b48"/>
        <function-ref name="gett0" scoped="" ref="0x7e820958"/>
        <function-ref name="isRunning" scoped="" ref="0x7e858cf0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7e8583f0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7e820438"/>
        <function-ref name="startOneShot" scoped="" ref="0x7e858680"/>
        <function-ref name="stop" scoped="" ref="0x7e858910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7e8134c8" loc="37:/opt/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7e8134c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7e813b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7e813de8" loc="38:/opt/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7e813de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7e805570"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7e805970"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7e805770"/>
        <function-ref name="overflow" scoped="" ref="0x7e805b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Humidity" ref="0x7e5f9bc0" loc="47:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11C.nc">
      <component-ref qname="OscilloscopeAppC.Sensor"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Humidity" scoped="" ref="0x7e5f9bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7e5f8218"/>
        <function-ref name="readDone" scoped="" ref="0x7e5f83f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Temperature" ref="0x7e5f9010" loc="46:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11C.nc">
      <component-ref qname="OscilloscopeAppC.Sensor"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Temperature" scoped="" ref="0x7e5f9010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7e5f9638"/>
        <function-ref name="readDone" scoped="" ref="0x7e5f9818"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Sht11Hum" ref="0x7e01e080" loc="50:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="OscilloscopeAppC.Sensor.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Sht11Hum" scoped="" ref="0x7e01e080"/></type-interface>
      <instance>
        <interfacedef-ref qname="SensirionSht11"/>
      </instance>
      <interface-functions>
        <function-ref name="measureHumidityDone" scoped="" ref="0x7e01e258"/>
        <function-ref name="readStatusReg" scoped="" ref="0x7e01e338"/>
        <function-ref name="measureHumidity" scoped="" ref="0x7e01e418"/>
        <function-ref name="measureTemperature" scoped="" ref="0x7e01e4f8"/>
        <function-ref name="writeStatusReg" scoped="" ref="0x7e01e5d8"/>
        <function-ref name="reset" scoped="" ref="0x7e01e6b8"/>
        <function-ref name="writeStatusRegDone" scoped="" ref="0x7e01e798"/>
        <function-ref name="readStatusRegDone" scoped="" ref="0x7e01e878"/>
        <function-ref name="resetDone" scoped="" ref="0x7e01e958"/>
        <function-ref name="measureTemperatureDone" scoped="" ref="0x7e01ea38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Humidity" ref="0x7e022bc0" loc="45:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="OscilloscopeAppC.Sensor.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Humidity" scoped="" ref="0x7e022bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7e020218"/>
        <function-ref name="readDone" scoped="" ref="0x7e0203f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TempResource" ref="0x7e020710" loc="47:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="OscilloscopeAppC.Sensor.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TempResource" scoped="" ref="0x7e020710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7e0208e8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7e0209c8"/>
        <function-ref name="request" scoped="" ref="0x7e020aa8"/>
        <function-ref name="granted" scoped="" ref="0x7e020b88"/>
        <function-ref name="isOwner" scoped="" ref="0x7e020c68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Sht11Temp" ref="0x7e01f510" loc="49:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="OscilloscopeAppC.Sensor.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Sht11Temp" scoped="" ref="0x7e01f510"/></type-interface>
      <instance>
        <interfacedef-ref qname="SensirionSht11"/>
      </instance>
      <interface-functions>
        <function-ref name="measureHumidityDone" scoped="" ref="0x7e01f6e8"/>
        <function-ref name="readStatusReg" scoped="" ref="0x7e01f7c8"/>
        <function-ref name="measureHumidity" scoped="" ref="0x7e01f8a8"/>
        <function-ref name="measureTemperature" scoped="" ref="0x7e01f988"/>
        <function-ref name="writeStatusReg" scoped="" ref="0x7e01fa68"/>
        <function-ref name="reset" scoped="" ref="0x7e01fb48"/>
        <function-ref name="writeStatusRegDone" scoped="" ref="0x7e01fc28"/>
        <function-ref name="readStatusRegDone" scoped="" ref="0x7e01fd08"/>
        <function-ref name="resetDone" scoped="" ref="0x7e01fde8"/>
        <function-ref name="measureTemperatureDone" scoped="" ref="0x7e01fec8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HumResource" ref="0x7e020de8" loc="48:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="OscilloscopeAppC.Sensor.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HumResource" scoped="" ref="0x7e020de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7e01f010"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7e01f0f0"/>
        <function-ref name="request" scoped="" ref="0x7e01f1d0"/>
        <function-ref name="granted" scoped="" ref="0x7e01f2b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7e01f390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Temperature" ref="0x7e022010" loc="44:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="OscilloscopeAppC.Sensor.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Temperature" scoped="" ref="0x7e022010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7e022638"/>
        <function-ref name="readDone" scoped="" ref="0x7e022818"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SensirionSht11" ref="0x7e7a84f8" loc="45:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HalSensirionSht11C.nc">
      <component-ref qname="HalSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SensirionSht11" scoped="" ref="0x7e7a84f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SensirionSht11"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="measureHumidityDone" scoped="" ref="0x7e7a86d0"/>
        <function-ref name="readStatusReg" scoped="" ref="0x7e7a87b0"/>
        <function-ref name="measureHumidity" scoped="" ref="0x7e7a8890"/>
        <function-ref name="measureTemperature" scoped="" ref="0x7e7a8970"/>
        <function-ref name="writeStatusReg" scoped="" ref="0x7e7a8a50"/>
        <function-ref name="reset" scoped="" ref="0x7e7a8b30"/>
        <function-ref name="writeStatusRegDone" scoped="" ref="0x7e7a8c10"/>
        <function-ref name="readStatusRegDone" scoped="" ref="0x7e7a8cf0"/>
        <function-ref name="resetDone" scoped="" ref="0x7e7a8dd0"/>
        <function-ref name="measureTemperatureDone" scoped="" ref="0x7e7a8eb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7e7a9b88" loc="44:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HalSensirionSht11C.nc">
      <component-ref qname="HalSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7e7a9b88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7e7a9d60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7e7a9e40"/>
        <function-ref name="request" scoped="" ref="0x7e7a9f20"/>
        <function-ref name="granted" scoped="" ref="0x7e7a8018"/>
        <function-ref name="isOwner" scoped="" ref="0x7e7a80f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptDATA" ref="0x7e738010" loc="58:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="InterruptDATA" scoped="" ref="0x7e738010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e7381e8"/>
        <function-ref name="disable" scoped="" ref="0x7e7382c8"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7e7383a8"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7e738488"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readSensor" ref="0x7e7346a8" loc="102:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="readSensor" scoped="" ref="0x7e7346a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7e734880"/>
        <function-ref name="runTask" scoped="" ref="0x7e734960"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalStatusDone" ref="0x7e734270" loc="103:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalStatusDone" scoped="" ref="0x7e734270"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7e734448"/>
        <function-ref name="runTask" scoped="" ref="0x7e734528"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CLOCK" ref="0x7e7395f0" loc="57:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CLOCK" scoped="" ref="0x7e7395f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e7397c8"/>
        <function-ref name="isInput" scoped="" ref="0x7e7398a8"/>
        <function-ref name="toggle" scoped="" ref="0x7e739988"/>
        <function-ref name="isOutput" scoped="" ref="0x7e739a68"/>
        <function-ref name="get" scoped="" ref="0x7e739b48"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e739c28"/>
        <function-ref name="set" scoped="" ref="0x7e739d08"/>
        <function-ref name="clr" scoped="" ref="0x7e739de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SensirionSht11" ref="0x7e740068" loc="54:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SensirionSht11" scoped="" ref="0x7e740068"/></type-interface>
      <instance>
        <interfacedef-ref qname="SensirionSht11"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="measureHumidityDone" scoped="" ref="0x7e740250"/>
        <function-ref name="readStatusReg" scoped="" ref="0x7e740330"/>
        <function-ref name="measureHumidity" scoped="" ref="0x7e740410"/>
        <function-ref name="measureTemperature" scoped="" ref="0x7e7404f0"/>
        <function-ref name="writeStatusReg" scoped="" ref="0x7e7405d0"/>
        <function-ref name="reset" scoped="" ref="0x7e7406b0"/>
        <function-ref name="writeStatusRegDone" scoped="" ref="0x7e740790"/>
        <function-ref name="readStatusRegDone" scoped="" ref="0x7e740870"/>
        <function-ref name="resetDone" scoped="" ref="0x7e740950"/>
        <function-ref name="measureTemperatureDone" scoped="" ref="0x7e740a30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="DATA" ref="0x7e740bb0" loc="56:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="DATA" scoped="" ref="0x7e740bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e740d88"/>
        <function-ref name="isInput" scoped="" ref="0x7e740e68"/>
        <function-ref name="toggle" scoped="" ref="0x7e739010"/>
        <function-ref name="isOutput" scoped="" ref="0x7e7390f0"/>
        <function-ref name="get" scoped="" ref="0x7e7391d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e7392b0"/>
        <function-ref name="set" scoped="" ref="0x7e739390"/>
        <function-ref name="clr" scoped="" ref="0x7e739470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7e735588" loc="62:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7e735588"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7e735760"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7e735840"/>
        <function-ref name="led1On" scoped="" ref="0x7e735920"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7e735a00"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7e735ae0"/>
        <function-ref name="get" scoped="" ref="0x7e735bc0"/>
        <function-ref name="led1Off" scoped="" ref="0x7e735ca0"/>
        <function-ref name="led2On" scoped="" ref="0x7e7340f0"/>
        <function-ref name="set" scoped="" ref="0x7e735e60"/>
        <function-ref name="led2Off" scoped="" ref="0x7e735d80"/>
        <function-ref name="led0On" scoped="" ref="0x7e734010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7e738678" loc="60:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7e738678"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7e735010"/>
        <function-ref name="fired" scoped="" ref="0x7e736398"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7e736938"/>
        <function-ref name="isOneShot" scoped="" ref="0x7e736758"/>
        <function-ref name="getdt" scoped="" ref="0x7e7353d0"/>
        <function-ref name="gett0" scoped="" ref="0x7e7351f0"/>
        <function-ref name="isRunning" scoped="" ref="0x7e736578"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7e738ca0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7e736c58"/>
        <function-ref name="startOneShot" scoped="" ref="0x7e738f20"/>
        <function-ref name="stop" scoped="" ref="0x7e7361b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptDATA" ref="0x7e726b40" loc="47:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11C.nc">
      <component-ref qname="HplSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="InterruptDATA" scoped="" ref="0x7e726b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e726d18"/>
        <function-ref name="disable" scoped="" ref="0x7e726df8"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7e726ed8"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7e725010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCK" ref="0x7e7261a8" loc="46:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11C.nc">
      <component-ref qname="HplSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SCK" scoped="" ref="0x7e7261a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e726380"/>
        <function-ref name="isInput" scoped="" ref="0x7e726460"/>
        <function-ref name="toggle" scoped="" ref="0x7e726540"/>
        <function-ref name="isOutput" scoped="" ref="0x7e726620"/>
        <function-ref name="get" scoped="" ref="0x7e726700"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e7267e0"/>
        <function-ref name="set" scoped="" ref="0x7e7268c0"/>
        <function-ref name="clr" scoped="" ref="0x7e7269a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DATA" ref="0x7e7287f0" loc="45:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11C.nc">
      <component-ref qname="HplSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="DATA" scoped="" ref="0x7e7287f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e7289c8"/>
        <function-ref name="isInput" scoped="" ref="0x7e728aa8"/>
        <function-ref name="toggle" scoped="" ref="0x7e728b88"/>
        <function-ref name="isOutput" scoped="" ref="0x7e728c68"/>
        <function-ref name="get" scoped="" ref="0x7e728d48"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e728e28"/>
        <function-ref name="set" scoped="" ref="0x7e728f08"/>
        <function-ref name="clr" scoped="" ref="0x7e726010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7e728100" loc="44:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11C.nc">
      <component-ref qname="HplSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7e728100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7e7282d8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7e7283b8"/>
        <function-ref name="request" scoped="" ref="0x7e728498"/>
        <function-ref name="granted" scoped="" ref="0x7e728578"/>
        <function-ref name="isOwner" scoped="" ref="0x7e728658"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7e721c70" loc="43:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11P.nc">
      <component-ref qname="HplSensirionSht11P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7e721c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7e721e48"/>
        <function-ref name="stopDone" scoped="" ref="0x7e721f28"/>
        <function-ref name="start" scoped="" ref="0x7e720018"/>
        <function-ref name="stop" scoped="" ref="0x7e7200f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopTask" ref="0x7e717908" loc="49:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11P.nc">
      <component-ref qname="HplSensirionSht11P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopTask" scoped="" ref="0x7e717908"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7e717ae0"/>
        <function-ref name="runTask" scoped="" ref="0x7e717bc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SCK" ref="0x7e718b90" loc="46:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11P.nc">
      <component-ref qname="HplSensirionSht11P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SCK" scoped="" ref="0x7e718b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e718d68"/>
        <function-ref name="isInput" scoped="" ref="0x7e718e48"/>
        <function-ref name="toggle" scoped="" ref="0x7e718f28"/>
        <function-ref name="isOutput" scoped="" ref="0x7e717018"/>
        <function-ref name="get" scoped="" ref="0x7e7170f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e7171d8"/>
        <function-ref name="set" scoped="" ref="0x7e7172b8"/>
        <function-ref name="clr" scoped="" ref="0x7e717398"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="DATA" ref="0x7e718200" loc="45:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11P.nc">
      <component-ref qname="HplSensirionSht11P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="DATA" scoped="" ref="0x7e718200"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7e7183d8"/>
        <function-ref name="isInput" scoped="" ref="0x7e7184b8"/>
        <function-ref name="toggle" scoped="" ref="0x7e718598"/>
        <function-ref name="isOutput" scoped="" ref="0x7e718678"/>
        <function-ref name="get" scoped="" ref="0x7e718758"/>
        <function-ref name="makeOutput" scoped="" ref="0x7e718838"/>
        <function-ref name="set" scoped="" ref="0x7e718918"/>
        <function-ref name="clr" scoped="" ref="0x7e7189f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7e7202f8" loc="44:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/HplSensirionSht11P.nc">
      <component-ref qname="HplSensirionSht11P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7e7202f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7e719bf0"/>
        <function-ref name="fired" scoped="" ref="0x7e719010"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7e7195b0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7e7193d0"/>
        <function-ref name="getdt" scoped="" ref="0x7e718010"/>
        <function-ref name="gett0" scoped="" ref="0x7e719dd0"/>
        <function-ref name="isRunning" scoped="" ref="0x7e7191f0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7e720920"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7e7198d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7e720ba0"/>
        <function-ref name="stop" scoped="" ref="0x7e720e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7e722638" loc="37:/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
      <component-ref qname="HplSensirionSht11C.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7e722638"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7e710010"/>
        <function-ref name="fired" scoped="" ref="0x7e711350"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7e7118f0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7e711710"/>
        <function-ref name="getdt" scoped="" ref="0x7e7103d0"/>
        <function-ref name="gett0" scoped="" ref="0x7e7101f0"/>
        <function-ref name="isRunning" scoped="" ref="0x7e711530"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7e722c60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7e711c10"/>
        <function-ref name="startOneShot" scoped="" ref="0x7e722ee0"/>
        <function-ref name="stop" scoped="" ref="0x7e711170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int6" ref="0x7e6f8190" loc="42:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int6" scoped="" ref="0x7e6f8190"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e6f8368"/>
        <function-ref name="fired" scoped="" ref="0x7e6f8448"/>
        <function-ref name="disable" scoped="" ref="0x7e6f8528"/>
        <function-ref name="edge" scoped="" ref="0x7e6f8608"/>
        <function-ref name="enable" scoped="" ref="0x7e6f86e8"/>
        <function-ref name="getValue" scoped="" ref="0x7e6f87c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int1" ref="0x7e6f99c0" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int1" scoped="" ref="0x7e6f99c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e6f9b98"/>
        <function-ref name="fired" scoped="" ref="0x7e6f9c78"/>
        <function-ref name="disable" scoped="" ref="0x7e6f9d58"/>
        <function-ref name="edge" scoped="" ref="0x7e6f9e38"/>
        <function-ref name="enable" scoped="" ref="0x7e6f9f18"/>
        <function-ref name="getValue" scoped="" ref="0x7e703010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int4" ref="0x7e702190" loc="40:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int4" scoped="" ref="0x7e702190"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e702368"/>
        <function-ref name="fired" scoped="" ref="0x7e702448"/>
        <function-ref name="disable" scoped="" ref="0x7e702528"/>
        <function-ref name="edge" scoped="" ref="0x7e702608"/>
        <function-ref name="enable" scoped="" ref="0x7e7026e8"/>
        <function-ref name="getValue" scoped="" ref="0x7e7027c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int7" ref="0x7e6f8948" loc="43:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int7" scoped="" ref="0x7e6f8948"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e6f8b20"/>
        <function-ref name="fired" scoped="" ref="0x7e6f8c00"/>
        <function-ref name="disable" scoped="" ref="0x7e6f8ce0"/>
        <function-ref name="edge" scoped="" ref="0x7e6f8dc0"/>
        <function-ref name="enable" scoped="" ref="0x7e6f8ea0"/>
        <function-ref name="getValue" scoped="" ref="0x7e6f7010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int2" ref="0x7e703190" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int2" scoped="" ref="0x7e703190"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e703368"/>
        <function-ref name="fired" scoped="" ref="0x7e703448"/>
        <function-ref name="disable" scoped="" ref="0x7e703528"/>
        <function-ref name="edge" scoped="" ref="0x7e703608"/>
        <function-ref name="enable" scoped="" ref="0x7e7036e8"/>
        <function-ref name="getValue" scoped="" ref="0x7e7037c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int5" ref="0x7e702948" loc="41:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int5" scoped="" ref="0x7e702948"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e702b20"/>
        <function-ref name="fired" scoped="" ref="0x7e702c00"/>
        <function-ref name="disable" scoped="" ref="0x7e702ce0"/>
        <function-ref name="edge" scoped="" ref="0x7e702dc0"/>
        <function-ref name="enable" scoped="" ref="0x7e702ea0"/>
        <function-ref name="getValue" scoped="" ref="0x7e6f8010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int0" ref="0x7e6f9208" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int0" scoped="" ref="0x7e6f9208"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e6f93e0"/>
        <function-ref name="fired" scoped="" ref="0x7e6f94c0"/>
        <function-ref name="disable" scoped="" ref="0x7e6f95a0"/>
        <function-ref name="edge" scoped="" ref="0x7e6f9680"/>
        <function-ref name="enable" scoped="" ref="0x7e6f9760"/>
        <function-ref name="getValue" scoped="" ref="0x7e6f9840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int3" ref="0x7e703948" loc="39:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int3" scoped="" ref="0x7e703948"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e703b20"/>
        <function-ref name="fired" scoped="" ref="0x7e703c00"/>
        <function-ref name="disable" scoped="" ref="0x7e703ce0"/>
        <function-ref name="edge" scoped="" ref="0x7e703dc0"/>
        <function-ref name="enable" scoped="" ref="0x7e703ea0"/>
        <function-ref name="getValue" scoped="" ref="0x7e702010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig6" ref="0x7e6f1700" loc="40:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig6" scoped="" ref="0x7e6f1700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e6f18d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig1" ref="0x7e6ea538" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig1" scoped="" ref="0x7e6ea538"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e6ea710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig4" ref="0x7e6f1010" loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig4" scoped="" ref="0x7e6f1010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e6f11e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig7" ref="0x7e6f1a78" loc="41:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig7" scoped="" ref="0x7e6f1a78"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e6f1c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig2" ref="0x7e6ea8b0" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig2" scoped="" ref="0x7e6ea8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e6eaa88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig5" ref="0x7e6f1388" loc="39:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig5" scoped="" ref="0x7e6f1388"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e6f1560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig0" ref="0x7e6ea1c0" loc="34:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig0" scoped="" ref="0x7e6ea1c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e6ea398"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig3" ref="0x7e6eac28" loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig3" scoped="" ref="0x7e6eac28"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e6eae00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0x7e6d7d10" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0x7e6d7d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e6d7ee8"/>
        <function-ref name="fired" scoped="" ref="0x7e6d6010"/>
        <function-ref name="disable" scoped="" ref="0x7e6d60f0"/>
        <function-ref name="edge" scoped="" ref="0x7e6d61d0"/>
        <function-ref name="enable" scoped="" ref="0x7e6d62b0"/>
        <function-ref name="getValue" scoped="" ref="0x7e6d6390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0x7e6d6510" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0x7e6d6510"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e6d66e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0x7e6c7ce8" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0x7e6c7ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e6c7ec0"/>
        <function-ref name="fired" scoped="" ref="0x7e6c5010"/>
        <function-ref name="disable" scoped="" ref="0x7e6c50f0"/>
        <function-ref name="edge" scoped="" ref="0x7e6c51d0"/>
        <function-ref name="enable" scoped="" ref="0x7e6c52b0"/>
        <function-ref name="getValue" scoped="" ref="0x7e6c5390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0x7e6c5510" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0x7e6c5510"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e6c56e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0x7e6c4ce8" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0x7e6c4ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e6c4ec0"/>
        <function-ref name="fired" scoped="" ref="0x7e6c3010"/>
        <function-ref name="disable" scoped="" ref="0x7e6c30f0"/>
        <function-ref name="edge" scoped="" ref="0x7e6c31d0"/>
        <function-ref name="enable" scoped="" ref="0x7e6c32b0"/>
        <function-ref name="getValue" scoped="" ref="0x7e6c3390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0x7e6c3510" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0x7e6c3510"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e6c36e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0x7e6c2ce8" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0x7e6c2ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e6c2ec0"/>
        <function-ref name="fired" scoped="" ref="0x7e6c1010"/>
        <function-ref name="disable" scoped="" ref="0x7e6c10f0"/>
        <function-ref name="edge" scoped="" ref="0x7e6c11d0"/>
        <function-ref name="enable" scoped="" ref="0x7e6c12b0"/>
        <function-ref name="getValue" scoped="" ref="0x7e6c1390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0x7e6c1510" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0x7e6c1510"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e6c16e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0x7e6c0e00" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0x7e6c0e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e6ba010"/>
        <function-ref name="fired" scoped="" ref="0x7e6ba0f0"/>
        <function-ref name="disable" scoped="" ref="0x7e6ba1d0"/>
        <function-ref name="edge" scoped="" ref="0x7e6ba2b0"/>
        <function-ref name="enable" scoped="" ref="0x7e6ba390"/>
        <function-ref name="getValue" scoped="" ref="0x7e6ba470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0x7e6ba5f0" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0x7e6ba5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e6ba7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0x7e6b9ec0" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0x7e6b9ec0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e6b70c0"/>
        <function-ref name="fired" scoped="" ref="0x7e6b71a0"/>
        <function-ref name="disable" scoped="" ref="0x7e6b7280"/>
        <function-ref name="edge" scoped="" ref="0x7e6b7360"/>
        <function-ref name="enable" scoped="" ref="0x7e6b7440"/>
        <function-ref name="getValue" scoped="" ref="0x7e6b7520"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0x7e6b76a0" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0x7e6b76a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e6b7878"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0x7e6b5010" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0x7e6b5010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e6b51e8"/>
        <function-ref name="fired" scoped="" ref="0x7e6b52c8"/>
        <function-ref name="disable" scoped="" ref="0x7e6b53a8"/>
        <function-ref name="edge" scoped="" ref="0x7e6b5488"/>
        <function-ref name="enable" scoped="" ref="0x7e6b5568"/>
        <function-ref name="getValue" scoped="" ref="0x7e6b5648"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0x7e6b57c8" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0x7e6b57c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e6b59a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0x7e6b30b0" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0x7e6b30b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e6b3288"/>
        <function-ref name="fired" scoped="" ref="0x7e6b3368"/>
        <function-ref name="disable" scoped="" ref="0x7e6b3448"/>
        <function-ref name="edge" scoped="" ref="0x7e6b3528"/>
        <function-ref name="enable" scoped="" ref="0x7e6b3608"/>
        <function-ref name="getValue" scoped="" ref="0x7e6b36e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0x7e6b3868" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0x7e6b3868"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e6b3a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Interrupt" ref="0x7e6a97e8" loc="9:/opt/tinyos-2.x/tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="HplSensirionSht11C.InterruptDATAC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Interrupt" scoped="" ref="0x7e6a97e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e6a99c0"/>
        <function-ref name="fired" scoped="" ref="0x7e6a9aa0"/>
        <function-ref name="disable" scoped="" ref="0x7e6a9b80"/>
        <function-ref name="edge" scoped="" ref="0x7e6a9c60"/>
        <function-ref name="enable" scoped="" ref="0x7e6a9d40"/>
        <function-ref name="getValue" scoped="" ref="0x7e6a9e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7e6a91f0" loc="8:/opt/tinyos-2.x/tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="HplSensirionSht11C.InterruptDATAC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Interrupt" scoped="" ref="0x7e6a91f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7e6a93c8"/>
        <function-ref name="disable" scoped="" ref="0x7e6a94a8"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7e6a9588"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7e6a9668"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7e6341e8" loc="82:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7e6341e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7e6343d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7e6344b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7e633208" loc="86:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7e633208"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7e6333f0"/>
        <function-ref name="configure" scoped="" ref="0x7e6334d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceController" ref="0x7e6345f0" loc="83:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceController" scoped="" ref="0x7e6345f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceController"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7e6347c8"/>
        <function-ref name="requested" scoped="" ref="0x7e6348a8"/>
        <function-ref name="granted" scoped="" ref="0x7e634988"/>
        <function-ref name="isOwner" scoped="" ref="0x7e634a68"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7e634b48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7e6999e8" loc="81:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7e6999e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7e699bd0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7e699cb0"/>
        <function-ref name="request" scoped="" ref="0x7e699d90"/>
        <function-ref name="granted" scoped="" ref="0x7e699e70"/>
        <function-ref name="isOwner" scoped="" ref="0x7e634010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7e634c88" loc="84:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7e634c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7e634e60"/>
        <function-ref name="userId" scoped="" ref="0x7e633010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7df94a30" loc="34:/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7df94a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7df94c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7df94d68" loc="35:/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x7df94d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7df91010"/>
        <function-ref name="isEmpty" scoped="" ref="0x7df910f0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7df911d0"/>
        <function-ref name="dequeue" scoped="" ref="0x7df912b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7df90750" loc="54:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7df90750"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7df90938"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7df90a18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7df846f0" loc="59:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7df846f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7df848d8"/>
        <function-ref name="configure" scoped="" ref="0x7df849b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7df84b18" loc="60:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7df84b18"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7df84cf0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7df84dd0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7df84eb0"/>
        <function-ref name="dequeue" scoped="" ref="0x7df83010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceController" ref="0x7df90b58" loc="55:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceController" scoped="" ref="0x7df90b58"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceController"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7df90d30"/>
        <function-ref name="requested" scoped="" ref="0x7df90e10"/>
        <function-ref name="granted" scoped="" ref="0x7df90ef0"/>
        <function-ref name="isOwner" scoped="" ref="0x7df84010"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7df840f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7df83150" loc="61:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7df83150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7df83328"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7df83408"/>
        <function-ref name="led1On" scoped="" ref="0x7df834e8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7df835c8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7df836a8"/>
        <function-ref name="get" scoped="" ref="0x7df83788"/>
        <function-ref name="led1Off" scoped="" ref="0x7df83868"/>
        <function-ref name="led0On" scoped="" ref="0x7df83be8"/>
        <function-ref name="set" scoped="" ref="0x7df83a28"/>
        <function-ref name="led2On" scoped="" ref="0x7df83948"/>
        <function-ref name="led2Off" scoped="" ref="0x7df83b08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7df90010" loc="53:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7df90010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7df901f8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7df902d8"/>
        <function-ref name="request" scoped="" ref="0x7df903b8"/>
        <function-ref name="granted" scoped="" ref="0x7df90498"/>
        <function-ref name="isOwner" scoped="" ref="0x7df90578"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7df84230" loc="56:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7df84230"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7df84408"/>
        <function-ref name="userId" scoped="" ref="0x7df844e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7df83d68" loc="73:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x7df83d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7df82010"/>
        <function-ref name="runTask" scoped="" ref="0x7df820f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControl" ref="0x7e630538" loc="59:/opt/tinyos-2.x/tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7e630538"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7e630710"/>
        <function-ref name="stopDone" scoped="" ref="0x7e6307f0"/>
        <function-ref name="start" scoped="" ref="0x7e6308d0"/>
        <function-ref name="stop" scoped="" ref="0x7e6309b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7e630af0" loc="61:/opt/tinyos-2.x/tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7e630af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7e630cc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceController" ref="0x7e630e08" loc="62:/opt/tinyos-2.x/tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceController" scoped="" ref="0x7e630e08"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceController"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7e62b010"/>
        <function-ref name="requested" scoped="" ref="0x7e62b0f0"/>
        <function-ref name="granted" scoped="" ref="0x7e62b1d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7e62b2b0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7e62b390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7e62b4d0" loc="63:/opt/tinyos-2.x/tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7e62b4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7e62b6a8"/>
        <function-ref name="userId" scoped="" ref="0x7e62b788"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControl" ref="0x7df61ef8" loc="51:/opt/tinyos-2.x/tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7df61ef8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7df5f0e0"/>
        <function-ref name="stopDone" scoped="" ref="0x7df5f1c0"/>
        <function-ref name="start" scoped="" ref="0x7df5f2a0"/>
        <function-ref name="stop" scoped="" ref="0x7df5f380"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7df5f4c0" loc="53:/opt/tinyos-2.x/tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7df5f4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7df5f698"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopTask" ref="0x7df5e2d0" loc="68:/opt/tinyos-2.x/tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopTask" scoped="" ref="0x7df5e2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7df5e4a8"/>
        <function-ref name="runTask" scoped="" ref="0x7df5e588"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceController" ref="0x7df5f7d8" loc="54:/opt/tinyos-2.x/tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceController" scoped="" ref="0x7df5f7d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceController"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7df5f9b0"/>
        <function-ref name="requested" scoped="" ref="0x7df5fa90"/>
        <function-ref name="granted" scoped="" ref="0x7df5fb70"/>
        <function-ref name="isOwner" scoped="" ref="0x7df5fc50"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7df5fd30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startTask" ref="0x7df5e708" loc="63:/opt/tinyos-2.x/tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startTask" scoped="" ref="0x7df5e708"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7df5e8e0"/>
        <function-ref name="runTask" scoped="" ref="0x7df5e9c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StdControl" ref="0x7df61b00" loc="50:/opt/tinyos-2.x/tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7df61b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7df61cd8"/>
        <function-ref name="stop" scoped="" ref="0x7df61db8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7df5fe70" loc="55:/opt/tinyos-2.x/tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7df5fe70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7df5e070"/>
        <function-ref name="userId" scoped="" ref="0x7df5e150"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7e6030f0" loc="37:/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
      <component-ref qname="HalSensirionSht11C.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7e6030f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120878"/>
            <typename><typedef-ref name="TMilli" ref="0x7f1209f8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7e602a10"/>
        <function-ref name="fired" scoped="" ref="0x7e603df8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7e6023d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7e6021f0"/>
        <function-ref name="getdt" scoped="" ref="0x7e602dd0"/>
        <function-ref name="gett0" scoped="" ref="0x7e602bf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7e602010"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7e603718"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7e6026f0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7e603998"/>
        <function-ref name="stop" scoped="" ref="0x7e603c18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7e5f4bc8" loc="35:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7e5f4bc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7e5f4da0"/>
        <function-ref name="stopDone" scoped="" ref="0x7e5f4e80"/>
        <function-ref name="start" scoped="" ref="0x7e5f3010"/>
        <function-ref name="stop" scoped="" ref="0x7e5f30f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7e5f34c8" loc="36:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7e5f34c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ee52078"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7e5f36a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7e5f3780"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7e5f3860"/>
        <function-ref name="cancel" scoped="" ref="0x7e5f3940"/>
        <function-ref name="sendDone" scoped="" ref="0x7e5f3a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7e5e75d0" loc="38:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7e5e75d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e5e77a8"/>
        <function-ref name="payloadLength" scoped="" ref="0x7e5e7888"/>
        <function-ref name="getPayload" scoped="" ref="0x7e5e7968"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7e5e7a48"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7e5e7b28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7e5f3df8" loc="37:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7e5f3df8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ee52078"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x7e5f1010"/>
        <function-ref name="receive" scoped="" ref="0x7e5f10f0"/>
        <function-ref name="getPayload" scoped="" ref="0x7e5f11d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7e5d79b8" loc="42:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7e5d79b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7e5d7b90"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7e5d7c70"/>
        <function-ref name="led1On" scoped="" ref="0x7e5d7d50"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7e5d7e30"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7e5d7f10"/>
        <function-ref name="get" scoped="" ref="0x7e5da010"/>
        <function-ref name="led1Off" scoped="" ref="0x7e5da0f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7e5da470"/>
        <function-ref name="set" scoped="" ref="0x7e5da1d0"/>
        <function-ref name="led0On" scoped="" ref="0x7e5da2b0"/>
        <function-ref name="led2On" scoped="" ref="0x7e5da390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7e5d74a8" loc="40:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7e5d74a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7e5d7680"/>
        <function-ref name="noAck" scoped="" ref="0x7e5d7760"/>
        <function-ref name="wasAcked" scoped="" ref="0x7e5d7840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7e5db9c8" loc="39:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7e5db9c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7e5dbba0"/>
        <function-ref name="address" scoped="" ref="0x7e5dbc80"/>
        <function-ref name="destination" scoped="" ref="0x7e5dbd60"/>
        <function-ref name="setSource" scoped="" ref="0x7e5dbe40"/>
        <function-ref name="setDestination" scoped="" ref="0x7e5dbf20"/>
        <function-ref name="type" scoped="" ref="0x7e5ea018"/>
        <function-ref name="setType" scoped="" ref="0x7e5ea0f8"/>
        <function-ref name="isForMe" scoped="" ref="0x7e5ea1d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7e594010" loc="43:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7e594010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7e5941e8"/>
        <function-ref name="getPayload" scoped="" ref="0x7e5942c8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7e5943a8"/>
        <function-ref name="cancel" scoped="" ref="0x7e594488"/>
        <function-ref name="sendDone" scoped="" ref="0x7e594568"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7e5946c8" loc="44:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7e5946c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x7e5948a0"/>
        <function-ref name="receive" scoped="" ref="0x7e594980"/>
        <function-ref name="getPayload" scoped="" ref="0x7e594a60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7e5d6e18" loc="36:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7e5d6e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ee52078"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7e5d5050"/>
        <function-ref name="getPayload" scoped="" ref="0x7e5d5130"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7e5d5210"/>
        <function-ref name="cancel" scoped="" ref="0x7e5d52f0"/>
        <function-ref name="sendDone" scoped="" ref="0x7e5d53d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7e5953f0" loc="39:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7e5953f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7e5955c8"/>
        <function-ref name="payloadLength" scoped="" ref="0x7e5956a8"/>
        <function-ref name="getPayload" scoped="" ref="0x7e595788"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7e595868"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7e595948"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7e5d55a8" loc="37:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7e5d55a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ee52078"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x7e5d5790"/>
        <function-ref name="receive" scoped="" ref="0x7e5d5870"/>
        <function-ref name="getPayload" scoped="" ref="0x7e5d5950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7e595a88" loc="40:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7e595a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7e595c60"/>
        <function-ref name="noAck" scoped="" ref="0x7e595d40"/>
        <function-ref name="wasAcked" scoped="" ref="0x7e595e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7e5d5a90" loc="38:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7e5d5a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7e5d5c68"/>
        <function-ref name="address" scoped="" ref="0x7e5d5d48"/>
        <function-ref name="destination" scoped="" ref="0x7e5d5e28"/>
        <function-ref name="setSource" scoped="" ref="0x7e5d5f08"/>
        <function-ref name="setDestination" scoped="" ref="0x7e595010"/>
        <function-ref name="type" scoped="" ref="0x7e5950f0"/>
        <function-ref name="setType" scoped="" ref="0x7e5951d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7e5952b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7e58c7b0" loc="39:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7e58c7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7e58c988"/>
        <function-ref name="stopDone" scoped="" ref="0x7e58ca68"/>
        <function-ref name="start" scoped="" ref="0x7e58cb48"/>
        <function-ref name="stop" scoped="" ref="0x7e58cc28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7e58b760" loc="41:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7e58b760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7ee51418"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7e58b938"/>
        <function-ref name="getPayload" scoped="" ref="0x7e58ba18"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7e58baf8"/>
        <function-ref name="cancel" scoped="" ref="0x7e58bbd8"/>
        <function-ref name="sendDone" scoped="" ref="0x7e58bcb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7e58c488" loc="38:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7e58c488"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7e58c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7e58b010" loc="40:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7e58b010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7ee51418"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x7e58b1e8"/>
        <function-ref name="receive" scoped="" ref="0x7e58b2c8"/>
        <function-ref name="getPayload" scoped="" ref="0x7e58b3a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7e5886b8" loc="45:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7e5886b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7e588890"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7e588970"/>
        <function-ref name="led1On" scoped="" ref="0x7e588a50"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7e588b30"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7e588c10"/>
        <function-ref name="get" scoped="" ref="0x7e588cf0"/>
        <function-ref name="led1Off" scoped="" ref="0x7e588dd0"/>
        <function-ref name="led2Off" scoped="" ref="0x7e5871d0"/>
        <function-ref name="set" scoped="" ref="0x7e588eb0"/>
        <function-ref name="led0On" scoped="" ref="0x7e587010"/>
        <function-ref name="led2On" scoped="" ref="0x7e5870f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7e5881d8" loc="44:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7e5881d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7ee51418"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7e5883b0"/>
        <function-ref name="offset" scoped="" ref="0x7e588490"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7e588570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7e56a240" loc="64:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7e56a240"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7e56a418"/>
        <function-ref name="stopDone" scoped="" ref="0x7e56a4f8"/>
        <function-ref name="start" scoped="" ref="0x7e56a5d8"/>
        <function-ref name="stop" scoped="" ref="0x7e56a6b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7e526a98" loc="324:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDoneTask" scoped="" ref="0x7e526a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7e526c70"/>
        <function-ref name="runTask" scoped="" ref="0x7e526d50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7e562c58" loc="72:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x7e562c58"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7e562e30"/>
        <function-ref name="stop" scoped="" ref="0x7e562f10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7e5494d8" loc="188:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RunTx" scoped="" ref="0x7e5494d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7e5496b0"/>
        <function-ref name="runTask" scoped="" ref="0x7e549790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7e56bf00" loc="63:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7e56bf00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7e56a0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7e528af0" loc="319:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startDoneTask" scoped="" ref="0x7e528af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7e528cc8"/>
        <function-ref name="runTask" scoped="" ref="0x7e528da8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7e5587c8" loc="70:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x7e5587c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7e5589a0"/>
        <function-ref name="resetSend" scoped="" ref="0x7e558a80"/>
        <function-ref name="dataReceived" scoped="" ref="0x7e558b60"/>
        <function-ref name="resetReceive" scoped="" ref="0x7e558c40"/>
        <function-ref name="putData" scoped="" ref="0x7e558d20"/>
        <function-ref name="putDone" scoped="" ref="0x7e558e00"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7e558ee0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7e562040" loc="71:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7e562040"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7e562218"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7e5622f8"/>
        <function-ref name="led1On" scoped="" ref="0x7e5623d8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7e5624b8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7e562598"/>
        <function-ref name="get" scoped="" ref="0x7e562678"/>
        <function-ref name="led1Off" scoped="" ref="0x7e562758"/>
        <function-ref name="led2Off" scoped="" ref="0x7e562ad8"/>
        <function-ref name="set" scoped="" ref="0x7e562838"/>
        <function-ref name="led0On" scoped="" ref="0x7e562918"/>
        <function-ref name="led2On" scoped="" ref="0x7e5629f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7e565d50" loc="65:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x7e565d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7e565f28"/>
        <function-ref name="nextByte" scoped="" ref="0x7e568018"/>
        <function-ref name="startSend" scoped="" ref="0x7e5680f8"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7e5681d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7e560418" loc="66:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7e560418"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7e5605f0"/>
        <function-ref name="byteReceived" scoped="" ref="0x7e5606d0"/>
        <function-ref name="endPacket" scoped="" ref="0x7e5607b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7e4b1430" loc="261:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="receiveTask" scoped="" ref="0x7e4b1430"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7e4b1608"/>
        <function-ref name="runTask" scoped="" ref="0x7e4b16e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7e4b3010" loc="40:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7e4b3010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7ee51418"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7e4b31f8"/>
        <function-ref name="getPayload" scoped="" ref="0x7e4b32d8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7e4b33b8"/>
        <function-ref name="cancel" scoped="" ref="0x7e4b3498"/>
        <function-ref name="sendDone" scoped="" ref="0x7e4b3578"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7e4b1868" loc="144:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalSendDone" scoped="" ref="0x7e4b1868"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7e4b1a40"/>
        <function-ref name="runTask" scoped="" ref="0x7e4b1b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7e4eda48" loc="39:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7e4eda48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7ee51418"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x7e4edc30"/>
        <function-ref name="receive" scoped="" ref="0x7e4edd10"/>
        <function-ref name="getPayload" scoped="" ref="0x7e4eddf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7e4b37a0" loc="43:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketInfo" scoped="" ref="0x7e4b37a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7ee51418"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7e4b3988"/>
        <function-ref name="offset" scoped="" ref="0x7e4b3a68"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7e4b3b48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7e4b27e8" loc="46:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7e4b27e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7e4b29c0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7e4b2aa0"/>
        <function-ref name="led1On" scoped="" ref="0x7e4b2b80"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7e4b2c60"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7e4b2d40"/>
        <function-ref name="get" scoped="" ref="0x7e4b2e20"/>
        <function-ref name="led1Off" scoped="" ref="0x7e4b2f00"/>
        <function-ref name="led2On" scoped="" ref="0x7e4b12b0"/>
        <function-ref name="set" scoped="" ref="0x7e4b10f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7e4b1010"/>
        <function-ref name="led0On" scoped="" ref="0x7e4b11d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7e4b2230" loc="45:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x7e4b2230"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7e4b2408"/>
        <function-ref name="nextByte" scoped="" ref="0x7e4b24e8"/>
        <function-ref name="startSend" scoped="" ref="0x7e4b25c8"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7e4b26a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7e4b3c88" loc="44:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7e4b3c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7e4b3e60"/>
        <function-ref name="byteReceived" scoped="" ref="0x7e4b2010"/>
        <function-ref name="endPacket" scoped="" ref="0x7e4b20f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7e4a2c38" loc="38:/opt/tinyos-2.x/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7e4a2c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7e4a2e10"/>
        <function-ref name="receivedByte" scoped="" ref="0x7e4a2ef0"/>
        <function-ref name="receive" scoped="" ref="0x7e4a7010"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7e4a70f0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7e4a71d0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7e4a72b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7e4a7390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7e4aa898" loc="36:/opt/tinyos-2.x/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x7e4aa898"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7e4aaa70"/>
        <function-ref name="resetSend" scoped="" ref="0x7e4aab50"/>
        <function-ref name="dataReceived" scoped="" ref="0x7e4aac30"/>
        <function-ref name="resetReceive" scoped="" ref="0x7e4aad10"/>
        <function-ref name="putData" scoped="" ref="0x7e4aadf0"/>
        <function-ref name="putDone" scoped="" ref="0x7e4aaed0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7e4a9010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7e4a74d8" loc="39:/opt/tinyos-2.x/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7e4a74d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7e4a76b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7e4a7790"/>
        <function-ref name="led1On" scoped="" ref="0x7e4a7870"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7e4a7950"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7e4a7a30"/>
        <function-ref name="get" scoped="" ref="0x7e4a7b10"/>
        <function-ref name="led1Off" scoped="" ref="0x7e4a7bf0"/>
        <function-ref name="led2Off" scoped="" ref="0x7e4a6010"/>
        <function-ref name="set" scoped="" ref="0x7e4a7cd0"/>
        <function-ref name="led0On" scoped="" ref="0x7e4a7db0"/>
        <function-ref name="led2On" scoped="" ref="0x7e4a7e90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7e48a400" loc="42:/opt/tinyos-2.x/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7e48a400"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7e48a5d8"/>
        <function-ref name="receive" scoped="" ref="0x7e48a6b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7e491260" loc="41:/opt/tinyos-2.x/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7e491260"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7e491438"/>
        <function-ref name="receivedByte" scoped="" ref="0x7e491518"/>
        <function-ref name="receive" scoped="" ref="0x7e4915f8"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7e4916d8"/>
        <function-ref name="receiveDone" scoped="" ref="0x7e4917b8"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7e491898"/>
        <function-ref name="sendDone" scoped="" ref="0x7e491978"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7e4acda8" loc="40:/opt/tinyos-2.x/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7e4acda8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7e491010"/>
        <function-ref name="stop" scoped="" ref="0x7e4910f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7e48ce38" loc="41:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7e48ce38"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7e486050"/>
        <function-ref name="receive" scoped="" ref="0x7e486130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7e4862a0" loc="42:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7e4862a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7e486478"/>
        <function-ref name="receivedByte" scoped="" ref="0x7e486558"/>
        <function-ref name="receive" scoped="" ref="0x7e486638"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7e486718"/>
        <function-ref name="receiveDone" scoped="" ref="0x7e4867f8"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7e4868d8"/>
        <function-ref name="sendDone" scoped="" ref="0x7e4869b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7e486c58" loc="43:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7e486c58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120e48"/>
            <typename><typedef-ref name="TMicro" ref="0x7f112010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7e4853f0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7e4857f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7e4855f0"/>
        <function-ref name="overflow" scoped="" ref="0x7e4859f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7e48ca10" loc="40:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7e48ca10"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7e48cbe8"/>
        <function-ref name="stop" scoped="" ref="0x7e48ccc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7e481428" loc="44:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7e481428"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7e481600"/>
        <function-ref name="receive" scoped="" ref="0x7e4816e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartTxControl" ref="0x7e45c190" loc="47:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartTxControl" scoped="" ref="0x7e45c190"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7e45c368"/>
        <function-ref name="stop" scoped="" ref="0x7e45c448"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7e482c70" loc="42:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7e482c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7e482e48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7e481840" loc="45:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7e481840"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7e481a18"/>
        <function-ref name="receivedByte" scoped="" ref="0x7e481af8"/>
        <function-ref name="receive" scoped="" ref="0x7e481bd8"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7e481cb8"/>
        <function-ref name="receiveDone" scoped="" ref="0x7e481d98"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7e481e78"/>
        <function-ref name="sendDone" scoped="" ref="0x7e45c010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7e45a6f0" loc="50:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7e45a6f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120e48"/>
            <typename><typedef-ref name="TMicro" ref="0x7f112010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7e45ae40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7e459268"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7e459068"/>
        <function-ref name="overflow" scoped="" ref="0x7e459468"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUart" ref="0x7e45ca00" loc="49:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart" scoped="" ref="0x7e45ca00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7e45cbd8"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7e45ccb8"/>
        <function-ref name="rxDone" scoped="" ref="0x7e45cd98"/>
        <function-ref name="txDone" scoped="" ref="0x7e45ce78"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7e45a010"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7e45a0f0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7e45a1d0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7e45a2b0"/>
        <function-ref name="tx" scoped="" ref="0x7e45a390"/>
        <function-ref name="rx" scoped="" ref="0x7e45a470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7e481010" loc="43:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7e481010"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7e4811e8"/>
        <function-ref name="stop" scoped="" ref="0x7e4812c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartRxControl" ref="0x7e45c5c8" loc="48:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartRxControl" scoped="" ref="0x7e45c5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7e45c7a0"/>
        <function-ref name="stop" scoped="" ref="0x7e45c880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x7e4496a8" loc="40:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x7e4496a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7e449880"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7e449960"/>
        <function-ref name="rxDone" scoped="" ref="0x7e449a40"/>
        <function-ref name="txDone" scoped="" ref="0x7e449b20"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7e449c00"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7e449ce0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7e449dc0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7e449ea0"/>
        <function-ref name="tx" scoped="" ref="0x7e448010"/>
        <function-ref name="rx" scoped="" ref="0x7e4480f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x7e448ae0" loc="44:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x7e448ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7e448cb8"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7e448d98"/>
        <function-ref name="rxDone" scoped="" ref="0x7e448e78"/>
        <function-ref name="txDone" scoped="" ref="0x7e447010"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7e4470f0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7e4471d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7e4472b0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7e447390"/>
        <function-ref name="tx" scoped="" ref="0x7e447470"/>
        <function-ref name="rx" scoped="" ref="0x7e447550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x7e449270" loc="39:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x7e449270"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7e449448"/>
        <function-ref name="stop" scoped="" ref="0x7e449528"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x7e448270" loc="42:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x7e448270"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7e448448"/>
        <function-ref name="stop" scoped="" ref="0x7e448528"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x7e4486a8" loc="43:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x7e4486a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7e448880"/>
        <function-ref name="stop" scoped="" ref="0x7e448960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x7e44bdf0" loc="38:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x7e44bdf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7e449010"/>
        <function-ref name="stop" scoped="" ref="0x7e4490f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0Init" ref="0x7e443960" loc="71:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0Init" scoped="" ref="0x7e443960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7e443b38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x7e442608" loc="74:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x7e442608"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7e4427e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7e4428c0"/>
        <function-ref name="rxDone" scoped="" ref="0x7e4429a0"/>
        <function-ref name="txDone" scoped="" ref="0x7e442a80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7e442b60"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7e442c40"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7e442d20"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7e442e00"/>
        <function-ref name="tx" scoped="" ref="0x7e442ee0"/>
        <function-ref name="rx" scoped="" ref="0x7e441010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1Init" ref="0x7e4411a8" loc="76:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1Init" scoped="" ref="0x7e4411a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7e441380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x7e441dd0" loc="79:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x7e441dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7e440010"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7e4400f0"/>
        <function-ref name="rxDone" scoped="" ref="0x7e4401d0"/>
        <function-ref name="txDone" scoped="" ref="0x7e4402b0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7e440390"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7e440470"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7e440550"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7e440630"/>
        <function-ref name="tx" scoped="" ref="0x7e440710"/>
        <function-ref name="rx" scoped="" ref="0x7e4407f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x7e4421b0" loc="73:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x7e4421b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7e442388"/>
        <function-ref name="stop" scoped="" ref="0x7e442468"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x7e441520" loc="77:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x7e441520"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7e4416f8"/>
        <function-ref name="stop" scoped="" ref="0x7e4417d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x7e441978" loc="78:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x7e441978"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7e441b50"/>
        <function-ref name="stop" scoped="" ref="0x7e441c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x7e440960" loc="81:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7e440960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7e440b38"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7e440c18"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7e440cf8"/>
        <function-ref name="actualMicro" scoped="" ref="0x7e440dd8"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7e440eb8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x7e43e040" loc="82:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7e43e040"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7e43e218"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x7e443cd8" loc="72:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x7e443cd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7e443eb0"/>
        <function-ref name="stop" scoped="" ref="0x7e442010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7e4070b0" loc="24:/opt/tinyos-2.x/tos/platforms/mica/CounterMicro32C.nc">
      <component-ref qname="CounterMicro32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7e4070b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120e48"/>
            <typename><typedef-ref name="TMicro" ref="0x7f112010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7e407800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7e407c00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7e407a00"/>
        <function-ref name="overflow" scoped="" ref="0x7e407e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7e401498" loc="24:/opt/tinyos-2.x/tos/platforms/mica/CounterThree16C.nc">
      <component-ref qname="CounterThree16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7e401498"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120e48"/>
            <typename><typedef-ref name="TThree" ref="0x7f081ca0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7e401be8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7e400010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7e401de8"/>
        <function-ref name="overflow" scoped="" ref="0x7e400210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7e3f1b98" loc="37:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7e3f1b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7e3f1d70"/>
        <function-ref name="setCtrlCapture" scoped="" ref="0x7e3f1e50"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7e3f6010"/>
        <function-ref name="getCtrlCompare" scoped="" ref="0x7e3f60f0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7e3f61d0"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7e3f62b0"/>
        <function-ref name="getCtrlClock" scoped="" ref="0x7e3f6390"/>
        <function-ref name="getCtrlCapture" scoped="" ref="0x7e3f6470"/>
        <function-ref name="setCtrlCompare" scoped="" ref="0x7e3f6550"/>
        <function-ref name="setCtrlClock" scoped="" ref="0x7e3f6630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7e3ebb48" loc="38:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7e3ebb48"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7e3ee410"/>
        <function-ref name="test" scoped="" ref="0x7e3ee010"/>
        <function-ref name="get" scoped="" ref="0x7e3f0200"/>
        <function-ref name="captured" scoped="" ref="0x7e3f06a0"/>
        <function-ref name="reset" scoped="" ref="0x7e3f0940"/>
        <function-ref name="isOn" scoped="" ref="0x7e3ee210"/>
        <function-ref name="set" scoped="" ref="0x7e3f0400"/>
        <function-ref name="start" scoped="" ref="0x7e3f0b40"/>
        <function-ref name="stop" scoped="" ref="0x7e3f0d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7e3ee9b8" loc="39:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7e3ee9b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7e3e9cb0"/>
        <function-ref name="fired" scoped="" ref="0x7e3e94b0"/>
        <function-ref name="get" scoped="" ref="0x7e3e9010"/>
        <function-ref name="reset" scoped="" ref="0x7e3e96b0"/>
        <function-ref name="isOn" scoped="" ref="0x7e3e9eb0"/>
        <function-ref name="set" scoped="" ref="0x7e3e9210"/>
        <function-ref name="start" scoped="" ref="0x7e3e98b0"/>
        <function-ref name="stop" scoped="" ref="0x7e3e9ab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7e3fb368" loc="36:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7e3fb368"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7e3faa68"/>
        <function-ref name="test" scoped="" ref="0x7e3fa668"/>
        <function-ref name="get" scoped="" ref="0x7e3fb9b0"/>
        <function-ref name="setScale" scoped="" ref="0x7e3fac68"/>
        <function-ref name="getScale" scoped="" ref="0x7e3faf08"/>
        <function-ref name="reset" scoped="" ref="0x7e3fa068"/>
        <function-ref name="overflow" scoped="" ref="0x7e3fbe50"/>
        <function-ref name="isOn" scoped="" ref="0x7e3fa868"/>
        <function-ref name="set" scoped="" ref="0x7e3fbbb0"/>
        <function-ref name="start" scoped="" ref="0x7e3fa268"/>
        <function-ref name="stop" scoped="" ref="0x7e3fa468"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7e3e02b8" loc="37:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7e3e02b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7e3e0490"/>
        <function-ref name="setCtrlCapture" scoped="" ref="0x7e3e0570"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7e3e0650"/>
        <function-ref name="getCtrlCompare" scoped="" ref="0x7e3e0730"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7e3e0810"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7e3e08f0"/>
        <function-ref name="getCtrlClock" scoped="" ref="0x7e3e09d0"/>
        <function-ref name="getCtrlCapture" scoped="" ref="0x7e3e0ab0"/>
        <function-ref name="setCtrlCompare" scoped="" ref="0x7e3e0b90"/>
        <function-ref name="setCtrlClock" scoped="" ref="0x7e3e0c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x7e3dd968" loc="39:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x7e3dd968"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7e3dbcb0"/>
        <function-ref name="fired" scoped="" ref="0x7e3db4b0"/>
        <function-ref name="get" scoped="" ref="0x7e3db010"/>
        <function-ref name="reset" scoped="" ref="0x7e3db6b0"/>
        <function-ref name="isOn" scoped="" ref="0x7e3dbeb0"/>
        <function-ref name="set" scoped="" ref="0x7e3db210"/>
        <function-ref name="start" scoped="" ref="0x7e3db8b0"/>
        <function-ref name="stop" scoped="" ref="0x7e3dbab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7e3e0e90" loc="38:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7e3e0e90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7e3dd648"/>
        <function-ref name="test" scoped="" ref="0x7e3dd248"/>
        <function-ref name="get" scoped="" ref="0x7e3de4f8"/>
        <function-ref name="captured" scoped="" ref="0x7e3de998"/>
        <function-ref name="reset" scoped="" ref="0x7e3dec38"/>
        <function-ref name="isOn" scoped="" ref="0x7e3dd448"/>
        <function-ref name="set" scoped="" ref="0x7e3de6f8"/>
        <function-ref name="start" scoped="" ref="0x7e3dee38"/>
        <function-ref name="stop" scoped="" ref="0x7e3dd048"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x7e3da148" loc="40:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x7e3da148"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7e3d8448"/>
        <function-ref name="fired" scoped="" ref="0x7e3dac30"/>
        <function-ref name="get" scoped="" ref="0x7e3da790"/>
        <function-ref name="reset" scoped="" ref="0x7e3dae30"/>
        <function-ref name="isOn" scoped="" ref="0x7e3d8648"/>
        <function-ref name="set" scoped="" ref="0x7e3da990"/>
        <function-ref name="start" scoped="" ref="0x7e3d8048"/>
        <function-ref name="stop" scoped="" ref="0x7e3d8248"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x7e3d88c8" loc="41:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x7e3d88c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7e3d7bc8"/>
        <function-ref name="fired" scoped="" ref="0x7e3d73c8"/>
        <function-ref name="get" scoped="" ref="0x7e3d8f10"/>
        <function-ref name="reset" scoped="" ref="0x7e3d75c8"/>
        <function-ref name="isOn" scoped="" ref="0x7e3d7dc8"/>
        <function-ref name="set" scoped="" ref="0x7e3d7128"/>
        <function-ref name="start" scoped="" ref="0x7e3d77c8"/>
        <function-ref name="stop" scoped="" ref="0x7e3d79c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7e3e3460" loc="36:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7e3e3460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7e3e2c10"/>
        <function-ref name="test" scoped="" ref="0x7e3e2810"/>
        <function-ref name="get" scoped="" ref="0x7e3e3aa8"/>
        <function-ref name="setScale" scoped="" ref="0x7e3e2e10"/>
        <function-ref name="getScale" scoped="" ref="0x7e3e00d8"/>
        <function-ref name="reset" scoped="" ref="0x7e3e2210"/>
        <function-ref name="overflow" scoped="" ref="0x7e3e2010"/>
        <function-ref name="isOn" scoped="" ref="0x7e3e2a10"/>
        <function-ref name="set" scoped="" ref="0x7e3e3ca8"/>
        <function-ref name="start" scoped="" ref="0x7e3e2410"/>
        <function-ref name="stop" scoped="" ref="0x7e3e2610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7e390de0" loc="37:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7e390de0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f2500e0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f2500e0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7e37f010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7e37f220" loc="38:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7e37f220"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7e37d928"/>
        <function-ref name="test" scoped="" ref="0x7e37d528"/>
        <function-ref name="get" scoped="" ref="0x7e37f868"/>
        <function-ref name="setScale" scoped="" ref="0x7e37db28"/>
        <function-ref name="getScale" scoped="" ref="0x7e37ddc8"/>
        <function-ref name="reset" scoped="" ref="0x7e37ff08"/>
        <function-ref name="overflow" scoped="" ref="0x7e37fd08"/>
        <function-ref name="isOn" scoped="" ref="0x7e37d728"/>
        <function-ref name="set" scoped="" ref="0x7e37fa68"/>
        <function-ref name="start" scoped="" ref="0x7e37d128"/>
        <function-ref name="stop" scoped="" ref="0x7e37d328"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7e392db8" loc="36:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7e392db8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120e48"/>
            <typename><typedef-ref name="TThree" ref="0x7f081ca0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7e391518"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7e391918"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7e391718"/>
        <function-ref name="overflow" scoped="" ref="0x7e391b18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7e391d80" loc="37:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7e391d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7e3794a8"/>
        <function-ref name="test" scoped="" ref="0x7e3790a8"/>
        <function-ref name="get" scoped="" ref="0x7e37a3e0"/>
        <function-ref name="setScale" scoped="" ref="0x7e3796a8"/>
        <function-ref name="getScale" scoped="" ref="0x7e379948"/>
        <function-ref name="reset" scoped="" ref="0x7e37aa80"/>
        <function-ref name="overflow" scoped="" ref="0x7e37a880"/>
        <function-ref name="isOn" scoped="" ref="0x7e3792a8"/>
        <function-ref name="set" scoped="" ref="0x7e37a5e0"/>
        <function-ref name="start" scoped="" ref="0x7e37ac80"/>
        <function-ref name="stop" scoped="" ref="0x7e37ae80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7e375508" loc="52:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7e375508"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120e48"/>
            <typename><typedef-ref name="TThree" ref="0x7f081ca0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7e375c58"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7e366068"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7e375e58"/>
        <function-ref name="overflow" scoped="" ref="0x7e366268"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7e3764b0" loc="51:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7e3764b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7f120e48"/>
            <typename><typedef-ref name="TMicro" ref="0x7f112010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7e376c00"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7e375010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7e376e00"/>
        <function-ref name="overflow" scoped="" ref="0x7e375210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7e362738" loc="36:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Info" scoped="" ref="0x7e362738"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7e362910"/>
        <function-ref name="offset" scoped="" ref="0x7e3629f0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7e362ad0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Boot" loc="39:/opt/tinyos-2.x/tos/interfaces/Boot.nc">
      <documentation loc="39:/opt/tinyos-2.x/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10;</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7eed2010" loc="49:/opt/tinyos-2.x/tos/interfaces/Boot.nc">
        <documentation loc="40:/opt/tinyos-2.x/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="66:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
      <documentation loc="66:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface. </short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7eed0c90" loc="88:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="81:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10;</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7eed09f0" loc="88:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7eec3818" loc="110:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="104:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.&#10;&#10;</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7eec35c8" loc="110:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7eed06d0" loc="79:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="68:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents. </short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if issuing the start command was successful&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="stop" ref="0x7eec32a8" loc="102:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="90:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short>&#10; Stop the component and pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;</short>
          <long>&#10; Stop the component and pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10; Return values of SUCCESS will always result in a&#10; &#60;code>stopDone()&#60;/code> event being signalled.&#10;&#10; @return SUCCESS if issuing the stop command was successful&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="47:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
      <function command="" provided="0" name="send" ref="0x7ee31918" loc="69:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="49:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param msg    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7ee52420"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7ee31068" loc="69:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7ee52420"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7ee31218" loc="69:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7ee313a0" loc="69:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7ee23328" loc="125:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="115:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.&#10;</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; The length of this region is maxPayloadLength(). This command&#10; behaves similarly to &#60;tt>Packet.getPayload&#60;/tt> (minus the&#10; length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ee23010" loc="125:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7ee30c90" loc="112:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="102:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7ee30058" loc="85:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="71:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ee31c60" loc="85:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7ee30840" loc="99:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="87:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ee303a0" loc="99:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7ee30528" loc="99:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="45:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
      <documentation loc="45:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.1.2.13 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="payloadLength" ref="0x7ee12858" loc="89:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
        <documentation loc="81:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This call is identical&#10; to &#60;TT>Packet.payloadLength&#60;/TT>, and is included in Receive as a&#10; convenience.&#10;&#10; @param  msg      the packet&#10; @return          the length of the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ee125d8" loc="89:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receive" ref="0x7ee20a20" loc="67:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
        <documentation loc="47:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  msg      the receied packet&#10; @param  payload  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return          a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
              <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ee20190" loc="67:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7ee20330" loc="67:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7ee204b8" loc="67:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7ee12288" loc="79:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
        <documentation loc="69:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
          <short>&#10; Return point to a protocol's payload region in a packet. </short>
          <long>&#10; Return point to a protocol's payload region in a packet.  If len&#10; is not NULL, getPayload will return the length of the payload in&#10; it. This call is identical to &#60;TT>Packet.getPayload&#60;/TT>, and is&#10; included in Receive as a convenience.&#10;&#10; @param  msg      the packet&#10; @param  len      a pointer to where to store the payload length&#10; @return          a pointer to the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ee20d68" loc="79:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7ee20f10" loc="79:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="40:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
      <documentation loc="40:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <short>&#10; Constants for manipulating LEDs.&#10;&#10;</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7edc4720" loc="50:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="47:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7edc4af8" loc="56:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="52:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10;</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7edc4e68" loc="61:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="58:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7edc35e0" loc="72:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="68:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10;</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7edc20e8" loc="89:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="85:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10;</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="get" ref="0x7edc2628" loc="106:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="92:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LED_LED0, LED_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7edc3208" loc="66:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="63:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="set" ref="0x7edc2d00" loc="123:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="109:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask. </short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7edc2960" loc="123:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7edc43b0" loc="45:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="42:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7edc3950" loc="78:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="75:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7edc3cc0" loc="83:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="80:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:/opt/tinyos-2.x/tos/interfaces/Read.nc">
      <documentation loc="49:/opt/tinyos-2.x/tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1.2.3 $ $Date: 2006/06/20 18:56:06 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7ede2608" loc="49:/opt/tinyos-2.x/tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7ede2608"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7ede2a68" loc="55:/opt/tinyos-2.x/tos/interfaces/Read.nc">
        <documentation loc="50:/opt/tinyos-2.x/tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.&#10; &#10;</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7ede1158" loc="63:/opt/tinyos-2.x/tos/interfaces/Read.nc">
        <documentation loc="57:/opt/tinyos-2.x/tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().&#10;&#10;</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7ede2608"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7ede2d88" loc="63:/opt/tinyos-2.x/tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7ede2f10" loc="63:/opt/tinyos-2.x/tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7ede2608"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="42:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
      <documentation loc="42:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7ee03038" loc="42:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7ee03038"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7edf3010" loc="125:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="121:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.&#10;</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="fired" ref="0x7ee02348" loc="72:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="69:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</short>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7ee00410" loc="103:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="89:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7ee02dd0" loc="103:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7ee00010" loc="103:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7ee02aa8" loc="87:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="83:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.&#10;</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7edf3828" loc="140:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="135:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7edf3450" loc="133:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="127:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7ee02718" loc="81:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="75:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7ee036f0" loc="53:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="45:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7ee03448" loc="53:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7ee00c60" loc="118:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="105:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7ee00738" loc="118:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7ee008c8" loc="118:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7ee03cc0" loc="62:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="55:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7ee03a18" loc="62:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7ee02010" loc="67:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="64:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.&#10;</short>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="40:/opt/tinyos-2.x/tos/interfaces/Init.nc">
      <documentation loc="40:/opt/tinyos-2.x/tos/interfaces/Init.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.1.2.13 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7ed53eb0" loc="51:/opt/tinyos-2.x/tos/interfaces/Init.nc">
        <documentation loc="42:/opt/tinyos-2.x/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="26:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x7ed33778" loc="60:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x7ed33520" loc="60:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x7ed34208" loc="31:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.&#10;</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x7ed347d8" loc="39:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10;</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7ed34560" loc="39:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x7ed34db0" loc="46:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10;</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7ed34b30" loc="46:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x7ed331b8" loc="53:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10;</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="27:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
      <documentation loc="27:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <short>&#10;</short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7ed00db0" loc="33:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7ecf40f0" loc="34:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7ed00780" loc="31:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7ecf4728" loc="36:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="get" ref="0x7ed00a98" loc="32:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7ecf4408" loc="35:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="set" ref="0x7ed00160" loc="29:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="clr" ref="0x7ed00470" loc="30:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="41:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
      <documentation loc="41:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.&#10;&#10;</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f230010" loc="46:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <documentation loc="43:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.&#10;</short>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f2307f8" loc="61:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <documentation loc="56:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f230428" loc="54:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10;</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="44:/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f210198" loc="56:/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc">
        <documentation loc="46:/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f2105a0" loc="64:/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc">
        <documentation loc="58:/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="57:/opt/tinyos-2.x/tos/interfaces/McuSleep.nc">
      <documentation loc="57:/opt/tinyos-2.x/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x7f0513c8" loc="59:/opt/tinyos-2.x/tos/interfaces/McuSleep.nc">
        <documentation loc="58:/opt/tinyos-2.x/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep. </short>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="42:/opt/tinyos-2.x/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="42:/opt/tinyos-2.x/tos/interfaces/McuPowerOverride.nc">
        <short>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING. </short>
        <long>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.1.2.11 2006/09/22 19:23:59 idgay Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7efe0028" loc="54:/opt/tinyos-2.x/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="44:/opt/tinyos-2.x/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f152338"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="38:/opt/tinyos-2.x/tos/interfaces/McuPowerState.nc">
      <documentation loc="38:/opt/tinyos-2.x/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f001ee8" loc="44:/opt/tinyos-2.x/tos/interfaces/McuPowerState.nc">
        <documentation loc="39:/opt/tinyos-2.x/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="42:/opt/tinyos-2.x/tos/lib/timer/LocalTime.nc">
      <documentation loc="42:/opt/tinyos-2.x/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7ea02c38" loc="42:/opt/tinyos-2.x/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7ea02c38"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7ea01118" loc="50:/opt/tinyos-2.x/tos/lib/timer/LocalTime.nc">
        <documentation loc="44:/opt/tinyos-2.x/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7fea06c0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="46:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
      <documentation loc="46:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10;</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7e9e0830" loc="46:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7e9e0830"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7e9e0948" loc="46:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e9e0948"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7e9e0e18" loc="53:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e9e0948"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7e9d6598" loc="65:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="62:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.&#10;</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7e9d6258" loc="60:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="55:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits. </short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7e9d6968" loc="71:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="67:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed. </short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="45:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
      <documentation loc="45:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10;</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7e9f17d8" loc="45:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7e9f17d8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7e9f18f0" loc="45:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e9f18f0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7e9e5740" loc="98:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="94:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.&#10;</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e9f18f0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="fired" ref="0x7e9f0700" loc="67:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="64:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.&#10;</short>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7e9e53c8" loc="92:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="79:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e9f18f0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e9f18f0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7e9f0e78" loc="92:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e9f18f0"/></type-var>
          </variable>
          <variable name="dt" ref="0x7e9e5030" loc="92:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e9f18f0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7e9f0b38" loc="77:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="70:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7e9e5b78" loc="105:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="100:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10;</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e9f18f0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="start" ref="0x7e9f0010" loc="55:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e9f18f0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7e9f1d18" loc="55:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e9f18f0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7e9f03c8" loc="62:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="57:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="33:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10;</short>
        <long>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControl" ref="0x7e9b30f8" loc="36:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="35:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short> Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f1015c0"/>
            <typename><typedef-ref name="Atm128TimerControl_t" ref="0x7f101810"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7e9b1168" loc="44:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="43:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short> Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0e16f0"/>
            <typename><typedef-ref name="Atm128_TIFR_t" ref="0x7f0e1940"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7e9b3908" loc="40:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="39:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short> Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0f03a8"/>
            <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x7f0f05f8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7e9b3dc0" loc="41:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0f03a8"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x7f0f05f8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7e9b3c58" loc="41:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0f03a8"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x7f0f05f8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7e9b1620" loc="45:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0e16f0"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x7f0e1940"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7e9b14b8" loc="45:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0e16f0"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x7f0e1940"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7e9b35b0" loc="37:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f1015c0"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x7f101810"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7e9b3448" loc="37:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f1015c0"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x7f101810"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="32:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.&#10;</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7e9b5bf0" loc="32:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e9b5bf0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x7e9a46d8" loc="65:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10;</short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="fired" ref="0x7e9a58e8" loc="49:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="get" ref="0x7e9a5098" loc="39:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="35:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.&#10;</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e9b5bf0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="reset" ref="0x7e9a5c20" loc="53:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="52:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7e9a4a60" loc="71:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10;</short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="set" ref="0x7e9a55b8" loc="45:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="41:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.&#10;</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e9b5bf0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7e9a53d8" loc="45:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e9b5bf0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7e9a4010" loc="56:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="55:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="stop" ref="0x7e9a4340" loc="59:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="58:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="46:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="46:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.  &#10;</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7e9c43d0" loc="46:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7e9c43d0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x7e9c24a0" loc="89:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="88:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="test" ref="0x7e9c3dd0" loc="78:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10;</short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="get" ref="0x7e9c4830" loc="52:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.&#10;</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7e9c43d0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="setScale" ref="0x7e9c29b8" loc="95:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="91:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.&#10;</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x7e9c27e0" loc="95:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x7e9c2d50" loc="101:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.&#10;</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="reset" ref="0x7e9c33c8" loc="66:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="65:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7e9c3090" loc="61:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="60:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7e9c2178" loc="84:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10;</short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="set" ref="0x7e9c4d30" loc="58:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="54:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.&#10;</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7e9c43d0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7e9c4b70" loc="58:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7e9c43d0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7e9c3700" loc="69:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="68:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="stop" ref="0x7e9c3a30" loc="72:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="71:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="SensirionSht11" loc="40:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
      <documentation loc="40:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
        <short>&#10; SensirionSht11 is the rich interface to the Sensirion SHT11&#10; temperature/humidity sensor. &#10;&#10;</short>
        <long>&#10; SensirionSht11 is the rich interface to the Sensirion SHT11&#10; temperature/humidity sensor. &#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1.2.2 $ $Date: 2006/06/20 18:56:05 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="measureHumidityDone" ref="0x7e7d6ae0" loc="84:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
        <documentation loc="78:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
          <short>&#10; Presents the result of a humidity measurement.&#10;&#10;</short>
          <long>&#10; Presents the result of a humidity measurement.&#10;&#10; @param result SUCCESS if the measurement was successful&#10; @param val the humidity reading&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7e7d6718" loc="84:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7e7d68a8" loc="84:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="readStatusReg" ref="0x7e7d6ed8" loc="92:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
        <documentation loc="86:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
          <short>&#10; Reads the current contents of the SHT11 status and control&#10; register.</short>
          <long>&#10; Reads the current contents of the SHT11 status and control&#10; register. See the datasheet for interpretation of this register.&#10;&#10; @return SUCCESS if the read will be performed&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="measureHumidity" ref="0x7e7d63f0" loc="76:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
        <documentation loc="71:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
          <short>&#10; Starts a humidity measurement.&#10;&#10;</short>
          <long>&#10; Starts a humidity measurement.&#10;&#10; @return SUCCESS if the measurement will be made&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="measureTemperature" ref="0x7e7d8960" loc="61:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
        <documentation loc="56:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
          <short>&#10; Starts a temperature measurement.&#10;&#10;</short>
          <long>&#10; Starts a temperature measurement.&#10;&#10; @return SUCCESS if the measurement will be made&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="writeStatusReg" ref="0x7e7d5b50" loc="109:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
        <documentation loc="102:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
          <short>&#10; Writes a new value to the SHT11 status and control register.&#10;&#10;</short>
          <long>&#10; Writes a new value to the SHT11 status and control register.&#10;&#10; @param val the new value to be written&#10;&#10; @return SUCCESS if the write will be performed&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7e7d5900" loc="109:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7e7d80c0" loc="47:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
        <documentation loc="42:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
          <short>&#10; Resets the sensor.&#10;&#10;</short>
          <long>&#10; Resets the sensor.&#10;&#10; @return SUCCESS if the sensor will be reset&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="writeStatusRegDone" ref="0x7e7d40e0" loc="116:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
        <documentation loc="111:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
          <short>&#10; Signals the completion of the status register write.&#10;&#10;</short>
          <long>&#10; Signals the completion of the status register write.&#10;&#10; @param result SUCCESS if the write was successful&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7e7d5e78" loc="116:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readStatusRegDone" ref="0x7e7d55d8" loc="100:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
        <documentation loc="94:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
          <short>&#10; Presents the value of the status register.&#10;&#10;</short>
          <long>&#10; Presents the value of the status register.&#10;&#10; @param result SUCCESS if the read succeeded&#10; @param val the value of the register&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7e7d5228" loc="100:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7e7d53b0" loc="100:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="resetDone" ref="0x7e7d85d8" loc="54:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
        <documentation loc="49:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
          <short>&#10; Signals that the sensor has been reset.&#10;&#10;</short>
          <long>&#10; Signals that the sensor has been reset.&#10;&#10; @param result SUCCESS if the reset succeeded&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7e7d83e0" loc="54:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="measureTemperatureDone" ref="0x7e7d6070" loc="69:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
        <documentation loc="63:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
          <short>&#10; Presents the result of a temperature measurement.&#10;&#10;</short>
          <long>&#10; Presents the result of a temperature measurement.&#10;&#10; @param result SUCCESS if the measurement was successful&#10; @param val the temperature reading&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7e7d8c88" loc="69:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7e7d8e18" loc="69:/opt/tinyos-2.x/tos/sensorboards/zigbex_sensor/sht11/SensirionSht11.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="67:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
      <documentation loc="67:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources. </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.1.2.10 $&#10; @date $Date: 2006/08/15 11:50:42 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7e7e4d20" loc="101:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
        <documentation loc="94:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.&#10;&#10;</short>
          <long>&#10; Release a shared resource you previously acquired.&#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7e7e45e8" loc="87:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
        <documentation loc="80:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="request" ref="0x7e7e41b8" loc="78:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
        <documentation loc="68:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="granted" ref="0x7e7e4908" loc="92:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
        <documentation loc="89:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.&#10;</short>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7e7e3150" loc="109:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
        <documentation loc="103:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="GpioInterrupt" loc="32:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
        <short>&#10;</short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.1.2.3 $&#10;&#10; Provides a microcontroller-independent presentation of interrupts&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7e794590" loc="57:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
        <documentation loc="52:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
          <short>&#10; Fired when an edge interrupt occurs.&#10;&#10;</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; NOTE: Interrupts keep running until &#34;disable()&#34; is called&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="disable" ref="0x7e7941e8" loc="50:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
        <documentation loc="45:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
          <short>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10;</short>
          <long>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; @return SUCCESS if the interrupt has been disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="enableFallingEdge" ref="0x7e795e00" loc="43:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="enableRisingEdge" ref="0x7e795ad8" loc="42:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
        <documentation loc="34:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
          <short> &#10; Enable an edge based interrupt.</short>
          <long> &#10; Enable an edge based interrupt. Calls to these functions are&#10; not cumulative: only the transition type of the last called function&#10; will be monitored for.&#10;&#10;&#10; @return SUCCESS if the interrupt has been enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Interrupt" loc="30:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
      <documentation loc="30:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <short>&#10; Interface to an Atmega128 external interrupt pin&#10;&#10;</short>
        <long>&#10; Interface to an Atmega128 external interrupt pin&#10;&#10; @author Joe Polastre&#10; @author Martin Turon&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7e700368" loc="45:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="42:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Clears the ATmega128 Interrupt Pending Flag for a particular port&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="fired" ref="0x7e6f9058" loc="64:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="61:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short>&#10; Signalled when an interrupt occurs on a port&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="disable" ref="0x7e700010" loc="40:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="37:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Disables ATmega128 hardware interrupt on a particular port&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="edge" ref="0x7e700cf8" loc="59:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="54:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Sets whether the edge should be high to low or low to high.&#10;</short>
          <long> &#10; Sets whether the edge should be high to low or low to high.&#10; @param TRUE if the interrupt should be triggered on a low to high&#10;        edge transition, false for interrupts on a high to low transition&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="low_to_high" ref="0x7e700a80" loc="59:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x7e704c78" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="32:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Enables ATmega128 hardware interrupt on a particular port&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="getValue" ref="0x7e700740" loc="52:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="47:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Gets the current value of the input voltage of a port&#10;&#10;</short>
          <long> &#10; Gets the current value of the input voltage of a port&#10;&#10; @return TRUE if the pin is set high, FALSE if it is set low&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128InterruptSig" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptSig.nc">
      <documentation loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptSig.nc">
        <short>&#10; Interface to an Atmega128 external interrupt pin that exposes just the&#10; interrupt vector routine for easy linking to generic components (see&#10; HplAtm128Interrupt for the full interface).&#10;&#10;</short>
        <long>&#10; Interface to an Atmega128 external interrupt pin that exposes just the&#10; interrupt vector routine for easy linking to generic components (see&#10; HplAtm128Interrupt for the full interface).&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @see HplAtm128Interrupt&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7e6ea010" loc="41:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptSig.nc">
        <documentation loc="38:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128InterruptSig.nc">
          <short>&#10; Signalled when an interrupt occurs on a pin&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="36:/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc">
      <documentation loc="36:/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10;</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.1.2.5 $&#10; @date $Date: 2006/08/15 11:50:42 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7e693928" loc="43:/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc">
        <documentation loc="37:/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7e693e00" loc="51:/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc">
        <documentation loc="45:/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="44:/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc">
      <documentation loc="44:/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it. </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7e683010" loc="55:/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="51:/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.&#10;</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="configure" ref="0x7e684bc0" loc="49:/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="45:/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.&#10;</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceController" loc="40:/opt/tinyos-2.x/tos/interfaces/ResourceController.nc">
      <documentation loc="40:/opt/tinyos-2.x/tos/interfaces/ResourceController.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10;</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $Revision: 1.1.2.4 $&#10; @date $Date: 2006/08/15 11:50:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7e690a58" loc="56:/opt/tinyos-2.x/tos/interfaces/ResourceController.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/interfaces/ResourceController.nc">
          <short>&#10; Release control of the resource&#10;&#10;</short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceController"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="requested" ref="0x7e68a348" loc="73:/opt/tinyos-2.x/tos/interfaces/ResourceController.nc">
        <documentation loc="67:/opt/tinyos-2.x/tos/interfaces/ResourceController.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceController"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="granted" ref="0x7e690628" loc="46:/opt/tinyos-2.x/tos/interfaces/ResourceController.nc">
        <documentation loc="41:/opt/tinyos-2.x/tos/interfaces/ResourceController.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceController"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7e690e68" loc="65:/opt/tinyos-2.x/tos/interfaces/ResourceController.nc">
        <documentation loc="58:/opt/tinyos-2.x/tos/interfaces/ResourceController.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10; </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceController"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7e68a820" loc="81:/opt/tinyos-2.x/tos/interfaces/ResourceController.nc">
        <documentation loc="75:/opt/tinyos-2.x/tos/interfaces/ResourceController.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceController"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="72:/opt/tinyos-2.x/tos/interfaces/ArbiterInfo.nc">
      <documentation loc="72:/opt/tinyos-2.x/tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter. </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7e686120" loc="80:/opt/tinyos-2.x/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="73:/opt/tinyos-2.x/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.&#10;&#10;</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="userId" ref="0x7e686520" loc="88:/opt/tinyos-2.x/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="82:/opt/tinyos-2.x/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.&#10; &#10;</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="35:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
      <documentation loc="35:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2006/08/15 11:50:42 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7e6757d0" loc="69:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
        <documentation loc="62:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a cleint id&#10;&#10;</short>
          <long>&#10; Enqueue a cleint id&#10;&#10; @param cleintId - the cleint id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7e681ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7e675598" loc="69:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7e681ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7e677840" loc="43:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
        <documentation loc="37:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.&#10;&#10;</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7e677e20" loc="52:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
        <documentation loc="45:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given cleint id has already been enqueued&#10; and is waiting to be processed.&#10;&#10;</short>
          <long>&#10; Check to see if a given cleint id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7e681ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7e677b98" loc="52:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7e681ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7e675248" loc="60:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
        <documentation loc="54:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the cleint id of the next resource in the queue. &#10;</short>
          <long>&#10; Retreive the cleint id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The cleint id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7e681ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="45:/opt/tinyos-2.x/tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="45:/opt/tinyos-2.x/tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown. </short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x7e6268a0" loc="52:/opt/tinyos-2.x/tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="46:/opt/tinyos-2.x/tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource. </short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="65:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
      <documentation loc="65:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it. </short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7e61bac8" loc="73:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
        <documentation loc="67:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.&#10;&#10;</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="stop" ref="0x7e61bf18" loc="82:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
        <documentation loc="75:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10;</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="44:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
      <documentation loc="44:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7e5e97a0" loc="54:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="47:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet. </short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  msg    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5e9550" loc="54:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7e5e9e10" loc="67:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="56:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  msg    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5e9af0" loc="67:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7e5e7458" loc="108:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="97:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet. </short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.  If&#10; len is not NULL, getPayload will return the length of the payload&#10; in it, which is the same as the return value from&#10; payloadLength(). If a protocol does not support variable length&#10; packets, then *len is equal to maxPayloadLength().&#10;&#10; @param msg   the packet&#10; @param len   pointer to where the current payload length should be stored.&#10; @return      a pointer to the packet's data payload for this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5e8ee0" loc="108:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e5e70a8" loc="108:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7e5e8b98" loc="95:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="85:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7e5e86c0" loc="83:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="69:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param msg   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5e8190" loc="83:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e5e8318" loc="83:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="33:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10;</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7e5d85d8" loc="48:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="35:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10;</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param msg - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5d8230" loc="48:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7e5d8c70" loc="60:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="50:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10;</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param msg - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5d8940" loc="60:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7e5d7330" loc="74:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="62:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10;</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param msg - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5d7010" loc="74:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="50:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
      <documentation loc="50:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="source" ref="0x7e5e2148" loc="77:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="69:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.&#10;</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param amsg  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7ee52420"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7e5e3e68" loc="77:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7e5e3530" loc="57:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="52:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.&#10;</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7ee52420"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="destination" ref="0x7e5e3b18" loc="67:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="59:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.&#10;</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param amsg    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7ee52420"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7e5e3888" loc="67:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7e5e1328" loc="110:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="94:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet. </short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  amsg   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7ee52420"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7e5e2d20" loc="110:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7e5e2eb0" loc="110:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7ee52420"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7e5e29d8" loc="92:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="79:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet. </short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  amsg   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7ee52420"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7e5e2490" loc="92:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7e5e2620" loc="92:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7ee52420"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7e5db010" loc="136:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="127:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.&#10;</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  amsg   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7ee52078"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7e5e1da0" loc="136:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7e5db850" loc="151:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="138:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet. </short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  amsg    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7ee52078"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7e5db350" loc="151:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7e5db4d8" loc="151:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7ee52078"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7e5e1a58" loc="125:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="112:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  amsg   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7e5e1670" loc="125:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="44:/opt/tinyos-2.x/tos/interfaces/Send.nc">
      <documentation loc="44:/opt/tinyos-2.x/tos/interfaces/Send.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.1.2.13 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7e5c8c38" loc="64:/opt/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="46:/opt/tinyos-2.x/tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   msg     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5c85a0" loc="64:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e5c8728" loc="64:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7e5c6678" loc="114:/opt/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="104:/opt/tinyos-2.x/tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.&#10;</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; The length of this region is maxPayloadLength(). This command&#10; behaves similarly to &#60;tt>Packet.getPayload&#60;/tt> (minus the&#10; length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param   msg    the packet&#10; @return         a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5c6358" loc="114:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7e5c6010" loc="101:/opt/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="91:/opt/tinyos-2.x/tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7e5c7398" loc="78:/opt/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="66:/opt/tinyos-2.x/tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   msg    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5c7010" loc="78:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7e5c7b90" loc="89:/opt/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="80:/opt/tinyos-2.x/tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param msg   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5c76e0" loc="89:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7e5c7868" loc="89:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="10:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10;</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7e586db8" loc="31:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10;</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e586918" loc="31:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7e586aa8" loc="31:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7e589d90" loc="15:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.&#10;</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7e5865a8" loc="23:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10;</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e586120" loc="23:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:46" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ee40ca8"/>
                <typename><typedef-ref name="message_t" ref="0x7ee336b8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7e5862b0" loc="23:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="36:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="36:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7e55ba00" loc="45:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="37:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7e55a450" loc="61:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="56:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7e5582b8" loc="83:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="76:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7e558010" loc="83:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7e55a898" loc="68:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="63:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="putData" ref="0x7e55a010" loc="54:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="47:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10; </short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7e55bd40" loc="54:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7e558650" loc="89:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="85:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7e55ac28" loc="74:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="70:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="42:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
      <documentation loc="42:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10;&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7e565098" loc="60:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="53:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7e565560" loc="70:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="62:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7e566b90" loc="51:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="43:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10;</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7e566860" loc="51:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7e565bd8" loc="80:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="72:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7e5658a0" loc="80:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="37:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="37:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7e5614f8" loc="51:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="40:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10;</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7e561ac8" loc="58:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="53:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7e561838" loc="58:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7e5602a0" loc="69:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="59:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7e561e08" loc="69:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
      <documentation loc="37:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
        <short>&#10;</short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.1.2.1 $ $Date: 2006/10/10 19:18:42 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7e4a5448" loc="48:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
        <documentation loc="39:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param buf Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7e4a5010" loc="48:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e4a51a0" loc="48:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7e4a3a08" loc="79:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
        <documentation loc="74:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.&#10;&#10;</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7e4a3830" loc="79:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7e4a21d8" loc="90:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
        <documentation loc="81:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param buf Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7e4a3d68" loc="90:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e4a3ef8" loc="90:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7e4a3138" loc="65:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
        <documentation loc="59:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7e4a2ac0" loc="99:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
        <documentation loc="92:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.&#10;&#10;</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param buf Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7e4a2538" loc="99:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e4a26c8" loc="99:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7e4a2850" loc="99:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7e4a34f0" loc="72:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
        <documentation loc="67:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.&#10;&#10;</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7e4a5d18" loc="57:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
        <documentation loc="50:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.&#10;&#10;</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param buf Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7e4a57a8" loc="57:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e4a5938" loc="57:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7fea0238"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7e4a5ac0" loc="57:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="37:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
      <documentation loc="37:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
        <short>&#10;</short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.1.2.1 $ $Date: 2006/10/10 19:18:42 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7e48bac8" loc="46:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
        <documentation loc="39:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7e48b888" loc="46:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7e48a288" loc="56:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received.&#10;&#10; @param byte Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7e48be28" loc="56:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7e48a010" loc="56:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Uart" loc="38:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
      <documentation loc="38:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <short>&#10;</short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1.2.1 $ $Date: 2006/10/10 19:18:42 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7e478668" loc="44:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7e478028" loc="42:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x7e476918" loc="49:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7e4767b0" loc="49:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7e476160" loc="47:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7e4799d8" loc="40:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7e479cf8" loc="41:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7e478348" loc="43:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f212df0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isRxEmpty" ref="0x7e478988" loc="45:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="tx" ref="0x7e478e28" loc="46:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7e478cc0" loc="46:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7e476478" loc="48:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7feb0bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl16" loc="33:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <short>&#10; HPL Interface to Atmega128 16-bit timer control registers&#10;&#10;</short>
        <long>&#10; HPL Interface to Atmega128 16-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7e3f1528" loc="49:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
          <short> Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f082700"/>
            <typename><typedef-ref name="Atm128_ETIFR_t" ref="0x7f082950"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="setCtrlCapture" ref="0x7e3f34d0" loc="41:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0b19f8"/>
              <typename><typedef-ref name="Atm128TimerCtrlCapture_t" ref="0x7f0b1c48"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7e3f3368" loc="41:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0b19f8"/>
              <typename><typedef-ref name="Atm128TimerCtrlCapture_t" ref="0x7f0b1c48"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7e3f3ce0" loc="45:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="44:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
          <short> Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f090558"/>
            <typename><typedef-ref name="Atm128_ETIMSK_t" ref="0x7f0907a8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="getCtrlCompare" ref="0x7e3f4430" loc="36:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="35:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
          <short> Timer control registers: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0c2b78"/>
            <typename><typedef-ref name="Atm128TimerCtrlCompare_t" ref="0x7f0c2dc8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7e3f11d0" loc="46:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f090558"/>
              <typename><typedef-ref name="Atm128_ETIMSK_t" ref="0x7f0907a8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7e3f1068" loc="46:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f090558"/>
              <typename><typedef-ref name="Atm128_ETIMSK_t" ref="0x7f0907a8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7e3f19e0" loc="50:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f082700"/>
              <typename><typedef-ref name="Atm128_ETIFR_t" ref="0x7f082950"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7e3f1878" loc="50:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f082700"/>
              <typename><typedef-ref name="Atm128_ETIFR_t" ref="0x7f082950"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtrlClock" ref="0x7e3f4a98" loc="38:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0b0ae0"/>
            <typename><typedef-ref name="Atm128TimerCtrlClock_t" ref="0x7f0b0d30"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="getCtrlCapture" ref="0x7e3f4768" loc="37:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0b19f8"/>
            <typename><typedef-ref name="Atm128TimerCtrlCapture_t" ref="0x7f0b1c48"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="setCtrlCompare" ref="0x7e3f3010" loc="40:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0c2b78"/>
              <typename><typedef-ref name="Atm128TimerCtrlCompare_t" ref="0x7f0c2dc8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7e3f4df0" loc="40:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0c2b78"/>
              <typename><typedef-ref name="Atm128TimerCtrlCompare_t" ref="0x7f0c2dc8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtrlClock" ref="0x7e3f3988" loc="42:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0b0ae0"/>
              <typename><typedef-ref name="Atm128TimerCtrlClock_t" ref="0x7f0b0d30"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7e3f3820" loc="42:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0b0ae0"/>
              <typename><typedef-ref name="Atm128TimerCtrlClock_t" ref="0x7f0b0d30"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Capture" loc="31:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
      <documentation loc="31:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <short>&#10; HPL Interface to Atmega128 capture capabilities.&#10;</short>
        <long>&#10; HPL Interface to Atmega128 capture capabilities.&#10; @param size_type Integer type of capture register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7e3ed420" loc="31:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <interfacedef-ref qname="HplAtm128Capture"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e3ed420"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setEdge" ref="0x7e3eb8f8" loc="79:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="75:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Sets the capture edge.&#10;</short>
          <long> &#10; Sets the capture edge.&#10; @param up   TRUE = detect rising edge, FALSE = detect falling edge&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="up" ref="0x7e3eb710" loc="79:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x7e3eb050" loc="67:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="63:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Did a capture interrupt occur?&#10;</short>
          <long> &#10; Did a capture interrupt occur?&#10; @return TRUE if capture triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="get" ref="0x7e3ed890" loc="38:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="34:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Get the time to be captured.&#10;</short>
          <long> &#10; Get the time to be captured.&#10; @return  the capture time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e3ed420"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="captured" ref="0x7e3ec300" loc="51:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="47:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Signalled on capture interrupt.&#10;</short>
          <long> &#10; Signalled on capture interrupt.&#10; @param t     the time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e3ed420"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7e3ec120" loc="51:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e3ed420"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7e3ec638" loc="55:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="54:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Clear the capture interrupt flag. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7e3eb3d8" loc="73:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="69:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Is capture interrupt on? &#10;</short>
          <long> &#10; Is capture interrupt on? &#10; @return TRUE if capture enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f2513e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="set" ref="0x7e3eddb8" loc="44:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="40:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Set the time to be captured.&#10;</short>
          <long> &#10; Set the time to be captured.&#10; @param t     the time of the next capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e3ed420"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7e3edbd0" loc="44:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7e3ed420"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7e3ec968" loc="58:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="57:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Enable the capture interrupt. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="stop" ref="0x7e3ecc98" loc="61:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="60:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Turn off capture interrupts. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
