
#include "AM.h"
#include "Serial.h"
#include "Oscilloscope.h"

module BaseStationM {
    provides{
        interface BaseStation;
    }
  uses {
    interface SplitControl as RadioControl; // AMC component's Radiopower contorl

    interface AMSend as RadioSend[am_id_t id];
    interface Receive as RadioReceive[am_id_t id];
    interface Packet as RadioPacket;
    interface AMPacket as RadioAMPacket;

    interface Leds;
  }
}

implementation{
  message_t output;
  task void sendDataPacket(){
    sensor_data_t* packet
      = (sensor_data_t*)call Packet.getPayload(&output, sizeof(packet_t));
    packet->temp = temp;
    ..
    if(call AMSend.send(AM_BROADCAST_ADDR, &output, sizeof(sensor_data_t)) != SUCCESS)
      post sendDataPacket();
  }
  event void AMSend.sendDone(message_t *msg, error_t err){
    if(err = SUCCESS){

    }
    else{
      post send();
    }
  }
}













/*{
    typedef enum {RX,TX} ROLE;
    uint8_t role;
    typedef nx_struct message{
        nx_uint16_t temp;
        nx_uint16_t humid;
        nx_uint16_t ur;
        nx_uint16_t version;
    } Packet;
    Packet packet;
  message_t  radioBuf;
  
  command void BaseStation.init() {
    uint8_t i;
    call RadioControl.start();
  }
  
  command uint8_t BaseStation.getDeviceRole(){
    return role;
  }
    
  event void RadioControl.stopDone(error_t error) {}
  
  event void RadioControl.startDone(error_t error) {
  }

  uint8_t count = 0;
  event message_t *RadioReceive.receive[am_id_t id](message_t *msg,
						    void *payload,
						    uint8_t len) {
    signal BaseStation.recvPacket((void*)msg);
    return msg;
  }

  command void BaseStation.sendPacket(void* msg, uint8_t len){
    am_id_t id;
    am_addr_t addr;
    len = call RadioPacket.payloadLength(msg);
    id = call RadioAMPacket.type(msg);
    addr = call RadioAMPacket.destination(msg);

    call RadioSend.send[id](addr, msg, len);
  }

  event void RadioSend.sendDone[am_id_t id](message_t* msg, error_t error) {}  
}*/