/////////////*
BaseStation Module
1. Choose role between two or more machines:
  All machine do random start ->
    First starter will be TX, others will be RX
2. TX sends, RX do Nothing
3. RX receives, signal recvPacket();

# TOS dependancy, info : http://homepage.cs.uiowa.edu/~ochipara/classes/wsn/lectures/tinyos-tutorial.pdf
*nx = network type (network byte-> no endian issues)
Addresses : 
  * TOS_BCAST_ADDR : broadcast
  * TOS_NODE_ID : node own Addresses
  * am_id_t : determine sender&receiver group
  * typedef	nx_struct	message_t	{
		nx_uint8_t	header[sizeof(message_header_t)];
		nx_uint8_t	data[TOSH_DATA_LENGTH]; // data byte
		nx_uint8_t	footer[sizeof(message_footer_t)];
		nx_uint8_t	metadata[sizeof(message_metadata_t)];
  }	message_t;

  * interface SplitControl 
  interface	SplitControl	{
		command	error_t	start(); // start processing
		event	void	startDone(error_t	error); // complete	processing
		command	error_t	stop(); 
		event	void	stopDone(error_t	error);
}
 * AMSend
 interface	AMSend	{
		command	error_t	send(am_addr_t	addr,	message_t	*	msg,
				uint8_t	len);
		command	error_t	cancel(message_t	*	msg);
		event	void	sendDone(message_t	*	msg,	error_t	error);
		command	uint8_t	maxPayloadLength();
		command	void*	getPayload(message_t	*	msg,	uint8_t	len);
}
interface	Receive	{
		event	message_t*	receive(message_t	*	msg,	void	*
				payload,	uint8_t	len);
}
*Other
interface	Packet	{
		command	void	clear(message_t	*	msg);
		command	void*	getPayload(message_t	*	msg,	uint8_t	
				len);
		command	uint8_t	payloadLength(message_t	*	msg);
		command	void	setPayLoadLength(message_t	*	msg,	uint8_t
				len);
		command	uint8_t	maxPayloadLength();
}
*
interface	AMPacket	{
		command	am_addr_t	address();
		command	am_group_t	localGroup();
		command	am_addr_t	destination(message_t*	amsg);
		command	am_addr_t	source(message_t*	amsg);
		command	am_group_t	group(message_t*	amsg);
		command	bool	isForMe(message_t*	amsg);
		command	am_id_t	type(message_t*	amsg);
}
* 
*///////////
interface BaseStation{/*
    command void init();
    event void initDone();
    command uint8_t getDeviceRole();
    command void sendPacket(void* msg, uint8_t len);
    event void recvPacket(void* msg);*/
}